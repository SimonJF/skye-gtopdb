import Tables;
import Mvu;
import MvuHTML;
import MvuAttrs;
import Template;

typename DiseaseID = Int;
typename DiseaseName = String;

typename HTML(a) = MvuHTML.HTML(a);

# For now -- this will also contain synonym and xref info later
typename DiseaseInfo =
  (diseaseData: Tables.DbDisease,
   databases: [Tables.DbDatabase],
   dbLinks: [Tables.DbDiseaseDatabaseLink]);


module Selecting {
  typename Model =
    (diseases: [(DiseaseID, DiseaseName)], selectedDisease: DiseaseID,
     deleteDisease: (Int) {}~> (),
     getDiseases: () {}~> [(DiseaseID, DiseaseName)]);

  typename Message =
    [| NoOp | ChangeID:Int | Submit |];

  fun updt(msg, model) {
    switch(msg) {
      case NoOp -> model
      case ChangeID(id) ->
        (model with selectedDisease = id)

      case SubmitEdit ->
        redirect("/editDiseases?diseaseID=" ^^ intToString(model.selectedDisease));
        model

      case SubmitDelete ->
        model.deleteDisease(model.selectedDisease);
        (model with diseases = model.getDiseases())
    }
  }

  fun view(model) {
    open MvuHTML;
    open MvuAttrs;
    var h0 = MvuHTML.empty;
    var a0 = MvuAttrs.empty;

    var options =
      MvuHTML.concatMap(fun((di, dn)) {
          var selAttr =
            if (di == model.selectedDisease) { MvuAttrs.attr("selected", "selected") }
            else { MvuAttrs.empty };
          var di = intToString(di);
          option(value(di) +@ selAttr,
              textNode(dn ^^ " [id: " ^^ di ^^ "]"))
      }, model.diseases);

    form(a0,
      div(class("form-group row"),
       # ID search field
        label(for_("diseaseID") +@ class("col-sm-2 col-form-label"),
          textNode("Search by ID")) +*
        div(class("col-sm-10"),
          input(type("text") +@
            class("form-control") +@
            id("diseaseID") +@
            onKeyUp(fun(value) {
              if (isInt(value)) {
                ChangeID(stringToInt(value))
              } else {
                NoOp
              }
            }), h0))) +*
       # Disease name list
      div(class("form-group row"),
        label(for_("diseaseSel") +@ class("col-sm-2 col-form-label"),
          textNode("Disease Name")) +*
        div(class("col-sm-10"),
          select_(id("diseaseSel") +@
            onChange(
              fun(value) {
                if (isInt(value)) {
                  ChangeID(stringToInt(value))
                } else {
                  NoOp
                }
              }), options))) +*
      div(class("form-group row"),
        div(class("col-sm-2"), h0) +*
        div(class("col-sm-1"),
          button(type("button") +@ class("btn btn-primary") +@
            onClick(fun() { SubmitEdit }), textNode("Edit"))) +*
        div(class("col-sm-1"),
          button(type("button") +@ class("btn btn-primary") +@
            onClick(fun() { SubmitDelete }), textNode("Delete")))))
  }

  fun mainPage() {
    var diseasesLens = lens Tables.disease with { disease_id -> name };

    fun retrieveDiseases() {
      var diseases = sortBy(fun(x) { x.name }, lensget diseasesLens);
      map(fun(x) { (x.disease_id, x.name) }, diseases)
    }

    # TODO: Actor-style threads spawned in a `mainPage` loop should be GCed when
    # the associated client disconnects.
    var pid = spawn {
      receive {
        case Delete(id) ->
          # TODO: Need to properly handle all of the other cruft here (deleting FKs etc)
          var selectLens = lensselect from diseasesLens by fun(x) { x.disease_id == id };
          var selectLens = lenscheck selectLens;
          lensput selectLens with []
        case GetDiseases(pid) ->
          pid ! (retrieveDiseases())
      }
    };

    fun deleteDisease(id) { pid ! Delete(id) }

    sig getDiseases : () {}~> [(DiseaseID, DiseaseName)]
    fun getDiseases() {
      spawnWait {
        pid ! GetDiseases(self());
        receive { case x -> x }
      }
    }

    var initialModel = {
      var diseases = retrieveDiseases();
      var selectedID =
        switch(diseases) {
          case [] -> 0
          case (id, _) :: xs -> id
        };

      (diseases = diseases, selectedDisease = selectedID,
       deleteDisease = deleteDisease, getDiseases = getDiseases)
    };

    Mvu.runSimple("placeholder", initialModel, view, updt);
  }

}

module Editing {
  typename Model =
    Maybe((diseaseInfo: DiseaseInfo, submitDisease: (DiseaseInfo) {}~> ()));

  typename Message =
    [| UpdateName:String | UpdateDescription:String | Submit
     | Cancel  |];

  sig updt : (Message, Model) {}~> Model
  fun updt(msg, model) {
    fun updtModel(model) {
      switch(msg) {
        case UpdateName(name) ->
          # Funnily enough, this is where we could do with _non_-relational lenses...
          var diseaseData =
            (model.diseaseInfo.diseaseData with name = name);
          var diseaseInfo =
            (model.diseaseInfo with diseaseData = diseaseData);
          (model with diseaseInfo = diseaseInfo)
        case UpdateDescription(desc) ->
          var diseaseData =
            (model.diseaseInfo.diseaseData with description = desc);
          var diseaseInfo =
            (model.diseaseInfo with diseaseData = diseaseData);
          (model with diseaseInfo = diseaseInfo)
        case Submit ->
          model.submitDisease(model.diseaseInfo); model
        case Cancel ->
          redirect("/editDiseases"); model
      }
    }

    switch(model) {
      case Just(model) -> Just(updtModel(model))
      case Nothing -> Nothing
    }
  }

  sig view : (Model) ~> MvuHTML.HTML(Message)
  fun view(model) {
    open MvuHTML;
    open MvuAttrs;
    var h0 = MvuHTML.empty;
    var a0 = MvuAttrs.empty;

    fun renderModel(model) {
      var data = model.diseaseInfo.diseaseData;
      div(class("container"),
        div(class("row mt-3"),
          div(class("col-sm"),
            div(class("card"),
              div(class("card-header"), textNode("Basic information")) +*
              div(class("card-body"),
                form(a0,
                  # Disease ID
                  div(class("form-group"),
                    label(a0, textNode("Disease ID: ")) +*
                    textNode(intToString(data.disease_id))) +*
                  # Disease Name
                  div(class("form-group"),
                    label(for_("diseaseName"), textNode("Disease Name")) +*
                    input(type("text") +@
                      id("diseaseName") +@
                      class("form-control") +@
                      value(data.name) +@
                      onInput(fun(name) { UpdateName(name) }), h0)) +*
                  # Disease Comments
                  div(class("form-group"),
                    label(for_("diseaseDescription"), textNode("Disease Description")) +*
                    textarea(id("diseaseDescription") +@
                      class("form-control") +@
                      value(data.description) +@
                      onInput(fun(desc) { UpdateDescription(desc) }), h0))))))) +*

        # Next up: DB refs panel
        div(class("row mt-3"),
          div(class("col-sm"),
            div(class("card"),
              div(class("card-header"), textNode("Database References")) +*
              div(class("card-body"), textNode("TODO: CONTENT"))))) +*

        div(class("row mt-5"),
          div(class("col-sm"),
                button(type("button") +@ class("btn btn-primary mr-2") +@
                    onClick(fun() { Submit }), textNode("Submit")) +*
                button(type("button") +@ class("btn btn-primary") +@
                    onClick(fun() { Cancel }), textNode("Cancel")))))
    }

    switch(model) {
      case Just(model) -> renderModel(model)
      case Nothing -> textNode("Invalid Disease Specified")
    }
  }

  fun mainPage(diseaseID) {
    # Disease lenses
    var diseasesLens = lens Tables.disease with { disease_id -> name };
    var diseaseSelectLens =
      lenscheck (lensselect from diseasesLens by fun(x) { x.disease_id == diseaseID });
    var diseases = lensget diseaseSelectLens;

    # Database link lenses
    var dbLens = lens Tables.tbl_database with { database_id -> name };
    var dbs = lensget dbLens;

    var dbLinksLens =
      lens Tables.disease_database_link with
        { disease_database_link_id -> disease_id database_id placeholder };
    var dbLinksSelectLens =
      lenscheck (lensselect from dbLinksLens by fun(x) { x.disease_id == diseaseID });
    var dbLinks = lensget dbLinksSelectLens;

    var pid = spawn {
      receive {
        case Submit(diseaseInfo, pid) ->
          lensput diseaseSelectLens with [diseaseInfo.diseaseData];
          lensput dbLinksSelectLens with diseaseInfo.dbLinks;
          pid ! Done
      }
    };

    sig submitDisease : (DiseaseInfo) {}~> ()
    fun submitDisease(diseaseInfo) {
      spawnWait {
        pid ! Submit(diseaseInfo, self());
        receive { case Done -> () }
      };
      redirect("/editDiseases")
    }

    var (initialModel: Model) = {
      switch(diseases) {
        case [] -> Nothing
        case d :: _ ->
          var diseaseInfo =
            (diseaseData = d,
             databases = dbs,
             dbLinks = dbLinks);

          Just((diseaseInfo = diseaseInfo, submitDisease = submitDisease))
      }
    };

    Mvu.runSimple("placeholder", initialModel, view, updt)
  }
}


fun mainPage() {

  switch(lookup("diseaseID", environment())) {
    case Just(id) ->
      if (isInt(id)) {
        Editing.mainPage(stringToInt(id))
      } else {
        Selecting.mainPage()
      }
    case Nothing ->
      Selecting.mainPage()
  };

  Template.template()
}


import Tables;
import Template;
import Mvu;
import MvuHTML;
import MvuAttrs;
import Species;
import InteractionUtilities;

typename InteractionID = Int;
typename ReferenceID = Int;

typename InteractionInfo =
  (interaction: Tables.DbInteraction,
   ligand: Tables.RawLigand,
   references: [ReferenceID]);


typename Model =
  Maybe((
      object: Tables.RawObject,
      receptorBasic: Maybe(Tables.DbReceptorBasic),
      ligands: [(ligand_id: Int, name: String)],
      interactions: [InteractionInfo],
      currentInteraction: Maybe(InteractionInfo),
      references: [Tables.DbReference],
      speciesMap: Species.SpeciesMap,
      submit: (Maybe(Tables.DbReceptorBasic), [InteractionInfo]) {}~> ()
  ));


typename CommentType =
  [| Activators | GatingInhibitors | Agonists | ChannelBlockers
   | Antagonists | AllostericModulators | SubunitSpecific | Inhibitors
   | Antibodies
  |];


var commentTypes =
  [ Activators, GatingInhibitors, Agonists, ChannelBlockers,
    Antagonists, AllostericModulators, SubunitSpecific, Inhibitors,
    Antibodies ];

# My kingdom for "deriving Show"
fun showCommentType(ct) {
  switch(ct) {
    case Activators -> "Activators"
    case GatingInhibitors -> "Gating Inhibitors"
    case Agonists -> "Agonists"
    case ChannelBlockers -> "Channel Blockers"
    case Antagonists -> "Antagonists"
    case AllostericModulators -> "Allosteric Modulators"
    case SubunitSpecific -> "Subunit Specific"
    case Inhibitors -> "Inhibitors"
    case Antibodies -> "Antibodies"
  }
}

typename Message = [| UpdateComment:(CommentType, String) | Submit | Cancel |];

fun emptyInteraction(objectID) {
  (interaction_id = (-1),
   ligand_id = (-1),
   object_id = objectID,
   type = "None",
   action = "None",
   action_comment = "",
   species_id = (-1), # TODO: This should default to something...
   endogenous = false,
   selective = false,
   use_dependent = false,
   voltage_dependent = false,
   affinity_units = "-",
   affinity_high = 0.0,
   affinity_median = 0.0,
   affinity_low = 0.0,
   concentration_range = "",
   affinity_voltage_high = 0.0,
   affinity_voltage_median = 0.0,
   affinity_voltage_low = 0.0,
   affinity_physiological_voltage = false,
   rank= (-1),
   selectivity = "",
   original_affinity_low_nm = 0.0,
   original_affinity_median_nm = 0.0,
   original_affinity_high_nm = 0.0,
   original_affinity_units = "",
   original_affinity_relation = "",
   assay_description = "",
   assay_conditions = "",
   from_grac = false,
   only_grac = false,
   receptor_site = "",
   ligand_context = "",
   percent_activity = 0.0,
   assay_url = "",
   primary_target = false,
   target_ligand_id= (-1),
   whole_organism_assay = false,
   hide = false)
}

fun emptyInteractionInfo(objectID, ligand) {
  (interaction = emptyInteraction(objectID),
   =ligand,
   references = [])
}


sig commit: (Int, (Maybe(Tables.DbReceptorBasic), [InteractionInfo]), (Maybe(Tables.DbReceptorBasic), [InteractionInfo])) {}~> ()
fun commit(objectID, oldInfo, newInfo) server {
  var (oldComments, oldInteractions) = oldInfo;
  var (newComments, newInteractions) = newInfo;

  switch((oldComments, newComments)) {
    case (Just(oldRB), Just(newRB)) ->
      if (oldRB == newRB) {
        () # Nothing doing
      } else {
        update (rb <-- Tables.receptor_basic)
          where (rb.object_id == objectID)
          set (
            list_comments = newRB.list_comments,
            associated_proteins_comments = newRB.associated_proteins_comments,
            functional_assay_comments = newRB.functional_assay_comments,
            tissue_distribution_comments = newRB.tissue_distribution_comments,
            functions_comments = newRB.functions_comments,
            altered_expression_comments = newRB.altered_expression_comments,
            expression_pathophysiology_comments = newRB.expression_pathophysiology_comments,
            mutations_pathophysiology_comments = newRB.mutations_pathophysiology_comments,
            variants_comments = newRB.variants_comments,
            xenobiotic_expression_comments = newRB.xenobiotic_expression_comments,
            antibody_comments = newRB.antibody_comments,
            agonists_comments = newRB.agonists_comments,
            antagonists_comments = newRB.antagonists_comments,
            allosteric_modulators_comments = newRB.allosteric_modulators_comments,
            activators_comments = newRB.activators_comments,
            inhibitors_comments = newRB.inhibitors_comments,
            channel_blockers_comments = newRB.channel_blockers_comments,
            gating_inhibitors_comments = newRB.gating_inhibitors_comments)
      }
    case _ ->
      # Just(old), Nothing; Nothing, Just(new) are impossible
      # due to the way the UI is set up, so ignore them.
      ()
  }
}

fun getInitialModel(objectID) {
  var object =
    query {
      for (o <-- Tables.object)
        where (o.object_id == objectID)
        [(obj = o,
          rbs =
            for (rb <-- Tables.receptor_basic)
              where (rb.object_id == objectID)
              [rb],
          interactions =
            for (i <-- Tables.interaction)
              where (i.object_id == objectID)
              for (l <-- Tables.ligand)
              where (l.ligand_id == i.ligand_id)
              [(interaction = i,
                ligand = l,
                references =
                  for (iar <-- Tables.interaction_affinity_refs)
                    where (iar.interaction_id == i.interaction_id)
                    [iar.reference_id])
              ])
        ]
    };

  switch (object) {
    case [] -> Nothing
    case x :: _ ->
      # TODO: Unfortunately this blows the stack. And is slow. Alas.
      # We might have to have a user-unfriendly "enter a ligand ID" for now...
      var allLigands = [];
      #query {
      #  for (l <-- Tables.ligand)
      #    [(ligand_id = l.ligand_id, name = l.name)]
      #};

      var allReferences = [];
       #query {
       #  for (r <-- Tables.reference)
       #    [r]
       #};

      var rb =
        switch(x.rbs) {
          case [] -> Nothing
          case rb :: _ -> Just(rb)
        };

      sig submit : (Maybe(Tables.DbReceptorBasic), [InteractionInfo]) {}~> ()
      fun submit(newRb, newInteractions) {
        commit(objectID, (rb, x.interactions), (newRb, newInteractions));
        redirect("/")
      }

      Just((object = x.obj,
            ligands = allLigands,
            receptorBasic = rb,
            =submit,
            interactions = x.interactions,
            currentInteraction = Nothing,
            speciesMap = Species.getSpeciesMap(),
            references = allReferences))
  }
}


# TODO: fill me in
sig updt : (Message, Model) {}~> Model
fun updt(msg, model) {
  fun updtModel(model) {
    fun updateComment(ty, newVal, rb) {
      switch(ty) {
        case Activators -> (rb with activators_comments = newVal)
        case GatingInhibitors -> (rb with gating_inhibitors_comments = newVal)
        case Agonists -> (rb with agonists_comments = newVal)
        case ChannelBlockers -> (rb with channel_blockers_comments = newVal)
        case Antagonists -> (rb with antagonists_comments = newVal)
        case AllostericModulators -> (rb with allosteric_modulators_comments = newVal)
        case SubunitSpecific -> rb # TODO
        case Inhibitors -> (rb with inhibitors_comments = newVal)
        case Antibodies -> (rb with antibody_comments = newVal)
      }
    }

    switch(msg) {
      case UpdateComment(ty, newVal) ->
        switch(model.receptorBasic) {
          case Just(rb) ->
            var newRb = updateComment(ty, newVal, rb);
            (model with receptorBasic = Just(newRb))
          case Nothing -> model
        }
      case Submit ->
        model.submit(model.receptorBasic, model.interactions); model
      case Cancel ->
        redirect("/"); model
    }
  }

  switch(model)  {
    case Just(model) -> Just(updtModel(model))
    case Nothing -> Nothing
  }
}

fun view(model) {
  open MvuHTML;
  open MvuAttrs;

  fun viewModel(model) {

    fun speciesShortName(speciesID) {
      Species.resolveSpeciesShortName(speciesID, model.speciesMap)
    }

    fun speciesLongName(speciesID) {
      Species.resolveSpeciesLongName(speciesID, model.speciesMap)
    }

    var h0 = MvuHTML.empty;
    var a0 = MvuAttrs.empty;
    fun panel(name, contents) {
      div(class("row mt-3"),
        div(class("col-sm"),
          div(class("card"),
            div(class("card-header"), textNode(name)) +*
            div(class("card-body"), contents))))
    }


    var header =
      h1(a0,
        textNode("Editing interactions for ") +*
        unescapedTextNode(model.object.name) +*
        textNode(" (id: " ^^ intToString(model.object.object_id) ^^ ")"));

    var interactionComments = {
      switch(model.receptorBasic) {
        case Just(rb) ->
          var boxes =
            [(Activators, rb.activators_comments),
              (GatingInhibitors, rb.gating_inhibitors_comments),
              (Agonists, rb.agonists_comments),
              (ChannelBlockers, rb.channel_blockers_comments),
              (Antagonists, rb.antagonists_comments),
              (AllostericModulators, rb.allosteric_modulators_comments),
              # SubunitSpecific, rb.subunit_specific_comments TODO: ADD THIS IN
              (Inhibitors, rb.inhibitors_comments),
              (Antibodies, rb.antibody_comments)];

          fun renderBox((type, comments), i) {
            var boxID = "commentBox" ^^ intToString(i);
            div(class("form-group"),
              label(for_(boxID), textNode(showCommentType(type))) +*
              textarea(id(boxID) +@ class("form-control") +@ value(comments)
                +@ onInput(fun(str) { UpdateComment(type, str) }), h0))
          }

          var content =
            MvuHTML.concat(mapi(renderBox, boxes));

          panel("Interaction comments", content)
        case Nothing -> MvuHTML.empty
      }
    };

    var existingInteractions = {
      open InteractionUtilities;
      fun renderInteraction(i) {
        var affinity = mkAffinity(i.interaction.affinity_units,
            i.interaction.affinity_high, i.interaction.affinity_median,
            i.interaction.affinity_low);
        var rawAffinity = mkAffinity(i.interaction.original_affinity_units,
            i.interaction.original_affinity_high_nm, i.interaction.original_affinity_median_nm,
            i.interaction.original_affinity_low_nm);

        tr(a0,
          td(a0,
            unescapedTextNode(i.ligand.name) +*
            br(a0, h0) +*
            textNode(" { ID: " ^^ intToString(i.ligand.ligand_id) ^^ "i }")) +*
          td(a0, textNode(i.interaction.type)) +*
          td(a0, textNode(i.interaction.action)) +*
          td(a0, textNode(speciesShortName(i.interaction.species_id))) +*
          td(a0, displayAffinity(affinity, false)) +*
          td(a0, textNode(i.interaction.affinity_units)) +*
          td(a0, textNode(i.interaction.concentration_range)) +*
          td(a0, displayAffinity(rawAffinity, false)) +*
          td(a0, textNode(i.interaction.assay_description)) +*
          td(a0, textNode(if (i.interaction.from_grac) { "true" } else { "false" }) ) +*
          td(a0, textNode(intToString(i.interaction.interaction_id)))
        )
      }

      var interactionsTable = {
        table_(class("table table-bordered"),
          thead(a0,
            tr(a0,
              th(a0, textNode("Ligand")) +*
              th(a0, textNode("Type")) +*
              th(a0, textNode("Action")) +*
              th(a0, textNode("Sp.")) +*
              th(a0, textNode("Affinity")) +*
              th(a0, textNode("Units")) +*
              th(a0, textNode("Concentration range")) +*
              th(a0, textNode("Raw affinity")) +*
              th(a0, textNode("Assay desc.")) +*
              th(a0, textNode("Concise view only?")) +*
              th(a0, textNode("ID")))) +*
          tbody(a0, MvuHTML.concatMap(renderInteraction, model.interactions)))
      };

      panel("Existing interactions", interactionsTable)
    };

    var interactionEditor =
      switch(model.currentInteraction) {
        case Just(interactionInfo) -> panel("Edit interaction", MvuHTML.empty)
        case Nothing -> MvuHTML.empty
      };

    var buttons = {
      div(class("row mt-5"),
        div(class("col-sm"),
          button(type("button") +@ class("btn btn-primary mr-2") +@
              onClick(fun() { Submit }), textNode("Submit")) +*
          button(type("button") +@ class("btn btn-primary") +@
              onClick(fun() { Cancel }), textNode("Cancel"))))
    };

    header +*
    interactionComments +*
    existingInteractions +*
    interactionEditor +*
    buttons
  }

  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Nonexistent object")
  }
}


fun mainPage() {
  var initialModel =
    switch(lookup("objectID", environment())) {
      case Just(id) ->
        debug("ID: " ^^ id);
        if (isInt(id)) {
          getInitialModel(stringToInt(id))
        } else {
          Nothing
        }
      case Nothing -> Nothing
    };
  Mvu.runSimple("placeholder", initialModel, view, updt);
  Template.template()
}



open import Parser;
open import RenderMarkup;
open import Utility;
open import DataTable;
open import MvuHTML;
open import MvuAttrs;
open import Tables;
open import Mvu;
open import Template;
open import Reference;

typename LigandID = Int;
typename TargetID = Int;
typename DiseaseID = Int;

typename Message = [|
    SortImmunoTargetInteractions: (TargetID, ColumnName, SortDirection)
  | SortLigands: (ColumnName, SortDirection)
  | ToggleLigandComments: LigandID
  | ToggleReferences
|];


typename Ligand = (
    ligandId: LigandID,
    ligandRawName: String,
    ligandName: Markup,
    ligandImmuno: Bool,
    ligandApproved: Bool,
    ligandShowComments: Bool,
    ligandReferences: [Int],
    ligandImmunoComments: Markup,
    ligandClinicalComments: Markup,
    ligandBioactivityComments: Markup
  );

# It seems like this data is only applicable for immuno-relevant
# ligands.
typename ImmunoTargetInteraction = (
    itLigandId: LigandID,
    itLigandName: Markup,
    itLigandRawName: String,
    itLigandImmuno: Bool,
    itLigandApproved: Bool,
    itLigandPrimary: Bool,
    itLigandComments: Markup,
    itLigandRawComments: String
  );

typename Target = (
    targetId: TargetID,
    targetName: Markup,
    targetRole: Markup,
    targetComments: Markup,
    targetDrugComments: Markup,
    targetSideEffects: Markup,
    targetTherapeuticUse: Markup,
    targetReferences: [ReferenceId],
    targetMutationCount: Int,
    targetInteractions: SortableTable(ImmunoTargetInteraction, Message)
  );

# TODO: Might be worth abstracting this out, actually
typename DatabaseLink =
  (dbName: String,
   dbLinkText: String,
   dbLinkURL: String);

typename DiseaseInfo =
  (diID: DiseaseID,
   diName: Markup,
   diSynonyms: [Markup],
   diDescription: Markup,
   diDatabaseLinks: [DatabaseLink],
   diTargets: [Target],
   diLigands: SortableTable(Ligand, Message),
   diShowReferences: Bool,
   diReferences: [(ReferenceId, (ReferenceNumber, Reference.Reference))]
   );
typename Model = Maybe(DiseaseInfo);

sig updt : (Message, Model) ~%~> Model
fun updt(msg, model) {

  fun sortImmunoTargetInteractions(targets, tid, cn, dir) {
    switch(targets) {
      case [] -> []
      case t :: ts ->
        if (t.targetId == tid) {
          var interactionTable =
            DataTable.updateSortStatus(t.targetInteractions, cn, dir);
          (t with targetInteractions = interactionTable) :: ts
        } else {
          t :: sortImmunoTargetInteractions(ts, tid, cn, dir)
        }
    }
  }

  fun updtModel(model) {
    switch(msg) {
      case SortImmunoTargetInteractions(targetId, colName, dir) ->
        (model with diTargets =
          sortImmunoTargetInteractions(model.diTargets, targetId, colName, dir))
      case SortLigands(colName, dir) ->
        (model with diLigands =
           DataTable.updateSortStatus(model.diLigands, colName, dir))
      case ToggleLigandComments(lid) ->
        var newLigands =
          map(fun(l) {
            if (l.ligandId == lid) {
              (l with ligandShowComments = not(l.ligandShowComments))
            } else {
              l
            }
          }, DataTable.getTableData(model.diLigands));
        var newLigandTable = DataTable.updateTableData(model.diLigands, newLigands);
        (model with diLigands = newLigandTable )
      case ToggleReferences ->
        (model with diShowReferences = not(model.diShowReferences))
    }
  }
  switch (model) {
    case Just(model) -> Just(updtModel(model))
    case Nothing -> Nothing
  }
}

sig getModel : (Int) ~%~> Model
fun getModel(diseaseId) {

  fun getPathoTargets() {
    query {
      for (pp <-- Tables.pathophysiology)
      where (pp.disease_id == diseaseId)
        for (o <-- Tables.object)
        where (o.object_id == pp.object_id)
        [(id=o.object_id, name=o.name, comments=pp.comments,
          role=pp.role, drugComments=pp.drugs, sideEffects=pp.side_effects,
          therapeuticUse=pp.use,
          mutationCount =
            length(
              for (m <-- Tables.mutation)
                where (m.pathophysiology_id == pp.pathophysiology_id)
                [m]),
          references =
            for (pp_ref <-- Tables.pathophysiology_refs)
              where (pp_ref.pathophysiology_id == pp.pathophysiology_id)
              [pp_ref.reference_id])]
    }
  }

  fun getImmunoTargets() {
    query {
      for (id2o <-- Tables.immuno_disease2object)
        where (id2o.disease_id == diseaseId)
        for (o <-- Tables.object)
          where (o.object_id == id2o.object_id)
          [(id=o.object_id, name=o.name,
            comments=id2o.comment,
            role="", drugComments="", sideEffects="", therapeuticUse="",
            mutationCount = 0,
            references =
              for (id2o_ref <-- Tables.immuno_disease2object_refs)
                where (id2o_ref.immuno_disease2object_id == id2o.immuno_disease2object_id)
                [id2o_ref.reference_id]
          )]
    }
  }

  # First, get raw info from the DB
  var rawInfo =
    query {
      for (d <-- Tables.disease)
        where (d.disease_id == diseaseId)
          [(id = d.disease_id,
            name = d.name,
            synonyms =
              for (d2s <-- Tables.disease2synonym)
                where (d2s.disease_id == diseaseId)
                [d2s.synonym],
            description = d.description,
            dbLinks =
              for (ddl <-- Tables.disease_database_link)
                where (ddl.disease_id == diseaseId)
                for (db <-- Tables.tbl_database)
                  where (db.database_id == ddl.database_id)
                  [(dbName=db.name, dbUrl=db.url, dbPlaceholder=ddl.placeholder,
                    dbPrefix=db."prefix")],
            patho_targets = getPathoTargets(),
            immuno_targets = getImmunoTargets(),
            ligands =
              for (d2l <-- Tables.immuno_disease2ligand)
                where (d2l.disease_id == diseaseId)
                  for (l <-- Tables.ligand)
                    where (l.ligand_id == d2l.ligand_id)
                    [
                      (lId= l.ligand_id,
                       lName = l.name,
                       lImmuno = l.in_gtip,
                       lApproved = l.approved,
                       lImmunoComments = d2l.comment,
                       lClinicalComments = l.clinical_use,
                       lBioactivityComments = l.bioactivity_comments)
                    ]
          )]
    };

  # Next, run the parser to get ourselves the markup and reference information
  fun parseRaw(rawResult) {
    var name = parseOrError(rawResult.name);
    var synonyms = map(parseOrError, rawResult.synonyms);
    var description = parseOrError(rawResult.description);
    # We may get multiple results for targets, given that they may be in both
    # immuno and pathophysiology tables, or one. If they are in both, we need
    # to merge the results.
    var allTargets = rawResult.patho_targets ++ rawResult.immuno_targets;
    var groupedTargets = map(second, groupBy(fun(x) { x.id }, allTargets));
    # Now we've grouped, we need to merge
    fun max2(x, y) {
      switch(max([x, y])) {
        case Some(z) -> z
        case None -> x
      }
    }

    var targets = map(fun(group) {
        fun concatComments(x, y) {
          switch((x, y)) {
            case ("", x) -> x
            case (y, "") -> y
            case (x, y) -> x ^^ " " ^^ y
          }
        }
        switch(group) {
          case [] -> error("Error in groupBy")
          case [x] -> x
          case x :: xs ->
            fold_left(fun(x, y) {
              (id=x.id,
                name=x.name,
                comments=concatComments(x.comments, y.comments),
                role=concatComments(x.role, y.role),
                drugComments=concatComments(x.drugComments, y.drugComments),
                sideEffects=concatComments(x.sideEffects, y.sideEffects),
                mutationCount = max2(x.mutationCount, y.mutationCount),
                therapeuticUse=concatComments(x.therapeuticUse, y.therapeuticUse),
                references = x.references ++ y.references)
            }, x, xs)
        }
    }, groupedTargets);

    var (targets, targetRefs, immunoRefs) =
      fold_right(fun(x, (targets, refs, iRefs)) {
        var raw_interactions =
          query {
            for (i <-- Tables.interaction)
              where (i.object_id == x.id)
              for (id2l <-- Tables.immuno_disease2ligand)
                where (id2l.ligand_id == i.ligand_id && id2l.disease_id == diseaseId)
                for (l <-- Tables.ligand)
                  where (l.ligand_id == i.ligand_id)
                    [(lId = l.ligand_id, lName = l.name,
                      lImmuno = l.in_gtip, lApproved = l.approved,
                      lPrimary = i.primary_target,
                      lComments = id2l.comment)]
          };

          var (immunoInteractions, immunoRefs) =
            fold_right(fun (x, (interactions, refs)) {
              var interaction = (
                  itLigandId = x.lId,
                  itLigandName = parseOrError(x.lName),
                  itLigandRawName = x.lName,
                  itLigandImmuno = x.lImmuno,
                  itLigandApproved = x.lApproved,
                  itLigandPrimary = x.lPrimary,
                  itLigandComments = parseOrError(x.lComments),
                  itLigandRawComments = x.lComments
              );
              var (newRefs, _) =
                RenderMarkup.collectIds(interaction.itLigandComments);
              (interaction :: interactions, newRefs ++ refs)
          }, ([], []), raw_interactions);

        var immunoInteractions =
          uniquifyBy(fun(x, y) { x.itLigandRawName == y.itLigandRawName },
              immunoInteractions);

        var interactionsTable =
          DataTable.makeTable(
              [("Ligand", ("ligand_header",
                  Sortable(fun(x, y) { simpleCmp(x.itLigandRawName, y.itLigandRawName) }))),
               ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)), # Needed for icon display
               ("Comments", ("comments_header", Sortable(fun(x, y) { simpleCmp(x.itLigandRawComments, y.itLigandRawComments)} )))],
              immunoInteractions,
              fun (col, dir) { SortImmunoTargetInteractions(x.id, col, dir) });

        var res =
          (
           targetId = x.id,
           targetName = parseOrError(x.name),
           targetComments = parseOrError(x.comments),
           targetRole = parseOrError(x.role),
           targetDrugComments = parseOrError(x.drugComments),
           targetSideEffects = parseOrError(x.sideEffects),
           targetTherapeuticUse = parseOrError(x.therapeuticUse),
           targetMutationCount = x.mutationCount,
           targetReferences = x.references,
           targetInteractions = interactionsTable
          );
        var (refIds, _) = RenderMarkup.collectIds(res.targetComments);
        var refIds = refIds ++ x.references;
        (res :: targets, refIds ++ refs, immunoRefs ++ iRefs)
    }, ([], [], []), targets);
    var targets = sortBy(fun(t) { t.targetId }, targets);

    var (ligands, ligandRefs) = fold_right(fun(l, (ligands, refs)) {
        var id2l_refs =
          query {
            for (id2l <-- Tables.immuno_disease2ligand)
              where (id2l.disease_id == diseaseId && id2l.ligand_id == l.lId)
              for (id2l_ref <-- Tables.immuno_disease2ligand_refs)
                where (id2l.immuno_disease2ligand_id == id2l_ref.immuno_disease2ligand_id)
                [id2l_ref.reference_id]
          };

        var res =
          (ligandId = l.lId,
           ligandName = parseOrError(l.lName),
           ligandRawName = l.lName,
           ligandImmuno = l.lImmuno,
           ligandApproved = l.lApproved,
           ligandImmunoComments = parseOrError(l.lImmunoComments),
           ligandClinicalComments = parseOrError(l.lClinicalComments),
           ligandBioactivityComments = parseOrError(l.lBioactivityComments),
           ligandShowComments = false,
           ligandReferences = id2l_refs);
        var (iCommentRefs, _) = RenderMarkup.collectIds(res.ligandImmunoComments);
        var (cCommentRefs, _) = RenderMarkup.collectIds(res.ligandClinicalComments);
        var (bCommentRefs, _) = RenderMarkup.collectIds(res.ligandBioactivityComments);
        var refs = id2l_refs ++ iCommentRefs ++ cCommentRefs ++ bCommentRefs ++ refs;
        (res :: ligands, refs)
    }, ([], []), rawResult.ligands);

    var ligandsTable = DataTable.makeTable(
        [("Ligand", ("ligand_header", Sortable(fun(x, y) { simpleCmp(x.ligandRawName, y.ligandRawName)}))),
          ("", ("", NotSortable)), ("", ("", NotSortable)), ("References", ("reference_header", NotSortable)),
          ("Clinical and Disease Comments", ("comment_header", NotSortable))],
        ligands,
        fun (cn, dir) { SortLigands(cn, dir) }
    );

    var referenceIds = uniquify(targetRefs ++ ligandRefs ++ immunoRefs);

    var dbLinks = map(fun(link) {
      (dbName=link.dbName,
       dbLinkText = link.dbPrefix ^^ link.dbPlaceholder,
       dbLinkURL = replacePlaceholder(link.dbUrl, link.dbPlaceholder))
    }, rawResult.dbLinks);

    (diID = rawResult.id,
     diName = name,
     diSynonyms = synonyms,
     diDescription = description,
     diDatabaseLinks = dbLinks,
     diTargets = targets,
     diLigands = ligandsTable,
     diShowReferences = false,
     diReferences = mkReferenceData(queryReferences(referenceIds)))
  }

  switch (rawInfo) {
    case [] -> Nothing
    case rawResult :: _ -> Just(parseRaw(rawResult))
  }
}

sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("diseaseId", environment())) {
    case Just(diseaseId) ->
      if (isInt(diseaseId)) {
        getModel(stringToInt(diseaseId))
      } else {
        Nothing
      }
    case Nothing -> Nothing
  }
}

fun view(model) {
  var a0 = MvuAttrs.empty;
  fun viewModel(model) {
    fun renderM(markup) { renderMarkup(markup, model.diReferences, []) }
    fun colspan(x) { MvuAttrs.attr("colSpan", x) }
    fun rowspan(x) { MvuAttrs.attr("rowSpan", x) }
    fun src(x) { MvuAttrs.attr("src", x) }
    fun valign(x) { MvuAttrs.attr("valign", x) }
    fun role(x) { MvuAttrs.attr("role", x) }
    var renderedName = RenderMarkup.renderSimple(model.diName);
    var diseaseInfoBox = {
      var targetCount = length(model.diTargets);
      var immunoTargetCount =
        length(filter(fun(t) {
              length(DataTable.getTableData(t.targetInteractions)) > 0 },
            model.diTargets));
      var immunoLigandCount =
        length(filter(fun(l) { l.ligandImmuno },
              DataTable.getTableData(model.diLigands)));
      var synonyms = MvuHTML.concat(join([textNode(" | ")],
            map(fun(x) { [RenderMarkup.renderSimple(x)] }, model.diSynonyms)));

      fun infoBox(aName, heading, content) {
        a(name(aName), MvuHTML.empty) +*
          table_(class("receptor_data_tables fullwidth"),
            thead(a0,
              tr(name("hotspot") +@ class("hotspot"),
                td(class("info category"), textNode(heading)))) +*
            tbody(name("toggle"),
              tr(a0, td(class("info"), content))))
      }

      var synonymsBox =
        if (listEmpty(model.diSynonyms)) {
          MvuHTML.empty
        } else {
          infoBox("diseaseSynonyms", "Synonyms", synonyms)
        };

      var descriptionBox =
        if (Parser.markupEmpty(model.diDescription)) {
          MvuHTML.empty
        } else {
          infoBox("description", "Description", renderM(model.diDescription))
        };

      var dbLinksBox = {
        if (listEmpty(model.diDatabaseLinks)) {
          MvuHTML.empty
        } else {
          var dbLinks =
            MvuHTML.concat(map(fun(link) {
              p(a0,
                  textNode(link.dbName ^^ ": ") +*
                  a(href(link.dbLinkText), textNode(link.dbLinkText)))
            }, model.diDatabaseLinks));
          infoBox("diseaseLinks", "Database Links", dbLinks)
        }
      };

      h4(a0, renderedName) +*
      div(class("contentboxfullhelp"),
        div(class("imageleft"), textNode("?")) +*
        div(class("textright"),
          table_(a0,
            tr(a0,
              td(a0, b(a0, textNode("Disease ID:"))) +*
              td(a0, textNode(intToString(model.diID)))) +*
            tr(a0,
              td(a0, b(a0, textNode("Name:"))) +*
              td(colspan("2") +@ width("280"), renderedName)) +*
            tr(a0,
              td(rowspan("3") +@ valign("top"), b(a0, textNode("Associated with:"))) +*
              td(width("180"), b(a0, textNode(intToString(targetCount))) +*
                textNode(" targets"))) +*
            tr(a0,
              td(width("180"), b(a0, textNode(intToString(immunoTargetCount))) +*
                textNode(" immuno-relevant targets")) +*
              td(rowspan("2") +@ valign("middle"),
                img(src("/images/immuno_ligand.png"), MvuHTML.empty))) +*
              td(width("180"), b(a0, textNode(intToString(immunoLigandCount))) +*
                textNode(" immuno-relevant ligands")))) +*
        div(class("data_tables_container"),
            synonymsBox +*
            descriptionBox +*
            dbLinksBox))
    };

    fun makeTargetTable(target) {

      fun mkTextRow((name, markup)) {
        var renderedMarkup = renderM(markup);
        if (renderedMarkup == MvuHTML.empty) {
          MvuHTML.empty
        } else {
          tr(a0,
            td(class("info immdislig"), textNode(name ^^ ": ")) +*
            td(class("info"), renderedMarkup))
        }
      }

      var referencesRow =
        tr(a0,
            td(class("info"), textNode("References: ")) +*
            td(class("info"), renderCitationList(target.targetReferences, model.diReferences)));

      var mutationsRow =
        if (target.targetMutationCount > 0) {
          var mutationOrMutations =
            if (target.targetMutationCount > 1) { "mutations" } else { "mutation" };
          tr(a0,
              td(class("info"), textNode("Mutations: ")) +*
              td(class("info"),
                renderM(target.targetName) +*
                textNode(" is associated with ") +*
                b(a0,
                  textNode(intToString(target.targetMutationCount)) +*
                  textNode(" " ^^ mutationOrMutations ^^ ". ")) +*
                a(href("/objectDisplay?objectId=" ^^ intToString(target.targetId)),
                  textNode("Click here for details") +*
                  img(attr("border", "none") +@ src("/images/go.jpg"), MvuHTML.empty))))
        } else {
          MvuHTML.empty
        };

      var interactionsRow = {
        var data = DataTable.getTableData(target.targetInteractions);
        if (listEmpty(data)) {
          MvuHTML.empty
        } else {
          fun renderRow(it) {
            var imgCols =
              MvuHTML.concat(map(boolImage,
                [("/images/approved.png", it.itLigandApproved, "Approved"),
                 ("/images/primary.png", it.itLigandPrimary, "Primary target"),
                 ("/images/immuno_ligand.png", it.itLigandImmuno, "Immunopharmacology ligand")]));

            tr(class("info"),
                td(style("border-style: solid solid solid solid; text-wrap:normal; overflow-wrap:break-word; word-break: break-all; min-width:80px;"),
                  a(href("ligandDisplay?ligandId=" ^^ intToString(it.itLigandId)), b(a0, renderSimple(it.itLigandName)))) +*
                imgCols +*
                td(class("info") +@ style("min-width:100px;"),
                  div(style("padding:3px; word-wrap: break-word; overflow: hidden;"),
                    renderMarkup(it.itLigandComments, [], []))))
          }
          tr(a0,
              td(class("info immdislig"), textNode("Ligand interactions: ")) +*
              td(class("table_container"),
                DataTable.renderTable(target.targetInteractions, renderRow)))
        }
      };

      var textRows =
        MvuHTML.concat(map(mkTextRow, [
          ("Role", target.targetRole),
          ("Comments", target.targetComments),
          ("Drug comments", target.targetDrugComments),
          ("Side effects", target.targetSideEffects),
          ("Therapeutic use", target.targetTherapeuticUse)
        ]));

      table_(class("receptor_data_tables_disease fullwidth"),
          thead(a0,
            tr(name("hotspot") +@ class("hotspot"),
              td(class("info category") +@ attr("colSpan", "2"),
                a(href("/objectDisplay?objectId=" ^^ (intToString(target.targetId))),
                  renderSimple(target.targetName))))) +*
          tbody(a0,
            textRows +*
            referencesRow +*
            mutationsRow +*
            interactionsRow
          ))
    }

    var targetsBox = {
      var targetTables = MvuHTML.concat(map(makeTargetTable, model.diTargets));
      div(class("grid_16 alpha"),
          h4(a0, textNode("Targets")) +*
          div(class("contentboxfullhelp"),
            div(class("disease_data_tables_container"),
              targetTables)))
    };

    var ligandsBox = {
      fun renderRow(ligand) {
        var imgCols =
          MvuHTML.concat(map(boolImage,
            [("/images/approved.png", ligand.ligandApproved, "Approved"),
             ("/images/immuno_ligand.png", ligand.ligandImmuno, "Immunopharmacology ligand")]));

        var toggleCol = {
          var arrowClass = if (ligand.ligandShowComments) { "arrow up" } else { "arrow down" };
          td(style("min-width:30px;width:120px;")
              +@ valign("middle")
              +@ onClick(fun () { ToggleLigandComments(ligand.ligandId) }),
            a(class("toggle"),
              div(class(arrowClass), MvuHTML.empty)))
        };

        var commentsRow = {
          fun renderComment((name, markup)) {
            var rendered = renderMarkup(markup, model.diReferences, []);
            if (rendered == MvuHTML.empty) {
              MvuHTML.empty
            } else {
              p(a0,
                b(a0, textNode(name ^^ ": ")) +* rendered)
            }
          }

          if (ligand.ligandShowComments) {
            tr(class("info"),
              td(colspan("5") +@ style("table-cell"),
              MvuHTML.concat(map(renderComment, [
                  ("Immuno Disease Comments", ligand.ligandImmunoComments),
                  ("Clinical Use", ligand.ligandClinicalComments),
                  ("Bioactivity Comments", ligand.ligandBioactivityComments)]))))
          } else { MvuHTML.empty }
        };

        var referencesCol = td(style("min-width:70px;width:70px;"),
            renderCitationList(ligand.ligandReferences, model.diReferences));

        tr(class("info tableSorter-hasChildRow") +@ role("row"),
          td(style("borderstyle: solid solid solid solid; text-wrap:normal; overflow-wrap:break-word; word-break: break-all; min-width:80px;")
              +@ valign("baseline"),
            a(href("/ligandDisplay?tab=summary&ligandId=" ^^ intToString(ligand.ligandId)), renderSimple(ligand.ligandName))) +*
          imgCols +*
          referencesCol +*
          toggleCol
        ) +*
        commentsRow
      }

      var ligandsTable =
        DataTable.renderTable(model.diLigands, renderRow);

      div(class("grid_16 alpha"),
          h4(a0, textNode("Ligands")) +*
          div(class("contentboxfullhelp"),
            div(class("disease_ligand_data_tables_container"),
              table_(class("receptor_data_tables_disease fullwidth"),
                tbody(name("toggle"),
                  tr(a0,
                    td(class("table_instructions") +@ style("text-align:left; border-style: solid none solid solid;font-weight:bold;"),
                      textNode("Key to terms and symbols")) +*
                    td(class("table_instructions") +@ style("text-align:center; border-style: solid none solid none;font-size:105%;font-weight:bold;"),
                      textNode("Click ligand name to view ligand summary")) +*
                    td(class("table_instructions") +@ style("text-align:center; border-style: solid dolid solid none; text-align:right;"),
                      textNode("Click column headers to sort"))) +*
                  tr(a0,
                    td(class("table_container") +@ colspan("3"), ligandsTable)))))))
    };

    # TODO: This should be abstracted out to a different file
    var referencesBox =
      Reference.renderReferencesBox(
        model.diShowReferences,
        model.diReferences,
        fun() { ToggleReferences });

    div(class("grid_12"),
        div(class("grid_16 alpha"),
          a(name("top"), MvuHTML.empty) +*
          diseaseInfoBox +*
          targetsBox +*
          ligandsBox +*
          referencesBox))
  }

  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Disease not found.")
  }
}

fun mainPage() {
  Mvu.runSimple("vdom_placeholder", getInitialModel(), view, updt);
  template("Disease Information")
}

open import MvuHTML;
open import MvuAttrs;
open import Mvu;
open import Tables;
open import Template;
open import Utility;

# Data model
typename Filter = [|
    Approved
  | WHO
  | SyntheticOrganic
  | Metabolite
  | NaturalProduct
  | EndogenousPeptide
  | OtherPeptide
  | Inorganic
  | Antibody
  | Labelled
  | Immuno
  | AntiMalarial
|];

var filterNames = [
    ("Approved", (Approved, "Approved", "All ligands in the database which are currently, or have been in the past, approved for human clinical use by a regulatory agency.")),
    ("WHO-essential", (WHO, "WHO", "World Health Organization (WHO) Essential Medicines")),
    ("SyntheticOrganic", (SyntheticOrganic, "Syn. organic", "Low molecular weight, non-polymeric compounds produced via either total synthesis or semi-synthetic processes.")),
    ("Metabolite", (Metabolite, "Metabolite", "Low molecular weight, non-peptidic, biogenic compounds produced by life processes (normally endogenous and of animal origin, including hormones and neurotransmitters) and their close analogues.")),
    ("NaturalProduct", (NaturalProduct, "Nat. product", "Non-peptidic, biogenic compounds derived from living organisms and their close synthetic derivatives.")),
    ("EndogenousPeptide", (EndogenousPeptide, "Endo. peptide", "Peptides encoded in the human, rat and mouse genomes.")),
    ("OtherPeptide", (OtherPeptide, "Other peptide", "Synthetic, semi-synthetic and natural peptides encoded in genomes other than human, rat and mouse (including oligopeptides and cyclic peptides).")),
    ("Inorganic", (Inorganic, "Inorganic", "Ions and other inorganic compounds.")),
    ("Antibody", (Antibody, "Antibody", "Includes therapeutic monoclonal antibodies.")),
    ("Labelled", (Labelled, "Labelled", "Ligands labelled with unstable isotopes, fluorescent tags or small chemical entities.")),
    ("Immuno", (Immuno, "Immuno", "Ligands specifically tagged as being of relevance to immunopharmacology &amp; the Guide to IMMUNOPHARMACOLOGY.")),
    ("AntiMal", (AntiMalarial, "AntiMal", "Antimalarial ligands"))
];


var approved = {
  var (filter, _, desc) = fromJust(lookup("Approved", filterNames));
  (filter, desc)
};

fun tyStringToFilterData(tyString) {
  switch (lookup(tyString, filterNames)) {
    case Just((filter, _, desc)) -> (filter, desc)
    case Nothing ->
      # Default to approved if nonexistent
      approved
  }
}

typename LigandResult =
  (lrId: Int,
   lrName: String,
   lrApproved:Bool,
   lrRadioactive: Bool,
   lrHasPDB: Bool,
   lrLabelled: Bool,
   lrImmuno: Bool,
   lrMalaria: Bool,
   lrSynonyms: [String]);

# fun isEndogenous(ligand) {
#   query nested {
#     length(
#       for (p <-- Tables.precursor)
#         for (p2p <-- Tables.precursor2peptide)
#           for (l2s <-- Tables.ligand2subunit)
#             where (p2p.ligand_id == ligand.ligand_id &&
#                 (p2p.precursor_id == p.precursor_id || p2p.ligand_id == l2s.subunit_id))
#                 [p]) > 0
#   }
# }

fun isEndogenous(ligand) {
  query nested {
    length(
      for (p2p <-- Tables.precursor2peptide)
        where (p2p.ligand_id == ligand.ligand_id)
        for (p <-- Tables.precursor)
          where (p2p.precursor_id == p.precursor_id && p.species_id >= 1 && p.species_id <= 3)
            [p]) > 0
    ||
    length(
      for (p2p <-- Tables.precursor2peptide)
        for (p <-- Tables.precursor)
          where (p2p.precursor_id == p.precursor_id && p.species_id >= 1 && p.species_id <= 3)
          for (l2s <-- Tables.ligand2subunit)
            where (l2s.subunit_id == p2p.ligand_id && l2s.ligand_id == ligand.ligand_id)
            [l2s]) > 0
  }
}
 
fun predicate(ligand, filterType) {
  switch (filterType) {
    case Approved -> ligand.approved
    case WHO -> ligand.who_essential
    case SyntheticOrganic -> ligand.type == "Synthetic organic"
    case Metabolite -> ligand.type == "Metabolite"
    case NaturalProduct -> ligand.type == "Natural product"
    case EndogenousPeptide ->
      ligand.type == "Peptide" && isEndogenous(ligand)
    case OtherPeptide ->
      ligand.type == "Peptide" && not(isEndogenous(ligand))
    case Inorganic -> ligand.type == "Inorganic"
    case Antibody -> ligand.type == "Antibody"
    case Labelled -> ligand.labelled
    case AntiMalarial -> ligand.in_gtmp
    case Immuno -> ligand.in_gtip
  }
}

sig getLigands : (Filter) ~> [(Char, [LigandResult])]
fun getLigands(filterType) {
  var res =
    query nested {
      for (l <-- Tables.ligand)
        where (predicate(l, filterType))
          [
            (id= l.ligand_id,
             name = l.name,
             approved = l.approved,
             radioactive = l.radioactive,
             labelled = l.labelled,
             immuno = l.in_gtip,
             malaria = l.in_gtmp,
             who_essential = l.who_essential,
             # Not so fond of the magic constant here, but this is
             # the incantation used by the GtoPdb source. ID = 24 is
             # the PDB database link ID.
             hasPDB =
               length(
                 for (dbl <-- ligand_database_link)
                  where (dbl.database_id == 24 && dbl.ligand_id == l.ligand_id)
                  [ dbl ]) > 0,
             abbreviation = l.abbreviation,
             synonyms =
              for (l2s <-- Tables.ligand2synonym)
                where (l2s.ligand_id == l.ligand_id && l2s.display && l2s.synonym <> l.name)
                  [l2s.synonym]
            )
          ]
    };

  # We need to be able to alphabetise ligand names. However, these
  # may contain things like &alpha; and &beta; tags, capital letters,
  # [], numbers...
  # We need to strip this junk from the beginning. We'll also need this
  # when we actually alphabetise, so store the stripped (and lowercased)
  # comparison string, too.
  var withCmp  = map(fun(lr) { (cmpName(lr.name), lr) }, res);

  var withCmp =
    sortBy(fun((cmpName, _)) { cmpName }, withCmp);

  var withCmp =
    map(fun((cmp, l)) {
      var synonyms =
        if (l.abbreviation <> "") {
          l.abbreviation :: l.synonyms
        } else {
          l.synonyms
        };
      (cmp,
        (lrId = l.id,
          lrName = l.name,
          lrApproved = l.approved,
          lrRadioactive = l.radioactive,
          lrLabelled = l.labelled,
          lrImmuno = l.immuno,
          lrMalaria = l.malaria,
          lrHasPDB = l.hasPDB,
          lrSynonyms = synonyms))
      }, withCmp);

  # Finally, alphabetise
  alphabetise(first, second, withCmp)
}

# Results: an alphabetised list
typename Model = (filterType: Filter, filterDesc: String, results: [(Char, [LigandResult])]);

fun view(model) {
  var menu = {
    fun makeMenuItem((requestName, (filterType, renderName, _))) {
      var liAttrs = if (filterType == model.filterType) {
        class("active")
      } else {
        MvuAttrs.empty
      };

      li(liAttrs,
        a(href("/ligandList?type=" ^^ requestName), unescapedTextNode(renderName))
      )
    }
    var menuItems = MvuHTML.concat(map(makeMenuItem, filterNames));
    div(id("cssmenu"),
      ul(MvuAttrs.empty, menuItems))
  };
  var aToZ = {
    fun link(char) {
      var char = implode([char]);
      a(style("font-weight:bold;font-size:110%") +@ href("#" ^^ char), unescapedTextNode(char ^^ " "))
    }
    p(style("text-align:center;"), MvuHTML.concat(map(link, alphabet)))
  };
  var topLink = a(name("top"), MvuHTML.empty);

  var dataTable = {
    # TODO: These should be in the standard library
    fun src(val) { MvuAttrs.attr("src", val) }
    fun alt(val) { MvuAttrs.attr("alt", val) }
    fun valign(val) { MvuAttrs.attr("valign", val) }
    fun colspan(val) { MvuAttrs.attr("colSpan", val) }
    fun width(val) { MvuAttrs.attr("width", val) }
    fun height(val) { MvuAttrs.attr("height", val) }

    fun makeRow(lr) {
      var name =
        td(class("info") +@
           style("border-style: solid dotted solid solid; font-size:97%; text-wrap:normal; overflow-wrap:break-word; word-break: break-all;") +@
           valign("baseline"),
           a(href("/ligandDisplay?ligandId=" ^^ intToString(lr.lrId)), unescapedTextNode(lr.lrName)));

      var images =
        MvuHTML.concat(map(boolImage,
          [("/images/approved.png", lr.lrApproved, "Approved drug"),
           ("/images/probe.png", lr.lrLabelled, "Ligand is labelled"),
           ("/images/rad.gif", lr.lrRadioactive, "Ligand is radioactive"),
           ("/images/protein_structure_icon.png", lr.lrHasPDB, "Ligand has a PDB structure"),
           ("/images/immuno_ligand.png", lr.lrImmuno, "Immunopharmacology ligand"),
           ("/images/mosquito.jpg", lr.lrMalaria, "Antimalarial ligand")]));

      var id =
        td(class("info"), textNode(intToString(lr.lrId)));

      var synonyms =
        td(class("info") +@
           style(" font-size:97%;  text-wrap:normal; overflow-wrap:break-word; word-break: break-all;") +@
           valign("baseline"),
          MvuHTML.concat(join([textNode(", ")], map(fun(x) { [unescapedTextNode(x)] }, lr.lrSynonyms))));
      tr(MvuAttrs.empty, name +* images +* id +* synonyms)
    }

    fun renderLetterRow((letter, results)) {
      var letter = implode([letter]);
      tr(MvuAttrs.empty,
           td(class("info") +@ style("border-right:none;") +@ colspan("8"),
             a(style("font-size:110%;font-weight:bold;color:red;") +@ name(letter), textNode(letter))
           ) +*
           td(class("info") +@ style("text-align:right; border-left:none;"),
             a(style("font-weight:normal;font-size:95%;") +@ href("#top"), textNode("Back to top"))
       )) +*
      MvuHTML.concat(map(makeRow, results)) +*
      tr(MvuAttrs.empty, td(colspan("9"), MvuHTML.empty))
    }

    var rows = MvuHTML.concat(map(renderLetterRow, model.results));
    table_(class("receptor_data_tables") +@ style("table-layout: fixed; width:100%; margin:0px; padding:0px;"),
      colgroup(MvuAttrs.empty,
        col(style("min-width:200px;width:300px;"), MvuHTML.empty) +*
        col(style("min-width:17px;width:17px;"), MvuHTML.empty) +*
        col(style("min-width:15px;width:15px;"), MvuHTML.empty) +*
        col(style("min-width:19px;width:19px;"), MvuHTML.empty) +*
        col(style("min-width:19px;width:19px;"), MvuHTML.empty) +*
        col(style("min-width:18px;width:18px;"), MvuHTML.empty) +*
        col(style("min-width:23px;width:23px;"), MvuHTML.empty) +*
        col(style("min-width:50px;width:50px;"), MvuHTML.empty) +*
        col(style("min-width:450px;"), MvuHTML.empty)
      ) +*
    thead(MvuAttrs.empty,
      tr(MvuAttrs.empty,
        td(class("heading") +@ colspan("7"), textNode("Ligand name")) +*
        td(class("heading"), textNode("ID")) +*
        td(class("heading"), textNode("Synonyms"))
      )
    ) +*
    tbody(MvuAttrs.empty, rows)
    )
  };


  div(class("grid_16 alpha"),
      topLink +*
      h4(MvuAttrs.empty, textNode("The IUPHAR/BPS Guide to PHARMACOLOGY complete ligand list")) +*
      div(class("contentboxfullhelp"),
        menu +*
        div(class("data_tables_container") +@ style("padding-top:20px;"),
          div(class("ligcontainer"),
            div(class("ligcentre"),
              textNode(model.filterDesc))) +*
            aToZ +*
            dataTable
    )))
}

sig getInitialModel : () ~> Model
fun getInitialModel() {
  var (filterType, desc) = switch(lookup("type", environment())) {
    case Just(tyString) -> tyStringToFilterData(tyString)
    case Nothing -> approved
  };
  var results = getLigands(filterType);
  (filterType=filterType, filterDesc=desc, results=results)
}


fun mainPage() {
  runStatic("vdom_placeholder", getInitialModel(), view);
  template("Ligand list")
}


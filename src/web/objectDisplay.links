# Ooft, the one I've been dreading.
# Detailed information about objects (i.e., ligand targets: receptors,
# ion channels, etc.)


### Done
# Gene and protein information
# Previous and unofficial names
# Database Links
# 3D structures
# Associated Proteins
# Primary regulators
# Enzyme reactions
# Substrates and Reaction Kinetics
# Products
# Cofactors
# Functional Characteristics
# Stoichiometry
# immuno comments
# immuno cell type assocs
# immuno process assocs
# immuno disease assocs
# malaria comments
# transduction mechanisms
# biologically significant variants
# general comments
# agonists
# antagonists
# tissue distribution
# functional assays
# physiological functions
# physiological consequences of altering (mutations)
# Natural / endogenous ligands

## Not done

# Quaternary structure
# Ion selectivity and conductance
# Single channel conductance
# voltage dependence
# rank order lists
## INTERACTIONS (simple clones with small tweaks):
## activators
## inhibitors
## gating inhibitors
## channel blockers
## allosteric modulators
## subunit-specific
## antibodies
## other binding ligands
# whole organism assay data
# screening data
# dna binding
# co-binding partners
# main co-regulators
# main target genes
# expression datasets
# xenobiotics
# phenotypes, alleles, disease models
# clinically-relevant mutations
# gene expression / pathophysiology



# TODO: Voltage dependence field for VGICs.
# Functional characteristics
open import Parser;
open import RenderMarkup;
open import Reference;
open import DataTable;
open import Contributor;
open import InteractionUtilities;
open import Transduction;
open import Utility;
open import MvuHTML;
open import MvuAttrs;
open import Mvu;
open import Template;
open import Ligand;
open import Species;
open import ToggleBox;
open import AnnotationStatus;
open import DbLinks;
open import Object;

typename Table = [|
  # Interaction Tables
    AgonistsTable         | AntagonistsTable | AllostericModulatorsTable
  | ActivatorsTable       | InhibitorsTable  | ChannelBlockersTable
  | GatingInhibitorsTable | SubunitSpecificTable
  | AntibodiesTable | OtherBindingLigandTable
  # Other Tables
  | SubstratesTable
  | CofactorsTable
|];

typename ColumnName = String;

typename Message = [|
    SortTable:(Table, ColumnName, SortDirection)
  | ToggleReferences | ToggleContributors | ToggleShowIEA:Int
|];

typename Family = (familyId: Int, familyName: Markup);
typename AnnotationStatus = Int; # TODO: More meaningful datatype here
typename LigandID = Int;
typename SpeciesID = Int;
typename PDBID = String;

typename GeneProteinInfo = (
    gpiSpeciesID: Int,
    gpiSymbol: String,
    gpiShortName: String,
    gpiName: Markup,
    gpiTransmembraneDomains: Int,
    gpiAminoAcids: Int,
    gpiReferences: [ReferenceID],
    gpiChromosomalLocation: String
);

typename PDBData = (
    pdbCode: PDBID,
    pdbLigandId: Int,
    pdbLigandName: Markup,
    pdbLigandDescription: Markup,
    pdbSpeciesId: SpeciesID,
    pdbReferences: [ReferenceID],
    pdbResolution: Float
);

typename EndogenousLigandSummary =
  (elsName: Markup, elsSpeciesID: SpeciesID, elsLigandID: LigandID);

typename Phenotype = (
    phenoAllele: Markup,
    phenoComposition: Markup,
    phenoAccessions: Markup,
    phenoSpeciesID: SpeciesID,
    phenoPubmedID: String,
    phenoPhenotype: Markup
);

typename CellTypeAssociation = (
  ctaImmunoCelltype: (immunoCTID: Int, immunoCTName: String),
  ctaComments: Markup,
  ctaCellOntologyType: (cellOntologyName: String, cellOntologyID: String),
  ctaReferences: [ReferenceID]
);


typename ImmunoProcessAssociation = (
  ipImmunoProcess: (immunoProcessID: Int, immunoProcessName: String),
  ipShowIEA: Bool,
  ipGoProcesses: [
    (goProcessID: String,
     goProcessComment: String,
     goProcessEvidence: String)
  ],
  ipReferences: [ReferenceID]
);

typename LigandSize = [| Small | Peptide | OtherSize |];


typename InteractionInfo = (
  interaction: Interaction,
  parsedName: Markup,
  ligandSize: LigandSize,
  speciesShort: String
);

typename SortedInteractions = (
  agonists: SortableTable(InteractionInfo, Message),
  antagonists: SortableTable(InteractionInfo, Message),
  allostericModulators: SortableTable(InteractionInfo, Message),
  activators: SortableTable(InteractionInfo, Message),
  inhibitors: SortableTable(InteractionInfo, Message),
  channelBlockers: SortableTable(InteractionInfo, Message),
  gatingInhibitors: SortableTable(InteractionInfo, Message),
  antibodies: SortableTable(InteractionInfo, Message),
  other: SortableTable(InteractionInfo, Message),
  subunitSpecific: SortableTable(InteractionInfo, Message));

typename AssociatedProtein = (
  name: Markup,
  objectID : Maybe(Int),
  references : [ReferenceID],
  effect: Markup
);

typename SortedAssociatedProteins = (
  hpfSubunits: [AssociatedProtein],
  auxiliarySubunits: [AssociatedProtein],
  otherProteins: [AssociatedProtein],
  gProteins: [AssociatedProtein],
  interactingProteins: [AssociatedProtein]
);

typename SpecificReaction = (
  description: Markup,
  reaction: Markup,
  references: [ReferenceID]
);

typename EnzymeReaction = (
  ecNumber: String,
  reaction: Markup,
  specificReactions: [SpecificReaction]
);

typename Product = (
  name: Markup,
  ligandID: Int,
  endogenous: Bool,
  speciesName: String,
  references: [ReferenceID]
);

typename Cofactor = (
  name: Markup,
  ligandID: Int,
  speciesName: String,
  comments: Markup,
  references: [ReferenceID]
);

typename Variant = (
    vId: Int,
    vType: String,
    vSpecies: SpeciesID,
    vDescription: Markup,
    vReferences: [ReferenceID]
);

typename ReceptorComments = (
  listComments: Markup,
  associatedProteinsComments: Markup,
  functionalAssayComments: Markup,
  tissueDistributionComments: Markup,
  functionsComments: Markup,
  alteredExpressionComments: Markup,
  expressionPathophysiologyComments: Markup,
  mutationsPathophysiologyComments: Markup,
  variantsComments: Markup,
  xenobioticExpressionComments: Markup,
  antibodyComments: Markup,
  agonistsComments: Markup,
  antagonistsComments: Markup,
  allostericModulatorsComments: Markup,
  activatorsComments: Markup,
  inhibitorsComments: Markup,
  channelBlockersComments: Markup,
  gatingInhibitorsComments: Markup,
  generalComments: Markup,
  immunoComments: Markup,
  malariaComments: Markup,
  stoichiometryComments: Markup,
  functionalCharacteristicsComments: Markup
);

typename DataTableEntry = (
  entryComment: Markup,
  entryData: [(String, Markup)],
  entryReferences: [ReferenceID]
);

typename DataTableBox = (
    boxName: String,
    boxRows: [DataTableEntry]
);

typename Substrate = (
    name: Markup,
    ligandID: Int,
    endogenous: Bool,
    species: String,
    property: Markup,
    value: Float,
    units: Markup,
    standardProperty: Markup,
    standardValue: Float,
    assayDescription: Markup,
    assayConditions: Markup,
    comments: Markup,
    references: [ReferenceID]
);

typename URL = String;

# TODO: Best to do this all gradually, and uncomment things as they're implemented
typename ObjectInfo = (
    objectId: Int,
    objectType: ObjectType,
    objectName: Markup,
    objectSystematicName: Maybe(Markup),
    objectAbbreviation: Maybe(Markup),
    objectSynonyms: [Markup],
    objectFamily: Family,
    objectAnnotationStatus: AnnotationStatus,
    objectGeneProteinInfo:
      (giComments: Markup, giEntries: [GeneProteinInfo]),
    objectAssociatedProteins: SortedAssociatedProteins,
    objectEnzymeReactions: [EnzymeReaction],
    # TODO: Suss this out and add it in
    # objectQuaternaryStructure: (),
    objectDatabaseLinks: [DatabaseLink],
    objectPDBData: [PDBData],
    objectEndogenousLigands: [EndogenousLigandSummary],
    # TODO: Potency order(!?)
  # objectPotencyOrder: (),
    objectSortedInteractions: SortedInteractions,
    objectTransductionMechanisms: [TransductionMechanism],
    objectTissueDistribution: DataTableBox,
    objectCellTypeAssociations: [CellTypeAssociation],
    objectImmunoProcessAssociations: [ImmunoProcessAssociation],
    # TODO: Expression dataset(!?)
   # objectExpressionDataset: (),
    objectFunctionalAssays: DataTableBox,
    objectPhysiologicalFunctions: DataTableBox,
    objectPhysiologicalConsequences: DataTableBox,
   # objectPhenotypes: SortableTable(Phenotype, Message),
    objectVariants: [Variant],
    objectComments: ReceptorComments,
    objectShowReferences: Bool,
    objectReferences: [(ReferenceID, (ReferenceNumber, Reference.Reference))],
    objectLigandNames: [(LigandId, LigandName)],
    objectSpeciesMap: SpeciesMap,
    objectSubstrates: SortableTable(Substrate, Message),
    objectProducts: [Product],
    objectCofactors: SortableTable(Cofactor, Message),
    objectContributors: ContentBox([Contributor.Contributor])
);

typename Model = Maybe(ObjectInfo);

sig getInitialModel : () ~%~> Model
fun getInitialModel() {

  sig getObjectInfo : (Int) ~%~> Maybe(ObjectInfo)
  fun getObjectInfo(objectId) {
    var defaultRB =
      (object_id=objectId,
       list_comments="",
       associated_proteins_comments="",
       functional_assay_comments="",
       tissue_distribution_comments="",
       functions_comments="",
       altered_expression_comments="",
       expression_pathophysiology_comments="",
       mutations_pathophysiology_comments="",
       variants_comments="",
       xenobiotic_expression_comments="",
       antibody_comments="",
       agonists_comments="",
       antagonists_comments="",
       allosteric_modulators_comments="",
       activators_comments="",
       inhibitors_comments="",
       channel_blockers_comments="",
       gating_inhibitors_comments="");

    # Each object should have at most one `receptor_basic` entry.
    # If there aren't any, we need to (manually) create a dummy one.
    fun rbOrDefault(rbs) {
      switch(rbs) {
        case [] -> defaultRB
        case x :: _ -> x
      }
    }

    var raw = query {
      for (o <-- Tables.object)
        where (o.object_id == objectId)
        for (rb <-- Tables.receptor_basic)
          where (rb.object_id == objectId)
            [(id = objectId,
             name = o.name,
             abbreviation = o.abbreviation,
             systematicName = o.systematic_name,
             comments = o.comments,
             grac_comments = o.grac_comments,
             immuno_comments = o.gtip_comment,
             malaria_comments = o.gtmp_comment,
             associatedProteins =
               for (ap <-- Tables.associated_protein)
                 where (ap.object_id == objectId)
                 [(protein = ap,
                   assocObjects =
                     for (ao <-- Tables.object)
                       where (ao.object_id == ap.associated_object_id)
                       [ao],
                   refs =
                     for (r <-- Tables.associated_protein_refs)
                       where (r.associated_protein_id == ap.associated_protein_id)
                       [r.reference_id])],
             synonyms =
               for (s <-- Tables.synonym)
                 where (s.object_id == objectId && s.display)
                 [(synonym=s.synonym, order=s.display_order)],
             family =
               for (r2f <-- Tables.receptor2family)
                 where (r2f.object_id == o.object_id)
                   for (f <-- Tables.family)
                     where (f.family_id == r2f.family_id)
                     [(id=f.family_id, name=f.name)],
             enzymeReactions =
               for (o2r <-- Tables.object2reaction)
                 where (o2r.object_id == objectId)
                 for (r <-- Tables.reaction)
                   where (r.reaction_id == o2r.reaction_id)
                   [(reaction = r,
                     specificReactions =
                       for (sr <-- Tables.specific_reaction)
                         where (sr.reaction_id == r.reaction_id && sr.object_id == objectId)
                         [(sr = sr,
                           refs =
                             for (srr <-- Tables.specific_reaction_refs)
                               where (srr.specific_reaction_id == sr.specific_reaction_id)
                               [srr.reference_id])])],
             annotationStatus = o.annotation_status,
             generalComments = o.comments,
             gpcrComments =
               for (gpcr <-- Tables.gpcr)
                where (gpcr.object_id == objectId)
                  [gpcr.class],
             geneInformation =
               for (si <-- Tables.structural_info)
                 where (si.object_id == objectId)
                 [(si=si,
                   refs =
                     for (siRef <-- Tables.structural_info_refs)
                       where (siRef.structural_info_id == si.structural_info_id)
                       [siRef.reference_id])],
             databaseLinks =
               for (dbl <-- Tables.database_link)
                 where (dbl.object_id == objectId)
                   [dbl],
             pdbData =
               for (pdb <-- Tables.pdb_structure)
                 where (pdb.object_id == objectId)
                 for (l <-- Tables.ligand)
                   where (l.ligand_id == pdb.ligand_id)
                   [(pdb = pdb,
                     ligand = l,
                     refs =
                       for (pdbR <-- Tables.pdb_structure_refs)
                         where (pdbR.pdb_structure_id == pdb.pdb_structure_id)
                         [pdbR.reference_id])],
             potencyOrder = (), # FIXME: FILL ME IN
             receptorBasic = rb,
             cellTypeAssociations =
               for (cta <-- Tables.celltype_assoc)
               where (cta.object_id == objectId)
                 for (ctac <-- Tables.celltype_assoc_colist)
                 where (ctac.celltype_assoc_id == cta.celltype_assoc_id)
                   for (ct <-- Tables.co_celltype)
                   where (ct.cellonto_id == ctac.cellonto_id)
                     for (immuno <-- Tables.immuno_celltype)
                     where (immuno.immuno_celltype_id == cta.immuno_celltype_id)
                     [( ctaComment = cta.comment,
                        cellType = ct,
                        immuno = immuno,
                        refs =
                          for (car <-- Tables.celltype_assoc_refs)
                          where (car.celltype_assoc_id == cta.celltype_assoc_id)
                          [car.reference_id]
                      )],
             immunoProcessAssociations =
               for (pa <-- Tables.process_assoc)
               where (pa.object_id == objectId)
                 for (gtip <-- Tables.gtip_process)
                 where (gtip.gtip_process_id == pa.gtip_process_id)
                   # Relevant immuno processes
                   [( gtipProc = gtip,
                      goProcs =
                        # FIXME: This doesn't quite work; we also need to do something with
                        # go_process_rel.
                        # GO immuno processes associated with relevant GTIP processes,
                        # where the GO processes are associated with the given object.
                        # (Just because a GO process is associated with a GTIP process,
                        # does not mean that it's relevant for a given object).
                        for (g2go <-- Tables.gtip2go_process)
                        where (g2go.gtip_process_id == gtip.gtip_process_id)
                          for (o2go <-- Tables.object2go_process)
                          where (o2go.object_id == objectId && o2go.go_process_id == g2go.go_process_id)
                            for (go <-- Tables.go_process)
                            where (go.go_process_id == o2go.go_process_id)
                            [(o2go = o2go, go = go)],
                      refs =
                        for (r <-- Tables.process_assoc_refs)
                        where (r.process_assoc_id == pa.process_assoc_id)
                        [r.reference_id])],
             interactions = InteractionUtilities.interactionsForObject(objectId),
             tissueDistribution =
               for (td <-- Tables.tissue_distribution)
                 where (td.object_id == objectId)
                   [(td = td,
                     refs =
                       for (r <-- Tables.tissue_distribution_refs)
                         where (r.tissue_distribution_id == td.tissue_distribution_id)
                         [r.reference_id])],
             expressionDataset = (), # FIXME: FILL ME IN
             functionalAssays =
               for (fa <-- Tables.functional_assay)
                 where (fa.object_id == objectId)
                   [(fa=fa, refs=
                       for (faRef <-- Tables.functional_assay_refs)
                         where (faRef.functional_assay_id == fa.functional_assay_id)
                         [faRef.reference_id])],
             physiologicalFunctions =
               for (pf <-- Tables.physiological_function)
                 where (pf.object_id == objectId)
                   [(pf = pf,
                     refs =
                       for (pfRef <-- Tables.physiological_function_refs)
                         where (pfRef.physiological_function_id == pf.physiological_function_id)
                         [pfRef.reference_id])],
             alteredExpressions =
               for (ae <-- Tables.altered_expression)
                 where (ae.object_id == objectId)
                   [(ae = ae,
                     refs =
                       for (aeRef <-- Tables.altered_expression_refs)
                         where (aeRef.altered_expression_id == ae.altered_expression_id)
                         [aeRef.reference_id])],
             alleles = (), # Getting this is a faff, requiring structural info, etc. Leaving for now.
             variants =
               for (v <-- Tables.variant)
                 where (v.object_id == objectId)
                   [(v=v,
                     refs =
                       for (vRef <-- Tables.variant_refs)
                         where (vRef.variant_id == v.variant_id)
                         [vRef.reference_id])],
             substrates =
               for (s <-- Tables.substrate)
                 where (s.object_id == objectId)
                   [(substrate = s,
                     ligand =
                       for (l <-- Tables.ligand)
                       where (l.ligand_id == s.ligand_id)
                       [l],
                     refs =
                       for (sr <-- Tables.substrate_refs)
                         where (sr.substrate_id == s.substrate_id)
                         [sr.reference_id])],
             contributors =
               for (c2o <-- Tables.contributor2object)
                 where (c2o.object_id == objectId)
                   for (c <-- Tables.contributor_copy)
                     where (c.contributor_id == c2o.contributor_id)
                     [(c = c, order=c2o.display_order)],
              stoichiometry =
                for (t <-- Tables.transporter)
                  where (t.object_id == objectId)
                  [t.grac_stoichiometry],
              functionalCharacteristics =
                for (gfc <-- Tables.grac_functional_characteristics)
                  where (gfc.object_id == objectId)
                  [gfc.functional_characteristics],
              cofactors =
                for (c <-- Tables.cofactor)
                  where (c.object_id == objectId)
                  [(cofactor = c,
                    ligand =
                      for (l <-- Tables.ligand)
                      where (l.ligand_id == c.ligand_id)
                      [l],
                    refs =
                      for (cr <-- Tables.cofactor_refs)
                      where (cr.cofactor_id == c.cofactor_id)
                      [cr.reference_id]
                    )],
              products =
                for (p <-- Tables.product)
                  where (p.object_id == objectId)
                  [(product = p,
                    ligand =
                      for (l <-- Tables.ligand)
                      where (l.ligand_id == p.ligand_id)
                      [l],
                    refs =
                      for (pr <-- Tables.product_refs)
                      where (pr.product_id == p.product_id)
                      [pr.reference_id])]
             )]
    };

    fun mkModel(raw) {
      var speciesMap = Species.getSpeciesMap();
      fun speciesShortName(speciesID) { resolveSpeciesShortName(speciesID, speciesMap) }
      fun speciesLongName(speciesID) { resolveSpeciesLongName(speciesID, speciesMap) }
      # OK, first parse interactions. Given the interactions field from the raw
      # data, this should get us a record of:
      # (agonists: [Interaction],
      #  antagonists: [Interaction],
      #  allostericModulators: [Interaction],
      #  activators: [Interaction],
      #  inhibitors: [Interaction],
      #  channelBlockers: [Interaction],
      #  gatingInhibitors: [Interaction],
      #  subunitSpecific: [Interaction],
      #  endogenous: [EndogenousLigandSummary],
      #  references: [ReferenceID])
      fun transformInteractions(rawInteractions) {
        var emptyResult =
          (agonists = [], antagonists = [], allostericModulators = [],
           activators = [], inhibitors = [], channelBlockers = [],
           gatingInhibitors = [], subunitSpecific = [], endogenous = [],
           antibodies = [], other = [],
           references = []);

        fold_left(fun(acc, i) {
          # var i = x.interaction;
          # var l = x.ligand;
          # var refs = x.refs;
          var size = {
            var ty = i.interactionLigand.type;
            if (ty == "Peptide" || ty == "Antibody") {
              Peptide
            } else if (ty == "Metabolite"
                || ty == "Synthetic organic" || ty == "Natural product") {
              Small
            } else {
              OtherSize
            }
          };

          var parsedName = parseOrError(getTargetName(i.interactionTarget));

          var parsed : InteractionInfo = (
            interaction = i,
            parsedName = parsedName,
            ligandSize = size,
            speciesShort = speciesShortName(i.speciesID)
          );

          # TODO: Maybe make this less stringly-typed?
          var acc =
            if (i.interactionType == "Agonist") {
              (acc with agonists = ( parsed :: acc.agonists ))
            } else if (i.interactionType == "Antagonist") {
              (acc with antagonists = ( parsed :: acc.antagonists ))
            } else if (i.interactionType == "Allosteric modulator") {
              (acc with allostericModulators = ( parsed :: acc.allostericModulators ))
            } else if (i.interactionType == "Activator") {
              (acc with activators = ( parsed :: acc.activators ))
            } else if (i.interactionType == "Inhibitor") {
              (acc with inhibitors = ( parsed :: acc.inhibitors ))
            } else if (i.interactionType == "Channel blocker") {
              (acc with channelBlockers = ( parsed :: acc.channelBlockers ))
            } else if (i.interactionType == "Gating inhibitor") {
              (acc with gatingInhibitors = ( parsed :: acc.gatingInhibitors ))
            } else if (i.interactionType == "Subunit-specific") {
              (acc with subunitSpecific = ( parsed :: acc.subunitSpecific ))
            } else if (i.interactionType == "Antibody") {
              (acc with antibodies = ( parsed :: acc.antibodies ))
            } else {
              (acc with other = ( parsed :: acc.other ))
            };

          var acc =
            if (i.endogenous) {
              var els =
                (elsName = parsedName,
                 elsSpeciesID = i.speciesID,
                 elsLigandID = i.ligandID);
              (acc with endogenous = els :: acc.endogenous)
            } else { acc };

          (acc with references = (i.references ++ acc.references))
        }, emptyResult, rawInteractions)
      }

      fun mkTables(parsedInteractions) {
        # Columns are slightly different based on the type of interaction.
        # Agonists / antagonists / channel blockers / allosteric modulators:
        #  ligand, data cols, species, action, affinity, parameter, references
        # Activators / Inhibitors / Gating inhibitors:
        #  ligand, data cols, species, action, affinity, parameter, holding voltage, reference

        fun mkStandardTable(tableTy, interactions) {
          var cols = [
            ("Ligand", ("", Sortable(fun(x, y) {
                simpleCmp(getTargetName(x.interaction.interactionTarget),
                    getTargetName(y.interaction.interactionTarget)) }))),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("Sp.", ("keybox_header",
              Sortable(fun(x, y) { simpleCmp(x.speciesShort, y.speciesShort) }))),
            ("Action", ("action_header",
              Sortable(fun(x, y) { simpleCmp(x.interaction.interactionAction,
                  y.interaction.interactionAction) }))),
            ("Affinity", ("affinity_header", Sortable(fun(x, y) {
                InteractionUtilities.sortAffinity(x.interaction.affinity,
                    y.interaction.affinity)}))),
            ("Affinity Units", ("units_header", Sortable(fun(x, y) {
                simpleCmp(x.interaction.affinity.affinityUnits,
                          y.interaction.affinity.affinityUnits) }))),
            ("References", ("reference_header", Sortable(fun(x, y) { 0 })))
          ];
          fun sortMessage(colName, sortDir) { SortTable(tableTy, colName, sortDir) }
          DataTable.makeTable(cols, interactions, sortMessage)
        }

        fun mkActivatorTable(tableTy, interactions) {
          var cols = [
            ("Ligand", ("", Sortable(fun(x, y) {
                simpleCmp(getTargetName(x.interaction.interactionTarget),
                    getTargetName(y.interaction.interactionTarget)) }))),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("", ("", NotSortable)), ("", ("", NotSortable)), ("", ("", NotSortable)),
            ("Species", ("keybox_header",
              Sortable(fun(x, y) { simpleCmp(x.speciesShort, y.speciesShort) }))),
            ("Action", ("keybox_header",
              Sortable(fun(x, y) { simpleCmp(x.speciesShort, y.speciesShort) }))),
            ("Value", ("affinity_header", Sortable(fun(x, y) {
                InteractionUtilities.sortAffinity(x.interaction.affinity,
                    y.interaction.affinity)}))),
            ("Parameter", ("units_header", Sortable(fun(x, y) {
                simpleCmp(x.interaction.affinity.affinityUnits,
                          y.interaction.affinity.affinityUnits) }))),
            ("Concentration range (M)", ("affinity_header",
              Sortable(fun(x, y) {
                simpleCmp(x.interaction.concentrationRange, y.interaction.concentrationRange)
              }))),
            ("Holding voltage (mV)", ("affinity_header", Sortable(fun(x, y) {
                 InteractionUtilities.sortAffinityVoltage(x.interaction.affinityVoltage,
                     y.interaction.affinityVoltage)
              }))),
            ("References", ("reference_header", Sortable(fun(x, y) { 0 } )))
          ];

          fun sortMessage(colName, sortDir) { SortTable(tableTy, colName, sortDir) }
          DataTable.makeTable(cols, interactions, sortMessage)
        }

        var res : SortedInteractions =
          (agonists = mkStandardTable(AgonistsTable, parsedInteractions.agonists),
         antagonists = mkStandardTable(AntagonistsTable, parsedInteractions.antagonists),
         allostericModulators =
           mkStandardTable(AllostericModulatorsTable,
             parsedInteractions.allostericModulators),
         activators =
           mkActivatorTable(ActivatorsTable, parsedInteractions.activators),
         inhibitors =
           mkActivatorTable(InhibitorsTable, parsedInteractions.inhibitors),
         channelBlockers =
           mkActivatorTable(ChannelBlockersTable, parsedInteractions.channelBlockers),
         gatingInhibitors =
           mkActivatorTable(GatingInhibitorsTable, parsedInteractions.gatingInhibitors),
         subunitSpecific =
           mkStandardTable(SubunitSpecificTable, parsedInteractions.subunitSpecific),
         antibodies =
           mkActivatorTable(AntibodiesTable, parsedInteractions.antibodies),
         other =
           mkActivatorTable(GatingInhibitorsTable, parsedInteractions.other)
           );
        res
      }

      fun transformAssociatedProteins(rawAPs) {
        fun transformAP(ap) {
          switch(ap.assocObjects) {
            case [] ->
              (name = parseOrError(ap.protein.name),
               objectID = Nothing,
               references = ap.refs,
               effect = parseOrError(ap.protein.effect))
            case obj :: _ ->
              (name = parseOrError(obj.name),
               objectID = Just(obj.object_id),
               references = ap.refs,
               effect = parseOrError(ap.protein.effect))
          }
        }

        var emptySorted =
          (hpfSubunits = [], auxiliarySubunits = [], otherProteins = [],
           gProteins = [], interactingProteins = []);

        fold_left(fun ((aps, refs), x) {
          var transformed = transformAP(x);
          var newSorted =
            if (x.protein.type == "Heteromeric Pore-forming Subunit") {
              (aps with hpfSubunits = transformed :: aps.hpfSubunits)
            } else if (x.protein.type == "Auxiliary Subunit") {
              (aps with auxiliarySubunits = transformed :: aps.auxiliarySubunits)
            } else if (x.protein.type == "G Protein") {
              (aps with gProteins = transformed :: aps.gProteins)
            } else if (x.protein.type == "Interacting Protein") {
              (aps with interactingProteins = transformed :: aps.interactingProteins)
            } else {
              (aps with otherProteins = transformed :: aps.otherProteins)
            };
          (newSorted, x.refs ++ refs)
        }, (emptySorted, []), rawAPs)
      }

      fun transformEnzymeReactions(rawERs) {
          fun transformSpecificReactions(srs) {
            fun transformSpecificReaction(sr) {
              var parsedDesc = parseOrError(sr.sr.description);
              var parsedReaction = parseOrError(sr.sr.reaction);
              var (refs, ligands) = collectAllIds([parsedDesc, parsedReaction]);
              ((description = parsedDesc, reaction = parsedReaction,
                references = sr.refs), refs ++ sr.refs, ligands)
            }

            fold_left(fun((srs, srRefs, srLigands), sr) {
                var (sr, refs, ligands) = transformSpecificReaction(sr);
                (sr :: srs, refs ++ srRefs, ligands ++ srLigands)
              }, ([], [], []), srs)
          }

          fold_left(fun ((reactions, refs, ligands), x) {
              var parsedReaction = parseOrError(x.reaction.reaction);
              var (rRefs, rLigands) = collectIds(parsedReaction);
              var (srs, srRefs, srLigands) = transformSpecificReactions(x.specificReactions);
              var er = (ecNumber = x.reaction.ec_number, reaction = parsedReaction, specificReactions = srs);
            (er :: reactions, rRefs ++ srRefs ++ refs, rLigands ++ srLigands ++ ligands)
          }, ([], [], []), rawERs)
      }

      fun transformPDBs(rawPDBs) {
        fun transformPDB(rawPDB) {
          var pdb = rawPDB.pdb;
          var ligand = rawPDB.ligand;
          var refs = rawPDB.refs;
          var res =
            (pdbCode = pdb.pdb_code,
             pdbLigandId = ligand.ligand_id,
             pdbLigandName = parseOrError(ligand.name),
             pdbLigandDescription = parseOrError(pdb.description),
             pdbSpeciesId = pdb.species_id,
             pdbReferences = [],
             pdbResolution = pdb.resolution);
          var (descriptionRefs, descriptionLigands) =
            RenderMarkup.collectIds(res.pdbLigandDescription);
          var allRefs = refs ++ descriptionRefs;
          ((res with pdbReferences = allRefs), allRefs, descriptionLigands)
        }

        var (pdbsRev, pdbRefs, pdbLigands) =
          fold_left(fun((pdbs, pdbRefs, pdbLigands), pdb) {
              var (pdb, refs, ligands) = transformPDB(pdb);
              (pdb :: pdbs, refs ++ pdbRefs, ligands ++ pdbLigands)
          }, ([], [], []), rawPDBs);
        (reverse(pdbsRev), pdbRefs, pdbLigands)
      }

      fun transformVariants(rawVs) {
        var (variantsRev, vRefs, vLigands) =
          fold_left(fun((variants, vRefs, vLigands), rawV) {
            var v = rawV.v;
            var desc = parseOrError(v.description);
            var (refIDs, ligandIDs) = collectIds(desc);
            var res =
              (vId = v.variant_id,
               vType = v.type,
               vSpecies = v.species_id,
               vDescription = desc,
               vReferences = rawV.refs
              );
            (res :: variants, refIDs ++ res.vReferences, ligandIDs)
          }, ([], [], []), rawVs);
        (reverse(variantsRev), vRefs, vLigands)
      }


      fun transformReceptorComments() {
        var rb = raw.receptorBasic;

        #transformReceptorComments(raw.receptorBasic, raw.comments,
        #    raw.immuno_comments, raw.malaria_comments, raw);
        fun fromList(xs) {
          switch(xs) {
            case [] -> MarkupEmpty
            case x :: _ -> parseOrError(x)
          }
        }

        var stoic = fromList(raw.stoichiometry);
        var fcs = fromList(raw.functionalCharacteristics);

        var res = (
          listComments = parseOrError(rb.list_comments),
          associatedProteinsComments = parseOrError(rb.associated_proteins_comments),
          functionalAssayComments = parseOrError(rb.functional_assay_comments),
          tissueDistributionComments = parseOrError(rb.tissue_distribution_comments),
          functionsComments = parseOrError(rb.functions_comments),
          alteredExpressionComments = parseOrError(rb.altered_expression_comments),
          expressionPathophysiologyComments = parseOrError(rb.expression_pathophysiology_comments),
          mutationsPathophysiologyComments = parseOrError(rb.mutations_pathophysiology_comments),
          variantsComments = parseOrError(rb.variants_comments),
          xenobioticExpressionComments = parseOrError(rb.xenobiotic_expression_comments), antibodyComments = parseOrError(rb.antibody_comments),
          agonistsComments = parseOrError(rb.agonists_comments),
          antagonistsComments = parseOrError(rb.antagonists_comments),
          allostericModulatorsComments = parseOrError(rb.allosteric_modulators_comments),
          activatorsComments = parseOrError(rb.activators_comments),
          inhibitorsComments = parseOrError(rb.inhibitors_comments),
          channelBlockersComments = parseOrError(rb.channel_blockers_comments),
          gatingInhibitorsComments = parseOrError(rb.gating_inhibitors_comments),
          generalComments = parseOrError(raw.comments),
          immunoComments = parseOrError(raw.immuno_comments),
          malariaComments = parseOrError(raw.malaria_comments),
          stoichiometryComments = stoic,
          functionalCharacteristicsComments = fcs
          );


        var (commentRefs, commentLigands) = collectAllIds(
          [res.listComments, res.associatedProteinsComments,
            res.functionalAssayComments, res.tissueDistributionComments,
            res.functionsComments, res.alteredExpressionComments,
            res.expressionPathophysiologyComments,
            res.mutationsPathophysiologyComments, res.variantsComments,
            res.xenobioticExpressionComments, res.antibodyComments,
            res.agonistsComments, res.antagonistsComments,
            res.allostericModulatorsComments, res.activatorsComments,
            res.inhibitorsComments, res.channelBlockersComments,
            res.gatingInhibitorsComments, res.generalComments,
            res.immunoComments, res.malariaComments, res.stoichiometryComments,
            res.functionalCharacteristicsComments
          ]);
        (res, commentRefs, commentLigands)
      }

      fun transformSynonyms(synonyms) {
        map(fun(s) {parseOrError(s.synonym) },
            sortBy(fun(s) { s.order }, synonyms))
      }

      fun transformFamily(fs) {
        switch(fs) {
          case [] -> (familyId = (-1), familyName = MarkupEmpty)
          case f :: _ -> (familyId = f.id, familyName = parseOrError(f.name))
        }
      }

      fun transformGeneProteinInfo(gpcrComments, gis) {
        var (gisRev, giRefs) =
          fold_left(fun((gis_rev, refs), gi) {
            var references = gi.refs;
            var gi = gi.si;
            var res = (
              gpiSpeciesID = gi.species_id,
              gpiName = parseOrError(gi.gene_long_name),
              gpiSymbol = gi.official_gene_id,
              gpiShortName = gi.gene_name,
              gpiTransmembraneDomains = gi.transmembrane_domains,
              gpiAminoAcids = gi.amino_acids,
              gpiReferences = references,
              gpiChromosomalLocation = gi.genomic_location
            );
            (res :: gis_rev, references ++ refs)
          }, ([], []), gis);

        var (comment, commentRefs, commentLigands) =
          fold_right(fun(gc, (comment, commentRefs, commentLigands)) {
            var parsedComment = parseOrError(gc);
            var (refIDs, ligandIDs) = RenderMarkup.collectIds(parsedComment);
            (MarkupAppend(parsedComment, comment),
             refIDs ++ commentRefs,
             ligandIDs ++ commentLigands)
          }, (MarkupEmpty, [], []), gpcrComments);

        ((giComments = comment, giEntries = reverse(gisRev)),
           giRefs ++ commentRefs, commentLigands)
      }

      sig mkDataTableBox : (String, [DataTableEntry]) ~%~> DataTableBox
      fun mkDataTableBox(name, rows) {
        (boxName = name, boxRows = rows)
      }

      sig mkDataTableEntry : (Markup, [(String, Markup)], [ReferenceID]) ~%~> DataTableEntry
      fun mkDataTableEntry(comment, data, references) {
        (entryComment = comment, entryData = data, entryReferences = references)
      }

      sig transformDataTableBox : (String, (a) ~%~> DataTableEntry, [a]) ~>
        (DataTableBox, [ReferenceID], [LigandID])
      fun transformDataTableBox(boxName, getRow, data) {
        var (rows_rev, refs, ligands) =
          fold_left(fun((rows_rev, refs, ligands), x) {
            var row = getRow(x);
            var (rowRefs, rowLigands) =
              RenderMarkup.collectAllIds(map(second, row.entryData));
            (row :: rows_rev, rowRefs ++ row.entryReferences ++ refs,
               rowLigands ++ ligands)
          }, ([], [], []), data);
        var box = (boxName = boxName, boxRows = reverse(rows_rev));
        (box, refs, ligands)
      }

      fun transformFunctionalAssays(fas) {
        transformDataTableBox("Functional Assays",
          fun(fa) {
            var references = fa.refs;
            var fa = fa.fa;
            mkDataTableEntry(parseOrError(fa.description),
              [("Species", parseOrError(resolveSpeciesLongName(fa.species_id, speciesMap))),
               ("Tissue", parseOrError(fa.tissue)),
               ("Response measured", parseOrError(fa.response_measured))], references)
          }, fas)
      }

      fun transformPhysiologicalFunctions(pfs) {
        transformDataTableBox("Physiological Functions",
          fun(pf) {
            var references = pf.refs;
            var pf = pf.pf;
            mkDataTableEntry(parseOrError(pf.description),
              [("Species", parseOrError(resolveSpeciesLongName(pf.species_id, speciesMap))),
               ("Tissue", parseOrError(pf.tissue))], references)
          }, pfs)
      }

      fun transformPhysiologicalConsequences(aes) {
        transformDataTableBox("Physiological Consequences of Altering Gene Expression",
          fun(ae) {
            var references = ae.refs;
            var ae = ae.ae;
            mkDataTableEntry(parseOrError(ae.description),
              [("Species", parseOrError(resolveSpeciesLongName(ae.species_id, speciesMap))),
               ("Tissue", parseOrError(ae.tissue)),
               ("Technique", parseOrError(ae.technique))], references)
          }, aes)
      }

      fun transformTissueDistribution(tds) {
        transformDataTableBox("Tissue Distribution",
          fun(td) {
            var references = td.refs;
            var td = td.td;
            mkDataTableEntry(parseOrError(td.tissues),
              [("Species", parseOrError(resolveSpeciesLongName(td.species_id, speciesMap))),
               ("Technique", parseOrError(td.technique))], references)
          }, tds)
      }

      fun transformDBLinks(dbls) {
        var baseLinks = transformDatabaseLinks(dbls);
        var extraLinks =
          listConcatMap(fun(dbl) {
            if (dbl.dbID == 15) {
              listConcatMap(fun((species, code, url)) {
                  if (speciesShortName(species) == "Hs") {
                    var dbURL = "http://www.proteinatlas.org/$PLACEHOLDER";
                    var url = replacePlaceholder(dbURL, code);
                    [(dbID = (-1), # hack
                      dbName = "Human Protein Atlas",
                      dbURL = dbURL,
                      dbSpecialist = false,
                      dbPrefix = "",
                      dbEntries = [(species, code, url)])]
                  } else {
                    []
                  }
              }, dbl.dbEntries)
            } else if (dbl.dbID == 3) {
              var dbURL = "https://www.genome.jp/dbget-bin/www_bget?$PLACEHOLDER";
              var entries = map(fun((species, code, url)) {
                var speciesShort = speciesShortName(species);
                var codePrefix =
                  if (speciesShort == "Hs") { "hsa:" }
                  else if (speciesShort == "Mm") { "mmu:" }
                  else if (speciesShort == "Rn") { "rno:" }
                  else { "" };
                var code = codePrefix ^^ code;
                var url = replacePlaceholder(dbURL, code);
                (species, code, url)
              }, dbl.dbEntries);
              [(dbID = (-1), # Hack
               dbName = "Kegg Gene",
               dbURL = dbURL,
               dbSpecialist = false,
               dbPrefix = "",
               dbEntries = entries)]
            } else {
              []
            }
          }, baseLinks);
        baseLinks ++ extraLinks
      }

      fun transformContributors(cs) {
        var sorted = sortBy(fun(c) { c.order }, cs);
        mkTBox("Contributors", false, map(
          fun(c) {
            var c = c.c;
            mkContributor(c.contributor_id, c.first_names ^^ " " ^^ c.surname,
                parseOrError(c.address), "")
          }, sorted))
      }

      fun transformCellTypeAssociations(ctas) {
        var (ctasRev, ctaRefs, ctaLigands) =
          fold_left(fun((ctasRev, ctaRefs, ctaLigands), x) {
            var comment = parseOrError(x.ctaComment);
            var cellType =
              (cellOntologyID = x.cellType.cellonto_id,
               cellOntologyName = x.cellType.name);
            var immuno =
              (immunoCTID = x.immuno.immuno_celltype_id, immunoCTName = x.immuno.term);
            var (commentRefs, commentLigands) = collectIds(comment);
            var allRefs = commentRefs ++ x.refs;
            var res =
              (ctaImmunoCelltype = immuno,
               ctaComments = comment,
               ctaCellOntologyType = cellType,
               ctaReferences = x.refs);
            (res :: ctasRev, allRefs ++ ctaRefs, commentLigands ++ ctaLigands)
          }, ([], [], []), ctas);
        (reverse(ctasRev), ctaRefs, ctaLigands)
      }

      fun transformImmunoProcessAssociations(ipas) {
        var (ipasRev, ipaRefs) =
          fold_left(fun((ipasRev, ipaRefs), x) {
            var goProcs =
              map(fun(g) {
                  (goProcessID = g.go.go_id,
                   goProcessComment = g.go.term,
                   goProcessEvidence = g.o2go.go_evidence)
              }, x.goProcs);
            (
             (ipImmunoProcess =
              (immunoProcessID = x.gtipProc.gtip_process_id,
               immunoProcessName = x.gtipProc.term),
             ipShowIEA = false,
             ipGoProcesses = goProcs,
             ipReferences = x.refs
            ) :: ipasRev, x.refs ++ ipaRefs)
          }, ([], []), ipas);
        (reverse(ipasRev), ipaRefs)
      }

      fun ligandOrDefault(projectF, def, ligands) {
        switch(ligands) {
          case [] -> def
          case x :: _ -> projectF(x)
        }
      }

      fun transformSubstrates(rawSubstrates) {

        fun transformSubstrate(s) {
          var sub = s.substrate;
          #sig ligandOrDefault : forall a. ((Tables.RawLigand) ~%~> a, a) ~%~> a

          var name =
            parseOrError(ligandOrDefault(fun(l) { l.name }, sub.name, s.ligand));

          var ligandID =
            ligandOrDefault(fun(l) { l.ligand_id }, (-1), s.ligand);

          var parsedProperty = parseOrError(sub.property);
          var parsedStandardProperty = parseOrError(sub.standard_property);
          var parsedAssayDescription = parseOrError(sub.assay_description);
          var parsedAssayConditions = parseOrError(sub.assay_conditions);
          var parsedComments = parseOrError(sub.comments);

          var (refs, ligands) =
            collectAllIds([parsedProperty, parsedStandardProperty,
                parsedAssayDescription, parsedAssayConditions, parsedComments]);

          var transformedSubstrate =
            (name = name,
             ligandID = ligandID,
             endogenous = sub.endogenous,
             species = speciesShortName(sub.species_id),
             property = parsedProperty,
             value = sub.value,
             units = parseOrError(sub.units),
             standardProperty = parsedStandardProperty,
             standardValue = sub.standard_value,
             assayDescription = parsedAssayDescription,
             assayConditions = parsedAssayConditions,
             comments = parsedComments,
             references = s.refs);
          (transformedSubstrate, refs ++ s.refs, ligands)
        }

        var (transformedSubstrates, substrateRefs, substrateLigands) =
          fold_left(fun((subs, refs, ligands), s) {
            var (sub, sRefs, sLigands) = transformSubstrate(s);
            (sub :: subs, sRefs ++ refs, sLigands ++ ligands)
          }, ([], [], []), rawSubstrates);

        var tbl = {
          var cols = [
            ("Substrate", ("substrate_header header", Sortable(fun(x, y) {
                markupCmp(x.name, y.name) }))),
            ("", ("", NotSortable)),
            ("Sp.", ("keybox_header",
              Sortable(fun(x, y) { simpleCmp(x.species, y.species) }))),
            ("Property", ("units_header header",
              Sortable(fun(x, y) { markupCmp(x.property, y.property) }))),
            ("Value", ("units_header header sorter-decimals", Sortable(fun(x, y) {
              simpleCmp(x.value, y.value)}))),
            ("Units", ("units_header", Sortable(fun(x, y) {
                simpleCmp(x.units,
                          y.units) }))),
            ("Standard property", ("units_header header sorter-decimals", Sortable(fun(x, y) {
              markupCmp(x.standardProperty, y.standardProperty)}))),
            ("Standard value", ("units_header header sorter-decimals", Sortable(fun(x, y) {
              simpleCmp(x.standardValue, y.standardValue)}))),
            ("Assay description", ("assay_header header", Sortable(fun(x, y) {
              markupCmp(x.assayDescription, y.assayDescription)}))),
            ("Assay conditions", ("assay_header header", Sortable(fun(x, y) {
              markupCmp(x.assayConditions, y.assayConditions)}))),
            ("Comments", ("assay_header header", Sortable(fun(x, y) {
              markupCmp(x.comments, y.comments)}))),
            ("References", ("reference_header", Sortable(fun(x, y) { 0 })))
          ];
          fun sortMessage(colName, sortDir) { SortTable(SubstratesTable, colName, sortDir) }
          DataTable.makeTable(cols, transformedSubstrates, sortMessage)
        };

        (tbl, substrateRefs, substrateLigands)
      }

      fun transformProducts(rawProducts) {

        fun transformProduct(p) {
          var prod = p.product;
          var name =
            parseOrError(ligandOrDefault(fun(l) { l.name }, prod.name, p.ligand));
          var ligandID =
            ligandOrDefault(fun(l) { l.ligand_id }, (-1), p.ligand);

          ((name = name,
           ligandID = ligandID,
           speciesName = speciesLongName(prod.species_id),
           endogenous = prod.endogenous,
           references = p.refs), p.refs)
        }

        fold_left(fun((prods, refs), p) {
            var (prod, pRefs) = transformProduct(p);
            (prod :: prods, pRefs ++ refs)
        }, ([], []), rawProducts)
      }

      fun transformCofactors(rawCofactors) {
        fun transformCofactor(c) {
          var co = c.cofactor;
          var name =
            parseOrError(ligandOrDefault(fun(l) { l.name }, co.name, c.ligand));
          var ligandID =
            ligandOrDefault(fun(l) { l.ligand_id }, (-1), c.ligand);
          var comments = parseOrError(co.comments);
          var (cRefs, cLigands) = collectIds(comments);
          var refs = c.refs;
          ((name = name, ligandID = ligandID,
           speciesName = speciesLongName(co.species_id),
           comments = comments,
           references = refs), refs ++ cRefs, cLigands)
        }

        var (data, refs, ligands) =
          fold_left(fun((acc, refs, ligands), x) {
            var (c, cRefs, cLigands) = transformCofactor(x);
            (c :: acc, cRefs ++ refs, cLigands ++ ligands)
          }, ([], [], []), rawCofactors);

        var cols = [
            ("Cofactor", ("", Sortable(fun(x, y) {
                markupCmp(x.name, y.name) }))),
            ("Species", ("keybox_header header",
              Sortable(fun(x, y) { simpleCmp(x.speciesName, y.speciesName) }))),
            ("Comments", ("keybox_header header",
              Sortable(fun(x, y) { markupCmp(x.comments, y.comments) }))),
            ("References", ("reference_header header",
              Sortable(fun(x, y) { 0 })))
          ];
          fun sortMessage(colName, sortDir) { SortTable(CofactorsTable, colName, sortDir) }
          (DataTable.makeTable(cols, data, sortMessage), refs, ligands)
      }

      var dbLinks = transformDBLinks(raw.databaseLinks);

      var (variants, variantRefs, variantLigands) =
        transformVariants(raw.variants);

      var (associatedProteins, associatedProteinRefs) =
        transformAssociatedProteins(raw.associatedProteins);

      var (pdbData, pdbRefs, pdbLigands) = transformPDBs(raw.pdbData);

      var (enzymeReactions, enzymeRefs, enzymeLigands) =
        transformEnzymeReactions(raw.enzymeReactions);

      var interactions =
        transformInteractions(
            map(InteractionUtilities.makeInteraction, raw.interactions));
      var endogenousLigands = interactions.endogenous;

      var sortedInteractions = mkTables(interactions);
      var interactionRefs = interactions.references;

      var (transductions, transductionRefs, transductionLigands) =
        Transduction.transductionsForObject(objectId);

      var (functionalAssays, faRefs, faLigands) =
        transformFunctionalAssays(raw.functionalAssays);

      var (physiologicalFunctions, pfRefs, pfLigands) =
        transformPhysiologicalFunctions(raw.physiologicalFunctions);

      var (physiologicalConsequences, pcRefs, pcLigands) =
        transformPhysiologicalConsequences(raw.alteredExpressions);

      var (tissueDistribution, tdRefs, tdLigands) =
        transformTissueDistribution(raw.tissueDistribution);

      var (geneProteinInfo, gpiRefs, gpiLigands) =
        transformGeneProteinInfo(raw.gpcrComments, raw.geneInformation);

      var (cellTypeAssociations, ctaRefs, ctaLigands) =
        transformCellTypeAssociations(raw.cellTypeAssociations);

      var (immunoProcessAssociations, ipaRefs) =
        transformImmunoProcessAssociations(raw.immunoProcessAssociations);

      # TODO: A few more comment fields (grac_comments, structural_info_comments, quanternary_structure_comments)
      # still to be handled
      var (receptorComments, commentRefs, commentLigands) =
        transformReceptorComments();

      var (substrateTbl, substrateRefs, substrateLigands) =
        transformSubstrates(raw.substrates);

      var (products, productRefs) = transformProducts(raw.products);
      var (cofactors, cofactorRefs, cofactorLigands) =
        transformCofactors(raw.cofactors);

      var refIDs =
        uniquify(
          variantRefs ++
          interactionRefs ++
          pdbRefs ++
          transductionRefs ++
          faRefs ++
          pfRefs ++
          pcRefs ++
          gpiRefs ++
          tdRefs ++
          ctaRefs ++
          ipaRefs ++
          associatedProteinRefs ++
          enzymeRefs ++
          substrateRefs ++
          productRefs ++
          cofactorRefs ++
          commentRefs);

      var ligandIDs =
        uniquify(
          variantLigands ++
          pdbLigands ++
          transductionLigands ++
          faLigands ++
          pfLigands ++
          pcLigands ++
          gpiLigands ++
          tdLigands ++
          ctaLigands ++
          enzymeLigands ++
          substrateLigands ++
          cofactorLigands ++
          commentLigands);

      var ligandNames = Ligand.queryLigands(ligandIDs);

      var refs = Reference.mkReferenceData(Reference.queryReferences(refIDs));
      fun parseIfNonempty(str) {
        if (str == "") {
          Nothing
        } else {
          Just(parseOrError(str))
        }
      }

      var systematicName = parseIfNonempty(raw.systematicName);
      var abbreviation = parseIfNonempty(raw.abbreviation);

      (objectId = objectId,
       objectType = Object.classifyObject(objectId),
       objectName = parseOrError(raw.name),
       objectSystematicName = systematicName,
       objectAbbreviation = abbreviation,
       objectSynonyms = transformSynonyms(raw.synonyms),
       objectFamily = transformFamily(raw.family),
       objectGeneProteinInfo = geneProteinInfo,
       objectDatabaseLinks = dbLinks,
       objectAnnotationStatus = raw.annotationStatus,
       objectEnzymeReactions = enzymeReactions,
       objectPDBData = pdbData,
       objectEndogenousLigands = endogenousLigands,
       objectSortedInteractions = sortedInteractions,
       objectTransductionMechanisms = transductions,
       objectVariants = variants,
       objectComments = receptorComments,
       objectLigandNames = ligandNames,
       objectShowReferences = false,
       objectReferences = refs,
       objectFunctionalAssays = functionalAssays,
       objectPhysiologicalFunctions = physiologicalFunctions,
       objectPhysiologicalConsequences = physiologicalConsequences,
       objectTissueDistribution = tissueDistribution,
       objectCellTypeAssociations = cellTypeAssociations,
       objectImmunoProcessAssociations = immunoProcessAssociations,
       objectAssociatedProteins = associatedProteins,
       objectSpeciesMap = speciesMap,
       objectSubstrates = substrateTbl,
       objectProducts = products,
       objectCofactors = cofactors,
       objectContributors = transformContributors(raw.contributors))
    }

    switch(raw) {
      case [] -> Nothing
      case x :: _ -> Just(mkModel(x))
    }
  }

  switch(lookup("objectId", environment())) {
    case Just(id) -> getObjectInfo(stringToInt(id))
    case Nothing -> Nothing
  }
}

sig view : (Model) ~%~> HTML(Message)
fun view(model) {
  sig viewModel : (ObjectInfo) ~%~> HTML(Message)
  fun viewModel(objectInfo) {
    var a0 = MvuAttrs.empty;
    var h0 = MvuHTML.empty;

    fun speciesLongName(speciesId) {
      Species.resolveSpeciesLongName(speciesId, objectInfo.objectSpeciesMap)
    }

    fun speciesShortName(speciesId) {
      Species.resolveSpeciesShortName(speciesId, objectInfo.objectSpeciesMap)
    }

    sig renderM : (Markup) ~%~> HTML(Message)
    fun renderM(m) {
      RenderMarkup.renderMarkup(m,
          objectInfo.objectReferences,
          objectInfo.objectLigandNames)
    }

    fun renderKeyVal((key, val)) {
      tr(a0,
        td(class("key"), textNode(key ^^ ":")) +*
        td(class("value"), val))
    }

    fun renderIfJust(heading, x) {
      switch(x) {
        case Just(markup) ->
          p(a0,
            b(a0, textNode(heading ^^ ": ")) +*
            renderM(markup))
        case Nothing -> MvuHTML.empty
      }
    }

    var sysNomenclature =
      renderIfJust("Systematic Nomenclature", objectInfo.objectSystematicName);
    var abbrev =
      renderIfJust("Abbreviation", objectInfo.objectAbbreviation);

    var infoBox = {
    div(class("grid_16 alpha"),
      a(name("top"), MvuHTML.empty) +*
      h4(a0, renderM(objectInfo.objectName)) +*
      div(class("contentboxfullhelp"),
        div(class("textmiddle"),
          p(a0, b(a0, textNode("Target id: ")) +*
            textNode(intToString(objectInfo.objectId))) +*
          p(a0,
            b(a0, textNode("Nomenclature: ")) +*
            renderM(objectInfo.objectName)) +*
          sysNomenclature +*
          abbrev +*
          p(a0,
            b(a0, textNode("Family: ")) +*
            a(href("/familyDisplay?familyId=" ^^ intToString(objectInfo.objectFamily.familyId)),
              renderM(objectInfo.objectFamily.familyName))) +*
          p(a0,
            b(a0, textNode("Annotation status: ")) +*
            renderAnnotationStatus(objectInfo.objectAnnotationStatus)))))
    };


    fun dataBox(header, cols, contents) {
      var cs = if (cols == 1) { MvuAttrs.empty } else { colSpan(cols) };
      table_(class("receptor_data_tables fullwidth"),
        thead(a0,
          tr(name("hotspot") +@ class("hotspot"),
            td(class("info category") +@ cs,
              textNode(header)))) +*
        tbody(name("toggle"), contents))
    }

    fun commentsBox(header, markup) {
      if (Parser.markupEmpty(markup)) {
        MvuHTML.empty
      } else {
        dataBox(header, 1,
          tr(a0,
          td(class("info"),
            renderM(markup))))
      }
    }

    var comments = objectInfo.objectComments;

    var synonymsBox = {
      if (objectInfo.objectSynonyms == []) { MvuHTML.empty } else {
        var renderedSynonyms = map(fun(m) { [renderM(m)] }, objectInfo.objectSynonyms);
        var separatedSynonyms = MvuHTML.concat(join([textNode(" | ")], renderedSynonyms));
        var row = tr(a0, td(class("info"), separatedSynonyms));
        dataBox("Previous and Unofficial Names", 1, row)
      }
    };

    var dbLinksBox =
      renderDatabaseLinks(objectInfo.objectDatabaseLinks, objectInfo.objectSpeciesMap);
    var endogenousLigandsBox = {
      fun renderSummary(els) {
        tr(class("info"),
            td(a0,
              a(href("/ligandDisplay?ligandId=" ^^ intToString(els.elsLigandID)),
                renderM(els.elsName))))
      }

      var renderedSummaries =
        MvuHTML.concatMap(renderSummary, objectInfo.objectEndogenousLigands);

      a(name("Endogenous"), h0) +*
      table_(class("receptor_data_tables fullwidth"),
        thead(a0,
          tr(a0,
            td(class("info category"), textNode("Natural/Endogenous Ligands")))) +*
        tbody(a0,
          renderedSummaries +*
          tr(class("info"),
            td(a0,
              b(a0, textNode("Comments: ")) +*
              renderM(objectInfo.objectComments.listComments)))))
    };

    var potencyOrderBox = MvuHTML.empty;

    var interactionsTables = {
      fun renderRow(x) {
        var x : InteractionInfo = x;
        var i = x.interaction;
        var imgCols = {
          var sizeCol = {
            switch(x.ligandSize) {
              case Small ->
                boolImage(("/images/benzene.gif", true,
                      "Small molecule or natural product"))
              case Peptide ->
                boolImage(("/images/peptide_cartoon.png", true,
                      "Peptide or antibody"))
              case OtherSize ->
                boolImage(("", false, ""))
            }
          };

          var approvedCol = boolImage(("/images/approved.png", i.interactionLigand.approved, "Approved ligand"));
          var primaryCol = boolImage(("/images/primary.png", i.primaryTarget, "Primary interaction"));
          var selectiveCol =
            boolCol(i.selective,
              a(href("/ligandInteractions?ligandId=" ^^
                  intToString(i.ligandID) ^^ "&speciesId=" ^^ intToString(i.speciesID)), h0) +*
              img(src("/images/select.gif") +@ alt("Click here for species-specific selectivity table"), h0));
          var endogenousCol =
            boolImage(("/images/endogenous.gif", i.endogenous,
                  "Ligand is endogenous in the given species"));
          var labelled = boolImage(("/images/probe.png", i.interactionLigand.labelled, "Ligand is labelled"));
          var radioactive = boolImage(("/images/rad.gif", i.interactionLigand.radioactive, "Ligand is radioactive"));
          # FIXME: We need to include the information about PDB structures here. I think the best way of doing this
          # is likely to have some sort of "ligand summary" that can be loaded easily from the interactions rather
          # than using the whole table.
          var hasPDB =
            boolImage(("/images/protein_structure_icon.png", false, "Ligand has a PDB structure"));
          var immuno =
            boolImage(("/images/immuno_ligand.png", i.interactionLigand.in_gtip, "Immunopharmacology Ligand"));

          MvuHTML.concat([sizeCol, approvedCol, primaryCol, selectiveCol, endogenousCol,
              labelled, radioactive, hasPDB, immuno])
        };

        var nameCol =
          td(a0,
            a(href("/ligandDisplay?ligandId=" ^^ intToString(i.ligandID)), renderM(x.parsedName)));

        var speciesCol =
          td(a0, textNode(x.speciesShort));

        var actionCol =
          td(a0, textNode(i.interactionAction));

        var affinityCol =
          td(a0, InteractionUtilities.displayAffinity(i.affinity, false));

        var parameterCol =
          td(a0, textNode(i.affinity.affinityUnits));

        var referenceCol =
          td(a0, Reference.renderCitationList(i.references, objectInfo.objectReferences));

        tr(class("info"),
          nameCol +*
          imgCols +*
          speciesCol +*
          actionCol +*
          affinityCol +*
          parameterCol +*
          referenceCol)
      }

      fun renderReceptorTable((tbl, label, commentsHeader, comments)) {
        if (DataTable.getTableData(tbl) == []) {
          MvuHTML.empty
        } else {
          dataBox(label, 1,
            a(name(label), h0) +*
            tr(a0, td(class("table_container") +@ style("border-style:solid solid none solid;"),
            DataTable.renderTable(tbl, renderRow)))) +*
          commentsBox(commentsHeader, comments)
        }
      }

      fun renderChannelTable((tbl, label, commentsHeader, comments)) {
        MvuHTML.empty # For now.
      }

      var si = objectInfo.objectSortedInteractions;
      var oc = objectInfo.objectComments;
      var receptorTables = [
        (si.agonists, "Agonists", "Agonist Comments", oc.agonistsComments),
        (si.antagonists, "Antagonists", "Antagonist Comments", oc.antagonistsComments),
        (si.allostericModulators, "Allosteric Modulators",
         "Allosteric Modulator Comments", oc.allostericModulatorsComments),
        (si.subunitSpecific, "Subunit-specific",
         "Subunit-specific Comments", MarkupEmpty)
      ];

      var channelTables = [
        (si.activators, "Activators", "Activator Comments", oc.activatorsComments),
        (si.inhibitors, "Inhibitors", "Inhibitor Comments", oc.inhibitorsComments),
        (si.channelBlockers, "Channel Blockers", "Channel Blocker Comments", oc.channelBlockersComments),
        (si.gatingInhibitors, "Gating Inhibitors",
         "Gating Inhibitor Comments", oc.gatingInhibitorsComments)
      ];

      MvuHTML.concatMap(renderReceptorTable, receptorTables) +*
      MvuHTML.concatMap(renderChannelTable, channelTables)

    };

    var immunoCommentsBox =
      commentsBox("Immunopharmacology Comments", comments.immunoComments);
    var malariaCommentsBox =
      commentsBox("Malaria Comments", comments.malariaComments);

    var transductionMechanismsBoxes = {
      var tms = objectInfo.objectTransductionMechanisms;
      if (tms == []) {
        MvuHTML.empty
      } else {
        var (primary, secondary) = partition(fun(t) { not(t.tSecondary) }, tms);
        fun renderTransduction(t) {
          fun renderMarkups(ms) {
            MvuHTML.concatMap(fun(m) { p(a0, renderM(m)) }, ms)
          }
          var commentsRow =
            if (Parser.markupEmpty(t.tComments)) { MvuHTML.empty } else {
              tr(a0,
                td(colSpan(2) +@ class("info"),
                  textNode("Comments: ") +*
                  renderM(t.tComments)))
            };
          var referencesRow =
            if (t.tReferences == []) { MvuHTML.empty } else {
              tr(a0,
                td(colSpan(2) +@ class("info"),
                  textNode("References: ") +*
                  Reference.renderCitationList(t.tReferences, objectInfo.objectReferences)))
            };

          tr(a0,
            td(class("info"),
              renderMarkups(t.tTransducers)) +*
            td(class("info"),
              renderMarkups(t.tEffectors))) +*
          commentsRow +*
          referencesRow
        }

        var primaryBox = if (primary == []) { MvuHTML.empty } else {
          dataBox("Primary Transduction Mechanisms", 2,
              MvuHTML.concatMap(renderTransduction, primary))
        };

        var secondaryBox = if (secondary == []) { MvuHTML.empty } else {
          dataBox("Secondary Transduction Mechanisms", 2,
              MvuHTML.concatMap(renderTransduction, secondary))
        };

        primaryBox +* secondaryBox
      }
    };

    fun renderDataBox(box) {
      fun renderDataRow(row) {

        fun renderDatum((k, v)) {
          tr(a0,
            td(class("key"), textNode(k)) +*
            td(class("value"), renderM(v)))
        }

        var renderedData = MvuHTML.concatMap(renderDatum, row.entryData);
        var referencesRow =
          if (row.entryReferences == []) {
            MvuHTML.empty
          } else {
            tr(a0,
              td(class("key"), textNode("References")) +*
              td(class("value"),
                Reference.renderCitationList(row.entryReferences,
                  objectInfo.objectReferences)))
          };

        tr(a0,
          td(class("info"),
            table_(class("inner_receptor_data_tables"),
              tr(a0,
                td(class("description"), renderM(row.entryComment))) +*
              tr(a0,
                td(a0,
                  table_(class("inner_receptor_data_tables"),
                    renderedData +* referencesRow))))))
      }

      var renderedRows = MvuHTML.concatMap(renderDataRow, box.boxRows);

      a(name(box.boxName), h0) +*
      table_(class("receptor_data_tables fullwidth"),
        thead(a0,
          tr(name("hotspot") +@ class("hotspot"),
            td(class("info category"), textNode(box.boxName)))) +*
        tbody(name("toggle"), renderedRows))
    }

    var tissueDistributionBox =
      renderDataBox(objectInfo.objectTissueDistribution);
    var functionalAssaysBox =
      renderDataBox(objectInfo.objectFunctionalAssays);
    var physiologicalFunctionsBox =
      renderDataBox(objectInfo.objectPhysiologicalFunctions);
    var physiologicalConsequencesBox =
      renderDataBox(objectInfo.objectPhysiologicalConsequences);
    var phenotypesBox = MvuHTML.empty;
    var generalCommentsBox =
      commentsBox("General Comments", comments.generalComments);
    var contributorsBox = MvuHTML.empty;

    var pdbStructureBox = {
      fun renderPDBRow(pdb) {

        fun renderPDBDataRow(propName, html) {
          tr(a0,
            td(class("key") +@ style("width:100px;"), textNode(propName)) +*
            td(class("value"), html))
        }
        var descRow =
          renderPDBDataRow("Description:", renderM(pdb.pdbLigandDescription));

        var pdbIDRow =
          renderPDBDataRow("PDB Id:",
              a(href("http://www.rcsb.org/pdb/cgi/explore.cgi?pdbId=" ^^ pdb.pdbCode) +@
                title("RCSB PDB: an information portal to biological macromolecular structures"),
                textNode(pdb.pdbCode)));

        var ligandRow =
          renderPDBDataRow("Ligand:",
              a(href("/ligandDisplay?ligandId=" ^^ intToString(pdb.pdbLigandId)),
                renderM(pdb.pdbLigandName)));

        var resolutionRow =
          renderPDBDataRow("Resolution:", textNode(floatToString(pdb.pdbResolution)));

        var speciesRow =
          renderPDBDataRow("Species:", textNode(speciesLongName(pdb.pdbSpeciesId)));

        var referencesRow =
          renderPDBDataRow("References:",
              Reference.renderCitationList(pdb.pdbReferences,
                objectInfo.objectReferences));

        tr(a0,
          td(class("info") +@ align("center") +@ valign("center"),
            a(style("color:white;") +@
              href("http://www.rcsb.org/pdb/cgi/explore.cgi?pdbId=" ^^ pdb.pdbCode) +@
              title("Image of receptor 3D structure from RCSB PDB") +@ target("_blank"),
            img(src("http://www.rcsb.org/pdb/images/" ^^ pdb.pdbCode ^^ "_bio_r_500.jpg") +@
              height("200") +@ width("200") +@ alt("Image of receptor 3D structure from RCSB PDB"), h0))) +*
          td(class("info") +@ valign("top"),
            table_(class("inner_receptor_data_tables"),
              descRow +*
              pdbIDRow +*
              ligandRow +*
              resolutionRow +*
              speciesRow +*
              referencesRow)))
      }

      var pdbRows = MvuHTML.concatMap(renderPDBRow, objectInfo.objectPDBData);

      if (objectInfo.objectPDBData == []) {
        MvuHTML.empty
      } else {
        a(name("PDBStructures"), h0) +*
        table_(class("receptor_data_tables fullwidth"),
          thead(a0,
            tr(name("hotspot") +@ class("hotspot"),
              td(class("info category") +@ colSpan(2),
                textNode("Selected 3D Structures")))) +*
          tbody(name("toggle"), pdbRows))
      }
    };


    var geneProteinInfoBox = {
      var gi = objectInfo.objectGeneProteinInfo;
      var headings = ["Species", "TM", "AA", "Chromosomal Location", "Gene Symbol",
          "Gene Name", "Reference"];
      fun renderHeading(h) { td(class("info heading"), textNode(h)) }
      var renderedHeadings = MvuHTML.concatMap(renderHeading, headings);

      fun renderRow(gpi) {
        fun renderData(val) {
          td(class("info centre"), val)
        }
        var data = [
          textNode(speciesLongName(gpi.gpiSpeciesID)),
          textNode(intToString(gpi.gpiTransmembraneDomains)),
          textNode(intToString(gpi.gpiAminoAcids)),
          textNode(gpi.gpiChromosomalLocation),
          textNode(gpi.gpiShortName),
          renderM(gpi.gpiName),
          Reference.renderCitationList(gpi.gpiReferences,
              objectInfo.objectReferences)
        ];
        tr(a0, MvuHTML.concatMap(renderData, data))
      }
      var renderedRows = MvuHTML.concatMap(renderRow, gi.giEntries);

      a(name("StructuralInfo"), h0) +*
      table_(class("receptor_data_tables fullwidth"),
        thead(a0,
          tr(name("hotspot") +@ class("hotspot"),
            td(class("info category") +@ colSpan(7),
              textNode("Gene and Protein Information")))) +*
        tbody(name("toggle"),
          tr(a0,
            td(class("info") +@ colSpan(7), renderM(gi.giComments))) +*
          tr(a0, renderedHeadings) +*
          renderedRows))
    };

    var cellTypeAssociationsBox = {
      fun renderCTA(cta) {
        var ct = cta.ctaImmunoCelltype;
        var cto = cta.ctaCellOntologyType;
        var cellTypeContent =
          a(href("/objectCelltypeAssocList?immCellType=" ^^
                intToString(ct.immunoCTID)), textNode(ct.immunoCTName));
        var cellOntologyContent =
          textNode(cto.cellOntologyName ^^ " (" ^^ cto.cellOntologyID ^^ ")");
        var referencesRow =
          if (cta.ctaReferences == []) { MvuHTML.empty } else {
            renderKeyVal(("References",
                Reference.renderCitationList(cta.ctaReferences,
                  objectInfo.objectReferences)))
          };
        var rows =
          [("Immuno Cell Type", cellTypeContent),
           ("Cell Ontology Term", cellOntologyContent),
           ("Comment", renderM(cta.ctaComments))];
        var renderedRows = MvuHTML.concat(map(renderKeyVal, rows) ++ [referencesRow]);
        tr(a0,
          td(class("info"),
            table_(class("inner_receptor_data_tables"), renderedRows)))
      }

      var renderedCTAs =
        MvuHTML.concatMap(renderCTA, objectInfo.objectCellTypeAssociations);

      a(name("Celltypes"), h0) +*
      table_(class("receptor_data_tables fullwidth"),
        tr(name("hotspot") +@ class("hotspot"),
          td(class("info category"), textNode("Cell Type Associations"))) +*
        renderedCTAs)
    };

    var immunoProcessAssociationsBox = {
      fun renderProcess(proc) {
        var iProc = proc.ipImmunoProcess;
        var goProcCount = length(proc.ipGoProcesses);

        var (ieaProcs, otherProcs) =
          partition(fun(p) { p.goProcessEvidence == "IEA" }, proc.ipGoProcesses);

        var goAnnotationsCountRow = {
          var content = {
            var suffix =
              if (otherProcs == []) {
                textNode(", IEA only")
              } else { MvuHTML.empty };
            textNode("Associated to " ^^ intToString(goProcCount) ^^ " processes") +*
            suffix
          };
          renderKeyVal(("Go Annotations", content))
        };

        fun renderGoProcess(goProc) {
          tr(a0,
            td(style("width:20%;"), textNode(goProc.goProcessID)) +*
            td(style("width:70%;"), textNode(goProc.goProcessComment)) +*
            td(style("width:10%;"), textNode(goProc.goProcessEvidence)))
        }

        var goAnnotations = MvuHTML.concatMap(renderGoProcess, otherProcs);

        var toggleGoAnnotationsRow = {
          var clickAttr = onClick(fun() { ToggleShowIEA(proc.ipImmunoProcess.immunoProcessID) });
          var arrow = {
            var arrowClass = if (proc.ipShowIEA) { "arrow up" } else { "arrow" };
            div(class(arrowClass) +@ clickAttr, h0)
          };

          tr(a0,
            td(style("width:20%;"),
              a(title("Toggle GO associations with IEA evidence") +@ class("toggle"),
                arrow)) +*
            td(colSpan(2) +@ style("width:800%;font-style:italic;"),
                textNode("click arrow to show/hide IEA associations")))
        };

        var ieaAnnotations =
          if (proc.ipShowIEA) {
            MvuHTML.concatMap(renderGoProcess, ieaProcs)
          } else {
            MvuHTML.empty
          };

        tr(a0,
          td(class("info"),
            table_(class("inner_receptor_data_tables") +@ style("width:70%"),
              renderKeyVal(("Immuno Process",
                a(href("/immProcessList?immprocess=" ^^ intToString(iProc.immunoProcessID)),
                  textNode(iProc.immunoProcessName)))) +*
              goAnnotationsCountRow +*
              tr(a0,
                td(a0, h0) +*
                table_(id("go") +@ class("tablesorter inner_receptor_data_tables"),
                  goAnnotations +*
                  toggleGoAnnotationsRow +*
                  ieaAnnotations)))))
      }

      var procs = objectInfo.objectImmunoProcessAssociations;
      if (procs == []) {
        MvuHTML.empty
      } else {
        var renderedProcs = MvuHTML.concatMap(renderProcess, procs);
        a(name("Processes"), MvuHTML.empty) +*
        table_(class("receptor_data_tables fullwidth"),
          tr(name("hotspot") +@ class("hotspot"),
            td(class("info category"), textNode("Immuno Process Associations"))) +*
          renderedProcs)
      }
    };

    var associatedProteinsBox = {
      var oaps = objectInfo.objectAssociatedProteins;
      var comments = objectInfo.objectComments.associatedProteinsComments;

      if (not(markupEmpty(comments) &&
              listEmpty(oaps.hpfSubunits) &&
              listEmpty(oaps.auxiliarySubunits) &&
              listEmpty(oaps.otherProteins) &&
              listEmpty(oaps.gProteins) &&
              listEmpty(oaps.interactingProteins))) {

        var comments = commentsBox("Associated Protein Comments", comments);


        var renderedTables = {
          fun renderRowsIfNonempty(data, showEffect) {
            var cols = if (showEffect) { 3 } else { 2 };
            fun renderRow(ap) {
              var effect =
                if (showEffect) {
                  td(class("info"), renderM(ap.effect))
                } else {
                  MvuHTML.empty
                };

              var name =
                switch(ap.objectID) {
                  case Just(id) ->
                    a(href("/objectDisplay?objectId=" ^^ intToString(id)), renderM(ap.name))
                  case Nothing -> renderM(ap.name)
                };
              tr(a0,
                td(class("info"), name) +*
                effect +*
                td(class("info"), Reference.renderCitationList(ap.references, objectInfo.objectReferences)))
            }

            if (listEmpty(data)) {
              tr(a0,
                td(class("info") +@ colSpan(cols), textNode("Not determined")))
            } else {
              MvuHTML.concatMap(renderRow, data)
            }
          }

          fun renderICTable(title, alignment, data) {
            var renderedRows = renderRowsIfNonempty(data, false);
            td(align(alignment) +@ valign("top") +@ class("info"),
              table_(align("center") +@ class("receptor_data_tables")
                +@ style("margin:0px;min-width:100%;"),
                colgroup(a0,
                  col(style("min-width:50%"), h0) +*
                  col(style("min-width:50%"), h0)) +*
                thead(a0,
                  tr(a0,
                    td(class("info category") +@ colSpan(2), textNode(title)))) +*
                tbody(a0,
                  tr(a0,
                    td(class("info heading"), textNode("Name")) +*
                    td(class("info heading"), textNode("References"))) +*
                  renderedRows)))

          }
          var tables = {
            if (objectInfo.objectType == IC) {
              # Render 3 specific IC tables
              renderICTable("Heteromeric Pore-forming Subunits", "left", oaps.hpfSubunits) +*
              renderICTable("Auxiliary Subunits", "center", oaps.auxiliarySubunits) +*
              renderICTable("Other Associated Proteins", "right", oaps.otherProteins)
            } else {
              # Render G Proteins and interacting proteins table
              var gProteinsTable =
                if (not(listEmpty(oaps.gProteins))) {
                  renderICTable("G Proteins", "right", oaps.gProteins)
                } else {
                  MvuHTML.empty
                };

              var interactingProteinsTable = {
                var renderedRows = renderRowsIfNonempty(oaps.interactingProteins, true);
                if (not(listEmpty(oaps.interactingProteins))) {
                  td(align("center") +@ valign("top") +@ class("info"),
                    table_(align("center") +@ class("receptor_data_tables")
                      +@ style("margin:0px;min-width:100%;"),
                      colgroup(a0,
                        col(style("min-width:35%"), h0) +*
                        col(style("min-width:35%"), h0) +*
                        col(style("min-width:30%"), h0)) +*
                      thead(a0,
                        tr(a0,
                          td(class("info category") +@ colSpan(3), textNode("Interacting Proteins")))) +*
                      tbody(a0,
                        tr(a0,
                          td(class("info heading"), textNode("Name")) +*
                          td(class("info heading"), textNode("Effect")) +*
                          td(class("info heading"), textNode("References"))) +*
                        renderedRows)))
                } else {
                  MvuHTML.empty
                }
              };

              gProteinsTable +* interactingProteinsTable
            }
          };

          tbody(name("toggle"),
            tr(valign("top"), tables))
          };
        a(name("AssociatedProteins"), MvuHTML.empty) +*
        table_(class("receptor_data_tables fullwidth"),
          colgroup(a0,
            col(style("min-width:280px;"), h0) +*
            col(style("min-width:280px;"), h0) +*
            col(style("min-width:280px;"), h0)) +*
          thead(a0,
            tr(a0,
              td(class("info category") +@ colSpan(3), textNode("Associated Proteins")))) +*
          renderedTables) +*
        comments
      } else {
        MvuHTML.empty
      }
    };

    var enzymeReactionsBox = {
      if (listEmpty(objectInfo.objectEnzymeReactions)) {
        MvuHTML.empty
      } else {
        fun renderRow(reaction) {
          var srs = reaction.specificReactions;

          var renderedSRs = {
            fun renderSR(sr) {
              tr(class("info"),
                td(a0, renderM(sr.description)) +*
                td(a0, renderM(sr.reaction)) +*
                td(a0, Reference.renderCitationList(sr.references, objectInfo.objectReferences)))
            }

            tr(class("info heading"),
              td(a0, textNode("Description")) +*
              td(a0, textNode("Reaction")) +*
              td(a0, textNode("Reference"))) +*
            MvuHTML.concatMap(renderSR, srs)
          };


          var rowspanAttr =
            if (listEmpty(srs)) {
              MvuAttrs.empty
            } else {
              rowSpan(length(srs) + 2)
            };

          var specificReactions =
            if (listEmpty(srs)) {
              MvuHTML.empty
            } else {
              renderedSRs
            };

          tr(class("info"),
            td(rowspanAttr,
              textNode("EC Number: ") +*
              a(href("http://www.genome.jp/dbget-bin/www_bget?ec:" ^^ reaction.ecNumber),
                textNode(reaction.ecNumber))) +*
            td(colSpan(3), renderM(reaction.reaction))) +*
            specificReactions
        }

        a(name("EnzymeReaction"), h0) +*
        table_(class("receptor_data_tables fullwidth"),
          thead(a0,
            tr(a0,
              td(class("info category"), textNode("Enzyme Reaction")))) +*
          tbody(a0,
            tr(a0,
              td(class("table_container"),
                table_(class("inner_receptor_data_tables"),
                  thead(a0, h0) +*
                  tbody(a0,
                    MvuHTML.concatMap(renderRow, objectInfo.objectEnzymeReactions)))))))
      }

    };

    var substratesBox = {
      if (objectInfo.objectType == Enzyme || objectInfo.objectType == Transporter &&
          not(tableEmpty(objectInfo.objectSubstrates))) {
        fun renderRow(subs) {
          var nameCol =
            if (subs.ligandID > 0) {
              a(href("/objectDisplay?objectId=" ^^ intToString(subs.ligandID)),
                  renderM(subs.name))
            } else {
              renderM(subs.name)
            };
          var endoCol =
            if (subs.endogenous) {
              img(src("/images/endogenous.gif") +@
                  alt("Substrate is endogenous in the given species"), h0)
            } else {
              MvuHTML.empty
            };

          var standardValCol =
            if (subs.standardValue == 0.0) {
              MvuHTML.empty
            } else {
              textNode(floatToString(subs.standardValue))
            };

          tr(class("info"),
            td(a0, nameCol) +*
            td(a0, endoCol) +*
            td(style("text-align:center;"), textNode(subs.species)) +*
            td(a0, renderM(subs.property)) +*
            td(a0, textNode(floatToString(subs.value))) +*
            td(a0, renderM(subs.units)) +*
            td(a0, renderM(subs.standardProperty)) +*
            td(a0, standardValCol) +*
            td(a0, renderM(subs.assayDescription)) +*
            td(a0, renderM(subs.assayConditions)) +*
            td(a0, renderM(subs.comments)) +*
            td(a0, Reference.renderCitationList(subs.references, objectInfo.objectReferences)))
        }

        var renderedTable = renderTable(objectInfo.objectSubstrates, renderRow);

        a(name("SubstrateKinetics"), h0) +*
        table_(class("receptor_data_tables fullwidth"),
          thead(a0,
            tr(a0,
              td(class("info category"), textNode("Substrates and Reaction Kinetics")))) +*
          tbody(a0,
            tr(a0,
              td(class("table_container"), renderedTable))))
      } else {
        MvuHTML.empty
      }
    };

    var productsBox = {
      fun renderRow(p) {
        var renderedName =
          if (p.ligandID == (-1)) {
            renderM(p.name)
          } else {
            a(href("/ligandDisplay?ligandId=" ^^ intToString(p.ligandID)), renderM(p.name))
          };

        var endogImg =
          if (p.endogenous) {
            img(src("/images/endogenous.gif"), h0)
          } else {
            MvuHTML.empty
          };
        tr(class("info"),
          td(style("border-style: solid dotted solid solid;"),
            renderedName) +*
          td(style("border-style: solid solid solid dotted;padding:1px;width:20px;text-align:center;"),
            endogImg) +*
          td(a0, textNode(p.speciesName)) +*
          td(a0, Reference.renderCitationList(p.references, objectInfo.objectReferences)))
      }

      if (listEmpty(objectInfo.objectProducts)) {
        MvuHTML.empty
      } else {
        var renderedRows =
          MvuHTML.concatMap(renderRow, objectInfo.objectProducts);

        a(name("Products"), h0) +*
        table_(class("receptor_data_tables fullwidth"),
          thead(a0,
            tr(a0,
              td(class("info category"), textNode("Products")))) +*
          tbody(a0,
            tr(a0,
              td(class("table_container"),
                table_(id("products") +@ class("tablesorter inner_receptor_data_tables"),
                  thead(a0,
                    tr(class("info heading"),
                      th(class("substrate_header header") +@ colSpan(2), textNode("Product")) +*
                      th(class("units_header header"), textNode("Species")) +*
                      th(class("reference_header header"), textNode("References")))) +*
                  tbody(a0, renderedRows))))))
      }
    };

    var cofactorsBox = {
      if (tableEmpty(objectInfo.objectCofactors)) {
        MvuHTML.empty
      } else {
        sig renderRow : (Cofactor) ~%~> HTML(Message)
        fun renderRow(c) {
          var renderedName =
            if (c.ligandID == (-1)) {
              renderM(c.name)
            } else {
              a(href("/ligandDisplay?ligandId=" ^^ intToString(c.ligandID)), renderM(c.name))
            };
          tr(class("info"),
            td(a0, renderedName) +*
            td(a0, textNode(c.speciesName)) +*
            td(a0, renderM(c.comments)) +*
            td(a0, Reference.renderCitationList(c.references, objectInfo.objectReferences)))
        }

        a(name("Cofactors"), h0) +*
        table_(class("receptor_data_tables fullwidth"),
          thead(a0,
            tr(a0,
              td(class("info category"), textNode("Cofactors")))) +*
          tbody(a0,
            tr(a0,
              td(class("table_container"),
                renderTable(objectInfo.objectCofactors, renderRow)))))
      }
    };

    var stoichiometryBox =
      commentsBox("Stoichiometry", objectInfo.objectComments.stoichiometryComments);
    var fcsBox =
      commentsBox("Functional Characteristics",
          objectInfo.objectComments.functionalCharacteristicsComments);

    var dataBoxes =
      div(class("grid_16 alpha"),
        div(class("contentboxfullhelp"),
          div(class("data_tables_container"),
            geneProteinInfoBox +*
            synonymsBox +*
            dbLinksBox +*
            pdbStructureBox +*
            # Primary regulator data does not exist in the DB -- no point implementing
            enzymeReactionsBox +*
            associatedProteinsBox +*
            substratesBox +*
            productsBox +*
            cofactorsBox +*
            stoichiometryBox +*
            fcsBox +*
            endogenousLigandsBox +*
            potencyOrderBox +*
            interactionsTables +*
            immunoCommentsBox +*
            malariaCommentsBox +*
            cellTypeAssociationsBox +*
            immunoProcessAssociationsBox +*
            transductionMechanismsBoxes +*
            tissueDistributionBox +*
            functionalAssaysBox +*
            physiologicalFunctionsBox +*
            physiologicalConsequencesBox +*
            phenotypesBox +*
            generalCommentsBox)));

    var referencesBox =
      Reference.renderReferencesBox(
          objectInfo.objectShowReferences,
          objectInfo.objectReferences,
          fun() { ToggleReferences });

    var contributorsBox =
      ToggleBox.showBox(objectInfo.objectContributors, ToggleContributors,
        Contributor.renderContributors);

    div(class("grid_12"),
        infoBox +*
        dataBoxes +*
        referencesBox +*
        contributorsBox)
  }

  switch(model) {
    case Just(objectInfo) -> viewModel(objectInfo)
    case Nothing -> textNode("Invalid object ID.")
  }
}

sig updt : (Message, Model) ~%~> Model
fun updt(msg, model) {
  fun updtOI(objectInfo) {

    fun toggleIEA(procID) {
      var ipas = objectInfo.objectImmunoProcessAssociations;
      map(fun(x) { if (x.ipImmunoProcess.immunoProcessID == procID) {
            (x with ipShowIEA = not(x.ipShowIEA))
          } else {
            x
          }
        }, ipas)
    }

    switch(msg) {
      case ToggleReferences ->
        (objectInfo with
          objectShowReferences=not(objectInfo.objectShowReferences))
      case ToggleContributors ->
        (objectInfo with
          objectContributors = toggleBox(objectInfo.objectContributors))
      case ToggleShowIEA(procID) ->
        (objectInfo with
          objectImmunoProcessAssociations=toggleIEA(procID))
      case SortTable(tableTy, colName, dir) ->
        var osi = objectInfo.objectSortedInteractions;
        fun updateOSI(newOSI) {
          (objectInfo with objectSortedInteractions = newOSI)
        }
        switch(tableTy) {
          case AgonistsTable ->
            updateOSI((osi with agonists = DataTable.updateSortStatus(osi.agonists, colName, dir)))
          case AntagonistsTable ->
            updateOSI(
              (osi with antagonists = DataTable.updateSortStatus(osi.antagonists, colName, dir)))
          case AllostericModulatorsTable ->
            updateOSI(
              (osi with allostericModulators =
                 DataTable.updateSortStatus(osi.allostericModulators, colName, dir)))
          case ActivatorsTable ->
            updateOSI(
              (osi with activators = DataTable.updateSortStatus(osi.activators, colName, dir)))
          case InhibitorsTable ->
            updateOSI(
              (osi with inhibitors = DataTable.updateSortStatus(osi.inhibitors, colName, dir)))
          case ChannelBlockersTable ->
            updateOSI(
              (osi with channelBlockers =
                 DataTable.updateSortStatus(osi.channelBlockers, colName, dir)))
          case GatingInhibitorsTable ->
            updateOSI(
              (osi with gatingInhibitors =
                 DataTable.updateSortStatus(osi.gatingInhibitors, colName, dir)))
          case SubunitSpecificTable ->
            updateOSI(
              (osi with subunitSpecific =
                 DataTable.updateSortStatus(osi.subunitSpecific, colName, dir)))
          case AntibodiesTable ->
            updateOSI(
              (osi with subunitSpecific =
                 DataTable.updateSortStatus(osi.antibodies, colName, dir)))
          case OtherBindingLigandTable ->
            updateOSI(
              (osi with subunitSpecific =
                 DataTable.updateSortStatus(osi.other, colName, dir)))
          case SubstratesTable ->
            (objectInfo with objectSubstrates =
              DataTable.updateSortStatus(objectInfo.objectSubstrates, colName, dir))
          case CofactorsTable ->
            (objectInfo with objectCofactors =
              DataTable.updateSortStatus(objectInfo.objectCofactors, colName, dir))

        }
      case _ -> objectInfo
    }
  }

  switch(model) {
    case Just(objectInfo) -> Just(updtOI(objectInfo))
    case Nothing -> Nothing
  }
}

fun mainPage() {
  var initialModel = getInitialModel();
  runSimple("vdom_placeholder", initialModel, view, updt);
  template("Object Display")
}

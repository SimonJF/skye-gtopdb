open import Tables;
open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import Template;
open import Utility;
open import ItemTree;

# ADT describing the different types of target family.
typename TargetFamily =
  [| TFGpcr
   | TFIonChannel
   | TFNhr
   | TFCatalyticReceptor
   | TFTransporter
   | TFEnzyme
   | TFOther |];

fun showFamily(tf) {
  switch(tf) {
    case TFGpcr -> "G protein-coupled receptors"
    case TFIonChannel -> "Ion channels"
    case TFNhr -> "Nuclear hormone receptors"
    case TFCatalyticReceptor -> "Catalytic receptors"
    case TFTransporter -> "Transporters"
    case TFEnzyme -> "Enzymes"
    case TFOther -> "Other protein families"
  }
}

### MVU Functions
typename Model = Maybe((targetFamily: TargetFamily, itemTree: Tree(FamilyNode)));

fun updt(msg, model) {
  switch(model) {
    case Just(model) ->
      var newModel =
        switch(msg) {
          case ToggleSubtree(str) ->
            (model with itemTree=toggleTree(str, model.itemTree))
          case SetTreeVisibility(visibility) ->
            (model with itemTree=setTreeVisibility(visibility, model.itemTree))
        };
      Just(newModel)
    case Nothing -> Nothing
  }
}

fun view(model) {
  var hempty = MvuHTML.empty;

  var pageBody =
    switch(model) {
      case Just(model) ->
       ItemTree.renderPage(model.itemTree,
           showFamily(model.targetFamily), "/familyDisplay?familyId=")
      case Nothing ->
        div(class("contentboxfullhelp"),
          div(class("textright"),
            textNode("Invalid family ID specified.")))
    };


    div(class("grid_16 alpha"),
      a(name("top"), hempty) +*
      pageBody)

  }

fun getTree(targetFamily) {
  var (groupId, strict_type) =
    switch(targetFamily) {
      case TFGpcr -> (694, "")
      case TFIonChannel -> (689, "")
      case TFNhr -> (695, "")
      case TFCatalyticReceptor -> (862, "catalytic_receptor")
      case TFTransporter -> (691, "")
      case TFEnzyme -> (690, "")
      case TFOther -> (864, "")
    };
  getToplevelGroup(groupId, strict_type)
}

fun getTargetFamily(typeName) {
  if (typeName == "GPCR") {
    Just(TFGpcr)
  } else if (typeName == "IC") {
    Just(TFIonChannel)
  } else if (typeName == "NHR") {
    Just(TFNhr)
  } else if (typeName == "CATALYTICRECEPTOR") {
    Just(TFCatalyticReceptor)
  } else if (typeName == "TRANSPORTER") {
    Just(TFTransporter)
  } else if (typeName == "ENZYME") {
    Just(TFEnzyme)
  } else if (typeName == "OTHER") {
    Just(TFOther)
  } else {
    Nothing
  }
}

# SJF: It would be lovely to have a maybe monad? Maybe worth hacking one in?
sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("type", environment())) {
    case Nothing -> Nothing
    case Just(typeName) ->
      switch(getTargetFamily(typeName)) {
        case Nothing -> Nothing
        case Just(tfType) ->
          Just(targetFamily=tfType,
               itemTree=getTree(tfType))
      }
  }
}

fun mainPage() {
  var initialModel = getInitialModel();
  runSimple("vdom_placeholder", initialModel, view, updt);
  template("Target Families") # SJF TODO: Plumbing to get the type
}


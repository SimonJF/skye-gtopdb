open Tables;
open Mvu;
open MvuHTML;
open MvuAttrs;
open MvuEvents;
open Utility;

# ADT describing the different types of target family.
typename TargetFamily =
  [| TFGpcr
   | TFIonChannel
   | TFNhr
   | TFKinase
   | TFCatalyticReceptor
   | TFTransporter
   | TFEnzyme
   | TFOther |];

typename FamilyID = Int;

typename FamilyNode = (name: String, familyId: FamilyID);

fun mkFamilyNode(name, id) {
  (name=name, familyId=id)
}

typename HierarchicalQueryResult = (isGroup:Bool, name: String, familyId:FamilyID);
fun mkHqr(isGroup, name, id) {
  (isGroup=isGroup, name=name, familyId=id)
}

### MVU Functions

typename Model = (targetFamily: TargetFamily, itemTree: ItemTree(FamilyNode));
typename Message = [| ToggleSubtree:String |];

fun toggleSubtree(str, tree) {
  switch(tree) {
    case ItemNode(x) -> ItemNode(x)
    case ItemSubtree(name, shown, children) ->
      if (name == str) {
        ItemSubtree(name, not(shown), children)
      } else {
        ItemSubtree(name, shown, toggleSubtree(str, children))
      }
  }
}

fun updt(msg, model) {
  switch(msg) {
    case ToggleSubtree(str) ->
      (model with itemTree=toggleSubtree(str, model.tree))
  }
}



### DB Accessors

## PROBLEM: Recursive queries are alas not expressible.
## I wonder whether we can generalise the LINQ to allow
## hierarchical data access, through the use of the `CONNECT BY`
## statement...

# fun populateTree(groupId) {
#   for (g <-- Tables.grouping)
#     where (g.group_id == groupId)
#     orderby (g.display_order)
#     for (f <-- family)
#       where (f.family_id == g.family_id)
#       if (f.type == "grouping") {
#         var children = populateTree(f.family_id);
#         [ItemSubtree(f.name, true, children)]
#       } else {
#         [mkFamilyNode(f.name, f.family_id)]
#       }
# }


fun getGroupChildren(groupId) {
  for (g <-- Tables.grouping)
    where (g.group_id == groupId)
    orderby (g.display_order)
    for (f <-- family)
      where (f.family_id == g.family_id)
      [mkHqr(f.type == "grouping", f.name, f.family_id)]
}

sig resolveHierarchy : (HierarchicalQueryResult) ~> ItemTree(FamilyNode)
fun resolveHierarchy(hqr) {
  if (hqr.isGroup) {
    var resolved_hqrs = map(resolveHierarchy, getGroupChildren(hqr.familyId));
    ItemSubtree(hqr.name, true, resolved_hqrs)
  } else {
    ItemNode(mkFamilyNode(hqr.name, hqr.familyId))
  }
}

fun getGpcrs() {
}

fun getIonChannels() {
}

fun getNhrs() {
}

fun getKinases() {
}

fun getCatalyticReceptors() {
}

fun getTransporters() {
}

fun getEnzymes() {
}

fun getOtherProteins() {
}



fun mainPage(targetFamily) {
  page
    <html><h1>Hello, world!</h1></html>
}

open MvuAttrs;
open MvuHTML;

typename ContentBox(a) =
  (tboxName: String,  tboxVisible: Bool, tboxContents: a);


fun mkTBox(name, visible, contents) {
  (tboxName = name, tboxVisible = visible, tboxContents = contents)
}

fun boxContents(box) {
  box.tboxContents
}

fun setContents(box, contents) {
  (box with tboxContents = contents)
}

# showBox: Generic content box, supporting show/hide functionality.
# sig showBox : forall a. (ContentBox(a), Message, (a) ~> HTML(Message)) ~> HTML(Message)
fun showBox(box, toggleMsg, f) {
  var a0 = MvuAttrs.empty;
  var h0 = MvuHTML.empty;

  var inner = f(box.tboxContents);
  var showHideLink =
    if(box.tboxVisible) {
      a(id("hide_overview") +@ onClick(fun() { toggleMsg }),
        small(a0, textNode("Hide")))
    } else {
      a(id("show_overview") +@ onClick(fun() { toggleMsg }),
        small(a0, textNode("Show")))
    };

  var innerSection =
    if(box.tboxVisible) {
      div(class("visibleSection"), inner)
    } else {
      h0
    };

  div(class("grid_16 alpha"),
    h4(a0, textNode(box.tboxName)) +*
    div(class("contentboxfullhelp"),
      div(class("imageleft"), textNode("?")) +*
      div(class("textright"),
        p(class("split_para"), showHideLink) +*
        innerSection)))
}

fun toggleBox(box) {
  (box with tboxVisible=(not(box.tboxVisible)))
}

fun setBoxVisibility(box, visible) {
  (box with tboxVisible=visible)
}


open MvuHTML;
open MvuAttrs;
open MvuEvents;

# A generic sortable table.
typename TableID = Int;
typename ColumnName = String;
typename SortDirection = [| Ascending | Descending |];
typename SortStatus = [| Unsorted | Sorted:(ColumnName, SortDirection) |];

typename DataTable(data, msg) =
  ( tableId: Int,
    tableColumns: [(ColumnName, Bool)], # Bool: is sortable
    tableSortStatus: SortStatus,
    tableRows: [data],
    tableRenderRow : (data) {}~> HTML(msg),
    tableSortKey : (ColumnName, data) {}~> String,
    tableSortMsg: (ColumnName, SortDirection) {}~> msg );

var tableCounter =
  spawnClient {
    fun go(id) {
      receive {
        case FreshIdRequest(pid) ->
          pid ! FreshIdResponse(id);
          go(id + 1)
      }
    }
    go(0)
  };

fun freshTableId() {
  spawnWait {
    tableCounter ! FreshIdRequest(self());
    receive {
      case FreshIdResponse(x) -> x
    }
  }
}

sig makeTable : (
    [(ColumnName, Bool)],
    [data],
    (data) {}~> HTML(msg),
    (ColumnName, data) {}~> String,
    (ColumnName, SortDirection) {}~> msg) {}~> (TableID, DataTable(data, msg))
fun makeTable(cols, data, renderRow, sortKey, sortMsg) {
  var id = freshTableId();
  (id,
   (tableId = id,
    tableColumns = cols,
    tableSortStatus = Unsorted,
    tableRows = data,
    tableRenderRow = renderRow,
    tableSortKey = sortKey,
    tableSortMsg = sortMsg
  ))
}

sig renderTable :
  (DataTable(data, msg)) {}~> HTML(msg)
fun renderTable(tbl) {
  var a0 = MvuAttrs.empty;
  var sortedData = {
    switch(tbl.tableSortStatus) {
      case Unsorted -> tbl.tableRows
      case Sorted(name, Ascending) ->
        sortBy(fun(x) { tbl.tableSortKey(name, x) }, tbl.tableRows)
      case Sorted(name, Descending) ->
        reverse(sortBy(fun(x) { tbl.tableSortKey(name, x) }, tbl.tableRows))
    }
  };

  fun renderHeader((name, sortable)) {
    if (sortable) {
      var sortMsg =
        if (tbl.tableSortStatus == Sorted(name, Ascending)) {
          tbl.tableSortMsg(name, Descending)
        } else {
          tbl.tableSortMsg(name, Ascending)
        };
      var sorterClass =
        if (tbl.tableSortStatus == Sorted(name, Ascending)) {
          "tablesorter-headerAsc"
        } else if (tbl.tableSortStatus == Sorted(name, Descending)) {
          "tablesorter-headerDesc"
        } else {
          ""
        };

      th(class("tablesorter-header " ^^ sorterClass)
          +@ style("border-style:solid solid solid solid;")
          +@ onClick(fun() { sortMsg }),
          textNode(name))
    } else {
      th(class("tablesorter-noSort")
          +@ style("border-style:solid solid solid solid;"),
          textNode(name))
    }
  }

  var headers = MvuHTML.concat(map(renderHeader, tbl.tableColumns));
  var renderedRows = MvuHTML.concat(map(tbl.tableRenderRow, tbl.tableRows));

  table_(class("tablesorter inner_receptor_data_tables"),
      thead(a0,
        tr(class("info heading"), headers)) +*
      tbody(name("toggle"), renderedRows))
}

sig updateSortStatus: (DataTable(d, m), ColumnName, SortDirection) {}-> DataTable(d, m)
fun updateSortStatus(t, colNum, dir) {
  (t with tableSortStatus = Sorted(colNum, dir))
}


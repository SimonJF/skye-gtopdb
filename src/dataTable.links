open MvuHTML;
open MvuAttrs;
open MvuEvents;
open Utility;

# A generic sortable table.
typename ColumnName = String;
typename SortDirection = [| Ascending | Descending |];
typename SortStatus = [| Unsorted | Sorted:(ColumnName, SortDirection) |];

typename ColumnSpec(a) =
  [| NotSortable | Sortable:((a, a) {}~> Int) |];

  # tableColumns: also takes a CSS class. Maybe better to generalise this?
typename SortableTable(data, msg) =
  ( tableColumns: [(ColumnName, (String, ColumnSpec(data)))],
    tableSortStatus: SortStatus,
    tableRows: [data],
    tableSortMsg: (ColumnName, SortDirection) {}~> msg );

sig makeTable : (
    [(ColumnName, (String, ColumnSpec(data)))],
    [data],
    (ColumnName, SortDirection) {}~> msg) {}~> SortableTable(data, msg)
fun makeTable(cols, data, sortMsg) {
  (tableColumns = cols,
   tableSortStatus = Unsorted,
   tableRows = data,
   tableSortMsg = sortMsg)
}

sig renderTable :
  (SortableTable(data, msg),
   (data) {}~> HTML(msg)) {}~> HTML(msg)
fun renderTable(tbl, renderRow) {
  var a0 = MvuAttrs.empty;
  var sortedData = {
    fun sortByCol(colName) {
      switch (lookup(colName, tbl.tableColumns)) {
        case Nothing -> tbl.tableRows
        case Just((_, NotSortable)) -> tbl.tableRows
        case Just((_, Sortable(comparator))) ->
          cmpSort(fun(x, y) { comparator(x, y) }, tbl.tableRows)
      }
    }

    switch(tbl.tableSortStatus) {
      case Unsorted -> tbl.tableRows
      case Sorted(name, Ascending) ->
        sortByCol(name)
      case Sorted(name, Descending) ->
        reverse(sortByCol(name))
    }
  };

  fun renderHeader((name, (colClass, colSpec))) {
    var sortable = colSpec <> NotSortable;

    if (sortable) {
      var sortMsg =
        if (tbl.tableSortStatus == Sorted(name, Ascending)) {
          tbl.tableSortMsg(name, Descending)
        } else {
          tbl.tableSortMsg(name, Ascending)
        };
      var sorterClass =
        if (tbl.tableSortStatus == Sorted(name, Ascending)) {
          "tablesorter-headerAsc"
        } else if (tbl.tableSortStatus == Sorted(name, Descending)) {
          "tablesorter-headerDesc"
        } else {
          ""
        };

      th(class(colClass ^^ " header tablesorter-header " ^^ sorterClass)
          +@ style("border-style:solid solid solid solid;")
          +@ onClick(fun() { sortMsg }),
          textNode(name))
    } else {
      th(class("tablesorter-noSort")
          +@ style("border-style:solid solid solid solid;"),
          textNode(name))
    }
  }

  var headers = MvuHTML.concat(map(renderHeader, tbl.tableColumns));
  var renderedRows = MvuHTML.concat(map(renderRow, sortedData));

  if (tbl.tableRows == []) {
    MvuHTML.empty
  } else {
    table_(class("tablesorter inner_receptor_data_tables"),
      thead(a0,
        tr(class("info heading"), headers)) +*
      tbody(a0, renderedRows))

  }
}

sig updateSortStatus: (SortableTable(d, m), ColumnName, SortDirection) {}~> SortableTable(d, m)
fun updateSortStatus(t, colNum, dir) {
  (t with tableSortStatus = Sorted(colNum, dir))
}

sig updateTableData : (SortableTable(d, m), [d]) ~> SortableTable(d, m)
fun updateTableData(tbl, newData) {
  (tbl with tableRows = newData)
}

sig getTableData : (SortableTable(d, m)) ~> [d]
fun getTableData(tbl) { tbl.tableRows }


var preludeSpan = span;
open MvuHTML;
open MvuAttrs;
open Mvu;
open Tables;
open Template;
open Parser;
open RenderMarkup;

# Data model
typename Filter = [|
    Approved
  | SyntheticOrganic
  | Metabolite
  | NaturalProduct
  | EndogenousPeptide
  | OtherPeptide
  | Inorganic
  | Antibody
  | Labelled
|];

var filterNames = [
    ("Approved", (Approved, "Approved")),
    ("SyntheticOrganic", (SyntheticOrganic, "Synthetic organic")),
    ("Metabolite", (Metabolite, "Metabolite")),
    ("NaturalProduct", (NaturalProduct, "Natural product")),
    ("EndogenousPeptide", (EndogenousPeptide, "Endogenous peptide")),
    ("OtherPeptide", (OtherPeptide, "Other peptide")),
    ("Inorganic", (Inorganic, "Inorganic")),
    ("Antibody", (Antibody, "Antibody")),
    ("Labelled", (Labelled, "Labelled"))
];

fun tyStringToFilter(tyString) {
  switch (lookup(tyString, filterNames)) {
    case Just((filter, _)) -> filter
    case Nothing -> Approved
  }
}

typename LigandResult =
  (lrId: Int,
   lrName: Markup,
   lrApproved:Bool,
   lrRadioactive: Bool,
   # lrType=String,
   lrHasPDB: Bool,
   lrLabelled: Bool,
   lrImmuno: Bool,
   lrMalaria: Bool,
   lrSynonyms: [Markup]);

fun predicate(ligand, filterType) {
  switch (filterType) {
    case Approved -> ligand.approved
    case SyntheticOrganic -> ligand.type == "Synthetic organic"
    case Metabolite -> ligand.type == "Metabolite"
    case NaturalProduct -> ligand.type == "Natural product"
    case EndogenousPeptide -> false # FIXME: Complex query
    case OtherPeptide -> false # FIXME: Complex query
    case Inorganic -> ligand.type == "Inorganic"
    case Antibody -> ligand.type == "Antibody"
    case Labelled -> ligand.labelled
  }
}

var alphabet = map(fun(c) { chr(c) }, [65..90]);

sig getLigands : (Filter) ~> [(Char, [LigandResult])]
fun getLigands(filterType) {
  var res =
    query {
      for (l <-- Tables.ligand)
        where (predicate(l, filterType))
          [
            (id= l.ligand_id,
             name = l.name,
             approved = l.approved,
             radioactive = l.radioactive,
             labelled = l.labelled,
             immuno = l.in_gtip,
             malaria = l.in_gtmp,
             hasPDB =
               length(
                 for (p <-- pdb_structure)
                  where (p.ligand_id == l.ligand_id)
                  [ p ]) > 0,
             synonyms =
              for (l2s <-- Tables.ligand2synonym)
                where (l2s.ligand_id == l.ligand_id && l2s.display)
                  [l2s.synonym]
            )
          ]
    };

  # We need to be able to alphabetise ligand names. However, these
  # may contain things like &alpha; and &beta; tags, capital letters,
  # [], numbers...
  # We need to strip this junk from the beginning. We'll also need this
  # when we actually alphabetise, so store the stripped (and lowercased)
  # comparison string, too.
  var withCmp  = map(fun(lr) {
        # Firstly, strip &..; tags
        var cmpName = (lr.name =~ s/&.*;//) : String;
        var cmpName = dropWhile(fun(c) {
            not(('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z'))
        }, map(toLower, explode(cmpName)));
        (cmpName, lr)
  }, res);

  var withCmp =
    # TODO: Need to be smarter when alphabetising
    sortBy(fun((cmpName, _)) { cmpName }, withCmp);

  # Now, perform the necessary parsing and such
  var withCmp =
    map(fun((cmp, l)) {
      (cmp,
        (lrId = l.id,
          lrName = MarkupText(l.name),# parseOrError(l.name),
          lrApproved = l.approved,
          lrRadioactive = l.radioactive,
          lrLabelled = l.labelled,
          lrImmuno = l.immuno,
          lrMalaria = l.malaria,
          lrHasPDB = l.hasPDB,
          lrSynonyms = map(fun(x) { MarkupText(x) }, l.synonyms))) # map(parseOrError, l.synonyms))
      }, withCmp);

  # Finally, alphabetise
  var (chunks, _) =
    fold_left(fun((chunks, remaining), letter) {
        fun safeCmp(exploded) {
          switch(exploded) {
            case [] -> true # Dirty data -- take it anyway
            case x :: _ ->
              x == toLower(letter)
          }
        }
        var (thisChunk, next) = preludeSpan(fun((cmp, _)) { safeCmp(cmp) }, remaining);
        ((letter, (map(second, thisChunk))) :: chunks, next)
    }, ([], withCmp), alphabet);
  reverse(chunks)
}

# Results: an alphabetised list
typename Model = (filterType: Filter, results: [(Char, [LigandResult])]);

fun view(model) {
  var menu = {
    fun makeMenuItem((requestName, (filterType, renderName))) {
      var liAttrs = if (filterType == model.filterType) {
        class("active")
      } else {
        MvuAttrs.empty
      };

      li(liAttrs,
        a(href("/ligandList?type=" ^^ requestName), textNode(renderName))
      )
    }
    var menuItems = MvuHTML.concat(map(makeMenuItem, filterNames));
    div(id("cssmenu"),
      ul(MvuAttrs.empty, menuItems))
  };
  var aToZ = {
    fun link(char) {
      var char = implode([char]);
      a(style("font-weight:bold;font-size:110%") +@ href("#" ^^ char), textNode(char ^^ " "))
    }
    p(style("text-align:center;"), MvuHTML.concat(map(link, alphabet)))
  };
  var topLink = a(name("top"), MvuHTML.empty);

  var dataTable = {
    # TODO: These should be in the standard library
    fun src(val) { MvuAttrs.attr("src", val) }
    fun alt(val) { MvuAttrs.attr("alt", val) }
    fun valign(val) { MvuAttrs.attr("valign", val) }
    fun colspan(val) { MvuAttrs.attr("colSpan", val) }
    fun width(val) { MvuAttrs.attr("width", val) }
    fun height(val) { MvuAttrs.attr("height", val) }

    fun makeRow(lr) {
      fun boolImage((imgSrc, enabled, altText)) {
        if (enabled) {
          td(class("info") +@
             style("border-style: solid none solid none;padding:1px;text-align:center;vertical-align: middle;"),
            a(style("color:white") +@ title(altText),
              img(src(imgSrc) +@ width("16") +@ height("16") +@ alt(altText), MvuHTML.empty)))
        } else {
          td(class("info") +@
             style("border-style: solid none solid none;padding:1px;text-align:center;vertical-align: middle;"),
             MvuHTML.empty
          )
        }
      }

      var name =
        td(class("info") +@
           style("border-style: solid dotted solid solid; font-size:97%; text-wrap:normal; overflow-wrap:break-word; word-break: break-all;") +@
           valign("baseline"),
           a(href("/ligandDisplay?ligandId=" ^^ intToString(lr.lrId)), renderSimple(lr.lrName)));

      var images =
        MvuHTML.concat(map(boolImage,
          [("/images/approved.png", lr.lrApproved, "Approved drug"),
           ("/images/probe.png", lr.lrLabelled, "Ligand is labelled"),
           ("/images/rad.gif", lr.lrRadioactive, "Ligand is radioactive"),
           ("/images/protein_structure_icon.png", lr.lrHasPDB, "Ligand has a PDB structure"),
           ("/images/immuno_ligand.png", lr.lrImmuno, "Immunopharmacology ligand"),
           ("/images/mosquito.jpg", lr.lrMalaria, "Antimalarial ligand")]));

      var id =
        td(class("info"), textNode(intToString(lr.lrId)));

      var synonyms =
        td(class("info") +@
           style(" font-size:97%;  text-wrap:normal; overflow-wrap:break-word; word-break: break-all;") +@
           valign("baseline"),
          MvuHTML.concat(join([textNode(", ")], map(fun(x) { [renderSimple(x)] }, lr.lrSynonyms))));
      tr(MvuAttrs.empty, name +* images +* id +* synonyms)
    }

    fun renderLetterRow((letter, results)) {
      var letter = implode([letter]);
      tr(MvuAttrs.empty,
           td(class("info") +@ style("border-right:none;") +@ colspan("8"),
             a(style("font-size:110%;font-weight:bold;color:red;") +@ name(letter), textNode(letter))
           ) +*
           td(class("info") +@ style("text-align:right; border-left:none;"),
             a(style("font-weight:normal;font-size:95%;") +@ href("#top"), textNode("Back to top"))
       )) +*
      MvuHTML.concat(map(makeRow, results)) +*
      tr(MvuAttrs.empty, td(colspan("9"), MvuHTML.empty))
    }

    var rows = MvuHTML.concat(map(renderLetterRow, model.results));
     # TODO: Separate this out for all letters
    table_(class("receptor_data_tables") +@ style("table-layout: fixed; width:100%; margin:0px; padding:0px;"),
      colgroup(MvuAttrs.empty,
        col(style("min-width:200px;width:300px;"), MvuHTML.empty) +*
        col(style("min-width:17px;width:17px;"), MvuHTML.empty) +*
        col(style("min-width:15px;width:15px;"), MvuHTML.empty) +*
        col(style("min-width:19px;width:19px;"), MvuHTML.empty) +*
        col(style("min-width:19px;width:19px;"), MvuHTML.empty) +*
        col(style("min-width:18px;width:18px;"), MvuHTML.empty) +*
        col(style("min-width:23px;width:23px;"), MvuHTML.empty) +*
        col(style("min-width:50px;width:50px;"), MvuHTML.empty) +*
        col(style("min-width:450px;"), MvuHTML.empty)
      ) +*
    thead(MvuAttrs.empty,
      tr(MvuAttrs.empty,
        td(class("heading") +@ colspan("7"), textNode("Ligand name")) +*
        td(class("heading"), textNode("ID")) +*
        td(class("heading"), textNode("Synonyms"))
      )
    ) +*
    tbody(MvuAttrs.empty, rows)
    )
  };


  div(class("grid_16 alpha"),
      topLink +*
      h4(MvuAttrs.empty, textNode("The IUPHAR/BPS Guide to PHARMACOLOGY complete ligand list")) +*
      div(class("contentboxfullhelp"),
        menu +*
        div(class("data_tables_container") +@ style("padding-top:20px;"),
          div(class("ligcontainer"),
            div(class("ligcentre"),
              # TODO: This only makes sense for "Approved" at the moment -- where is this defined?
              textNode("All ligands in the database which are currently, or have been in the past, approved for human clinical use by a regulatory agency."))) +*
            aToZ +*
            dataTable
    )))
}

fun getInitialModel() {
  var filterType = switch(lookup("type", environment())) {
    case Just(tyString) -> tyStringToFilter(tyString)
    case Nothing -> Approved
  };
  var results = getLigands(filterType);
  (filterType=filterType, results=results)
}


fun mainPage() {
  runStatic("vdom_placeholder", getInitialModel(), view);
  template("Ligand list")
}


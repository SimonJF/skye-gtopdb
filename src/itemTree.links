open import MvuHTML;
open import MvuAttrs;
open import Tables;

typename ItemTreeNode(a) =
  [| ItemNode:a | ItemSubtree:(String, Bool, [ItemTreeNode(a)]) |];

typename Tree(a) = (root: ItemTreeNode(a));

typename Message = [| ToggleSubtree:String | SetTreeVisibility:Bool |];

typename FamilyID = Int;

typename FamilyNode = (name: String, familyId: FamilyID);

fun mkFamilyNode(name, id) {
  (name=name, familyId=id)
}

typename HierarchicalQueryResult = (isGroup:Bool, displayOrder:Int, name: String, familyId:FamilyID);
fun mkHqr(isGroup, order, name, id) {
  (isGroup=isGroup, displayOrder=order, name=name, familyId=id)
}

fun toggleSubtree(str, tree) {
  switch(tree) {
    case ItemNode(x) -> ItemNode(x)
    case ItemSubtree(name, shown, children) ->
      if (name == str) {
        ItemSubtree(name, not(shown), children)
      } else {
        ItemSubtree(name, shown, map(fun(x) { toggleSubtree(str, x) }, children))
      }
  }
}

fun toggleTree(str, tree) {
  (root = toggleSubtree(str, tree.root))
}

fun setSubtreeVisibility(isVisible, tree) {
  switch(tree) {
    case ItemNode(x) -> ItemNode(x)
    case ItemSubtree(name, _, children) ->
        ItemSubtree(name, isVisible,
          map(fun(x) { setSubtreeVisibility(isVisible, x) }, children))
  }
}

fun setTreeVisibility(isVisible, tree) {
  (root = setSubtreeVisibility(isVisible, tree.root))
}

### DB Accessors

## PROBLEM: Recursive queries are alas not expressible.
## I wonder whether we can generalise the LINQ to allow
## hierarchical data access, through the use of the `CONNECT BY`
## statement...

# TODO: Tradeoff performance vs. beauty here.
# TODO: How much faster is this in Postgres?
# fun populateTree(groupId) {
#   for (g <-- Tables.grouping)
#     where (g.group_id == groupId)
#     orderby (g.display_order)
#     for (f <-- family)
#       where (f.family_id == g.family_id)
#       if (f.type == "grouping") {
#         var children = populateTree(f.family_id);
#         [ItemSubtree(f.name, true, children)]
#       } else {
#         [mkFamilyNode(f.name, f.family_id)]
#       }
# }


fun getFamilyInfo(familyId) {
  query nested {
    for (f <-- Tables.family)
      where (f.family_id == familyId)
      [mkFamilyNode(f.name, f.family_id)]
  }
}

fun getGroupChildren(groupId) {
  query nested {
    for (g <-- Tables.grouping)
      where (g.group_id == groupId)
      for (f <-- Tables.family)
        where (f.family_id == g.family_id)
        [mkHqr(f.type == "grouping", g.display_order, f.name, f.family_id)]
  }
}

sig resolveHierarchy : (HierarchicalQueryResult) ~> ItemTreeNode(FamilyNode)
fun resolveHierarchy(hqr) {
  if (hqr.isGroup) {
    var sortedChildren = sortBy(fun(x) { x.displayOrder }, getGroupChildren(hqr.familyId));
    var resolvedHqrs = map(resolveHierarchy, sortedChildren);
    ItemSubtree(hqr.name, true, resolvedHqrs)
  } else {
    ItemNode(mkFamilyNode(hqr.name, hqr.familyId))
  }
}

# Assumption: groupId is a valid family ID
fun getToplevelGroup(groupId) {
  var familyInfo = hd(getFamilyInfo(groupId));
  var sortedChildren = sortBy(fun(x) { x.displayOrder }, getGroupChildren(groupId));
  var children = map(resolveHierarchy, sortedChildren);
  (root = ItemSubtree(familyInfo.name, true, children))
}

### Rendering

fun renderPage(tree, familyName, urlPrefix) {
  var a0 = MvuAttrs.empty;
  var hempty = MvuHTML.empty;

  fun renderTree(tree) {
    fun renderTreeNode(tree) {
      switch(tree) {
        case ItemNode(x) ->
          li(class("liBullet"),
            span(class("bullet"), textNode(" ")) +*
            a(href(urlPrefix ^^ intToString(x.familyId)),
              unescapedTextNode(x.name))
          )
        case ItemSubtree(name, shown, children) ->
          var bulletClass = class(if (shown) { "liOpen" } else { "liClosed" });
          var renderedChildren = MvuHTML.concat(map(renderTreeNode, children));
          li(bulletClass,
            span(class("bullet") +@ onClick(fun() { ToggleSubtree(name) }), unescapedTextNode(" " ^^ name)) +*
            ul(a0, renderedChildren))
      }
    }


    # Render the root
    fun rootSpan(name) { span(class("tree_root_node"), unescapedTextNode(" " ^^ name)) } 

    switch (tree.root) {
      case ItemNode(x) ->
        # Unlikely to happen, but hey
        li(class("liBullet"), rootSpan(x.name))
      case ItemSubtree(name, shown, children) ->
        var renderedChildren =  MvuHTML.concat(map(renderTreeNode, children));
        var bulletClass = class(if (shown) { "liOpen" } else { "liClosed" });
        li(bulletClass,
           span(class("bullet") +@ onClick(fun() { ToggleSubtree(name) }), rootSpan(name)) +*
           ul(a0, renderedChildren))
    }
  }


  h4(a0, textNode(familyName)) +*
  div(class("contentboxfullhelp"),
    div(class("textright"),
      p(a0, hempty) +*
      div(style("text-align:right;"),
        button(onClick(fun() { SetTreeVisibility(true) }),
          textNode("Expand all nodes")) +*
        button(onClick(fun() { SetTreeVisibility(false) }),
          textNode("Collapse all nodes"))) +*
        ul(class("mktree"), renderTree(tree))))
}

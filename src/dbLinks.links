open import Utility;
open import Species;
import MvuHTML;
import MvuAttrs;

typename URL = String;
typename DatabaseLink = (
  dbID: Int,
  dbName: String,
  dbURL: URL,
  dbSpecialist: Bool,
  dbPrefix: String,
  dbEntries: [(SpeciesID, String, URL)]
);

fun transformDatabaseLinks(dbls) {
  var dbIDs = map(fun(x) { x.database_id }, dbls);
  var dbPred = contains(dbIDs);
  var dbMap = query nested {
    for (db <-- Tables.tbl_database)
      where (dbPred(db.database_id))
        [(db.database_id, db)]
  };
  var groupedDBLs =
    groupBy(fun(dbl) { dbl.database_id }, dbls);

  listConcatMap(fun((dbID, dbls)) {
    switch (lookup(dbID, dbMap)) {
      case Nothing ->
        debug("Invalid DB ID: " ^^ intToString(dbID));
        []
      case Just(db) ->
        var entries =
          map(fun(dbl) { (dbl.species_id, dbl.placeholder,
                replacePlaceholder(db.url, dbl.placeholder)) }, dbls);

        [(dbID = db.database_id,
          dbName = db.name, dbURL = db.url, dbSpecialist = db.specialist,
          dbPrefix = db."prefix",
          dbEntries = entries)]
    }
  }, groupedDBLs)
}

fun renderDatabaseLinks(dbLinks, speciesMap) {
  open MvuHTML;
  open MvuAttrs;

  var a0 = MvuAttrs.empty;
  var h0 = MvuHTML.empty;

  fun renderDBLink(dbl) {
    fun renderLink((speciesID, code, url)) {
      a(href(url),
        textNode(dbl.dbPrefix ^^ code)) +*
      textNode(" (" ^^ resolveSpeciesShortName(speciesID, speciesMap) ^^ ")")
    }
    var renderedLinks =
      MvuHTML.concat(
        join([textNode(", ")],
              map(fun(l) { [renderLink(l)] }, dbl.dbEntries)));

    tr(a0,
      td(class("info") +@ style("min-width:250px;max-width:250px;width:250px;"),
        textNode(dbl.dbName)) +*
      td(class("info"), renderedLinks))
  }

  var (specialist, others) =
    partition(fun(dbl) { dbl.dbSpecialist }, dbLinks);
  var specialist = sortBy(fun(db) { db.dbName }, specialist);
  var others = sortBy(fun(db) { db.dbName }, others);
  fun dbLinkHeader(text) {
    tr(a0,
      td(class("info") +@ colSpan(2) +@
        style("font-style: italic; font-weight: bold;"),
        textNode(text)))
  }
  var renderedSpecialists =
    if (specialist == []) { MvuHTML.empty } else {
      dbLinkHeader("Specialist Databases") +*
      MvuHTML.concatMap(renderDBLink, specialist)
    };
  var renderedOthers =
    if (others == []) { MvuHTML.empty } else {
      dbLinkHeader("Other Databases") +*
      MvuHTML.concatMap(renderDBLink, others)
    };

  if (listEmpty(dbLinks)) {
    MvuHTML.empty
  } else {
    a(name("DatabaseLinks"), h0) +*
    table_(class("receptor_data_tables fullwidth"),
      tr(a0,
        td(class("info category") +@ colSpan(2), textNode("Database Links"))) +*
      renderedSpecialists +*
      renderedOthers)
  }
}

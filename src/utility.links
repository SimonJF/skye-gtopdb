# Hacks necessary due to module system :(
fun listEmpty(xs) { empty(xs) }
fun listSpan(f, xs) { span(f, xs) }
fun listConcatMap(f, xs) { concatMap(f, xs) }
fun listConcat(xs) { concat(xs) }
fun listElem(x, xs) { elem(x, xs) }
fun listContains(x, xs) { elem(x, xs) }
## Useful in defining list predicates in LINQ.
# sig contains : ([a]) ~> ((a) {}-> Bool)
# fun contains(l) {
#   switch (l) {
#     case [] -> fun (x) {false}
#     case x::xs -> fun (y) { x == y || contains(xs)(x) }
#   }
# }
open import MvuHTML;
open import MvuAttrs;

sig contains : ([a]) ~> ((a) {}-> Bool)
fun contains(xs) {
  fun containsInner(xs, q) {
    switch(xs) {
      case [] -> q
      case x :: xs ->
        containsInner(xs, fun(y) {
          x == y || q(y)
        })
    }
  }

  containsInner(xs, fun(_) { false })
}

sig containsRegex : ([String]) ~> ((String) {}-> Bool)
fun containsRegex(xs) {
  fun containsInner(xs, q) {
    switch(xs) {
      case [] -> q
      case x :: xs ->
        containsInner(xs, fun(y) {
          (y =~ /{x}/) || q(y)
        })
    }
  }

  containsInner(xs, fun(_) { false })
}


sig uniquify : ([a]) ~> [a]
fun uniquify(xs) {
  fun uniqueCons(x, xs) {
    if (elem(x, xs)) {
      xs
    } else {
      x :: xs
    }
  }

  reverse(fold_left(fun(xs, x) { uniqueCons(x, xs) }, [], xs))
}

#sig elemBy : ((a, a) ~> Bool, a, [a]) ~> Bool
fun elemBy(f, x, xs) {
  switch(xs) {
    case [] -> false
    case y :: ys -> if (f(x, y)) { true } else { elemBy(f, x, ys) }
  }
}

#sig uniquifyBy : ((a, a) ~> Bool, [a]) ~> [a]
fun uniquifyBy(f, xs) {

  fun uniqueCons(x, xs) {
    if (elemBy(f, x, xs)) {
      xs
    } else {
      x :: xs
    }
  }
  reverse(fold_left(fun(xs, x) { uniqueCons(x, xs) }, [], xs))
}


fun cmpName(name) {
  # Firstly, strip &..; tags
  var cmpName = (name =~ s/&.*;//) : String;
  dropWhile(fun(c) {
      not(('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z'))
  }, map(toLower, explode(cmpName)))
}

var alphabet = map(fun(c) { chr(c) }, [65..90]);

# Preconditions:
# 1. List is sorted
# 2. The (a) -> Char function returns an alphabetical character
sig alphabetise : (((a) ~%~> [Char]), ((a) ~%~> b), [a]) ~%~> [(Char, [b])]
fun alphabetise(getString, transform, xs) {
  var (chunks, _) =
    fold_left(fun((chunks, remaining), letter) {
        fun safeCmp(exploded) {
          switch(exploded) {
            case [] -> true # Dirty data -- take it anyway
            case x :: _ ->
              x == toLower(letter)
          }
        }
        var (thisChunk, next) = listSpan(fun(x) { safeCmp(getString(x)) }, remaining);
        ((letter, (map(transform, thisChunk))) :: chunks, next)
    }, ([], xs), alphabet);
  reverse(chunks)
}

fun src(s) { MvuAttrs.attr("src", s) }
fun alt(s) { MvuAttrs.attr("alt", s) }
fun role(s) { MvuAttrs.attr("role", s) }

fun boolCol(enabled, html) {
  if (enabled) {
    td(class("info") +@
       style("border-style: solid none solid none;padding:1px;text-align:center;vertical-align: middle;"),
       html)
  } else {
    td(class("info") +@
       style("border-style: solid none solid none;padding:1px;text-align:center;vertical-align: middle;"),
       MvuHTML.empty
    )
  }
}

fun boolImage((imgSrc, enabled, altText)) {
  boolCol(enabled,
    a(style("color:white") +@ title(altText),
      img(src(imgSrc) +@ width("16") +@ height("16") +@ alt(altText), MvuHTML.empty)))
}

sig partition : ((a) ~b~> Bool, [a]) ~b~> ([a], [a])
fun partition(pred, xs) {
  fun go(ayes, noes, xs) {
    switch(xs) {
      case [] -> (ayes, noes)
      case x :: xs ->
        if (pred(x)) {
          go(x :: ayes, noes, xs)
        } else {
          go(ayes, x :: noes, xs)
        }
    }
  }
  go([], [], xs)
}

fun referenceCmp(rs1, rs2) {
  switch((rs1, rs2)) {
    case ([], []) -> 0
    case (xs, []) -> (-1)
    case ([], ys) -> 1
    case (x :: xs, y :: ys) ->
      if (x < y) { (-1) }
      else if (x == y) { 0 }
      else { 1 }
  }
}
# This only works because we have arbitrary polymorphic comparisons.
sig simpleCmp : forall a, e :: Row. (a, a) -e-> Int
fun simpleCmp(s1, s2) {
  if (s1 < s2) {
    (-1)
  } else if (s1 == s2) {
    0
  } else {
    1
  }
}

sig cmpSort : ((a, a) ~b~> Int, [a]) ~b~> [a]
fun cmpSort(comparator, l) {
  # TBD: rename this 'sortOn' to follow Haskell usage?
  switch (l) {
    case [] -> []
    case x::xs -> {
      var lt = filter (fun (y) {comparator(y, x) < 0 }, xs);
      var ge = filter (fun (y) {comparator(y, x) >= 0 }, xs);
      cmpSort(comparator, lt) ++ [x] ++ cmpSort(comparator, ge)
    }
  }
}

fun colSpan(n) {
  MvuAttrs.attr("colSpan", intToString(n))
}

fun rowSpan(n) {
  MvuAttrs.attr("rowSpan", intToString(n))
}

fun align(val) {
  MvuAttrs.attr("align", val)
}

fun valign(val) {
  MvuAttrs.attr("vAlign", val)
}

fun target(val) {
  MvuAttrs.attr("target", val)
}

fun groupBy(f, xs) {
  fun go(acc, rest) {
    switch(rest) {
      case [] -> acc
      case x :: xs ->
        var (group, others) = partition(fun(y) { f(y) == f(x) }, rest);
        go((f(x), group) :: acc, others)
    }
  }
  go([], xs)
}

fun replacePlaceholder(url, code) {
  (url =~ s/\$PLACEHOLDER/{code}/ )
}

sig safeHead : ([a], a) ~> a
fun safeHead(xs, def) {
  switch(xs) {
    case [] -> def
    case x :: xs -> x
  }
}

fun filterMap(f, xs) {
  listConcatMap(fun(x) {
    switch(f(x)) {
      case Just(x) -> [x]
      case Nothing -> []
    }
  }, xs)
}

# True if a given DB link has changed from the original DB capture
fun isChanged(proj, newVal, oldVals) {
  fun go(old) {
    switch(old) {
      case [] -> false
      case x :: xs ->
        if (proj(x) == proj(newVal)) {
          newVal <> x
        } else {
          go(xs)
        }
    }
  }
  go(oldVals)
}


# Copies logic from GtoPdb HighMedianLowNumber, with caveat
# that 0.0 and nulls are conflated.
fun getAverage(high, median, low) {
  if (high == 0.0 && median == 0.0 && low == 0.0) {
    0.0
  } else if (low == 0.0 && high <> 0.0) {
    if (median <> 0.0) {
      (median +. high) /. 2.0
    } else {
      high
    }
  } else if (low <> 0.0 && high == 0.0) {
    if (median <> 0.0) {
      (low +. median) /. 2.0
    } else {
      low
    }
  } else if (low == 0.0 && high == 0.0) {
    median
  } else {
    (low +. high) /. 2.0
  }
}

fun splitOnChar(str, chr) {
  var (chars, words) =
    fold_left(fun((chars, words), x) {
        if (x == chr) {
          ([], implode(reverse(chars)) :: words)
        } else {
          (x :: chars, words)
        }
      }, ([], []), explode(str));
  if (listEmpty(chars)) {
    reverse(words)
  } else {
    reverse(implode(reverse(chars)) :: words)
  }
}


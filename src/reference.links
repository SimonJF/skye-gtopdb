open MvuHTML;
open MvuAttrs;
open Utility;
open Tables;

typename ReferenceID = Int;
typename ReferenceNumber = Int;
typename ReferenceType = [| Journal | Other |];

typename Reference = (
  referenceId: ReferenceID,
  referenceType: String,
  journalName: String,
  title: String,
  year: Int,
  volume: String,
  issue: String,
  pages: String,
  publisher: String,
  publisher_address: String,
  editors: String,
  pubmedId: Int,
  isbn: String,
  authors: String,
  isKey: Bool # FIXME: This is a horrible hack and should be changed
);

fun stringToRefTy(str) {
  if (str == "Journal") {
    Journal
  } else {
    Other
  }
}
fun refTyToString(refTy) {
  switch(refTy) {
    case Journal -> "Journal"
    case Other -> "Other"
  }
}

fun makeReference(refId,
  refTy, jName, title, y, vol, issue, pgs, publisher,
  pubAddr, editors, pubmed_id, isbn, authors, isKey) {

  (
    referenceId=refId,
    referenceType=refTy, #stringToRefTy(refTy),
    journalName=jName,
    title=title,
    year=y,
    volume=vol,
    issue=issue,
    pages=pgs,
    publisher=publisher,
    publisher_address=pubAddr,
    editors=editors,
    pubmedId=pubmed_id,
    isbn=isbn,
    authors=authors,
    isKey=isKey
  )

}


fun renderCitation(id, refs) {
  var refId = switch(lookup(id, refs)) {
    case Just((refNum, _)) -> intToString(refNum)
    case Nothing -> "?"
  };

  var strId = intToString(id);
  textNode("[") +*
  a(href("#ref" ^^ refId), textNode(refId)) +*
  textNode("]")
}

#sig renderCitationList : ([Int], [(Int, (Int, Reference))]) ~%~> HTML(_)
fun renderCitationList(ids, refs) {
  fun citationLink(id) {
    switch(lookup(id, refs)) {
        case Just((refNum, _)) ->
          var refId = intToString(refNum);
          a(href("#ref" ^^ refId), textNode(refId))
        case Nothing -> textNode("?")
    }
  }

  if (length(ids) > 0) {
    var links = map(fun(i) { [citationLink(i)] }, ids);
    var separatedLinks =
      MvuHTML.concat(join([textNode(", ")], links));
    textNode("[") +* separatedLinks +* textNode("]")
  } else {
    MvuHTML.empty
  }
}

fun queryReferences(refIds) {
  if (refIds == []) { [] } else {
  var containsReference = contains(refIds);
  query {
  for (ref <-- Tables.reference)
    where (containsReference(ref.reference_id))
      [
        (makeReference(ref.reference_id,
             ref.type, ref.title, ref.article_title, ref.year,
             ref.volume, ref.issue, ref.pages, ref.publisher,
             ref.publisher_address, ref.editors, ref.pubmed_id,
             ref.isbn, ref.authors, false))
      ]
    }
  }
}


# Core rendering function for references.
fun renderReference(prefixNode, reference) {
  var a0 = MvuAttrs.empty;
  fun tn(x) { textNode(x) }
  var issueNode =
    if(reference.issue == "") {
      MvuHTML.empty
    } else {
      tn(" (" ^^ reference.issue ^^ ")")
    };
  var volumeNode =
    if (reference.volume == "") {
      MvuHTML.empty
    } else {
      b(a0, tn(reference.volume))
    };

  var pubMedHref =
    "javascript:newWindow('http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=AbstractPlus&list_uids="
    ^^ intToString(reference.pubmedId) ^^ "', 800, 500)";

  var pubMedNode =
    if (reference.pubmedId == (-1)) {
      MvuHTML.empty
    } else {
      tn("[PMID:") +*
      a(href(pubMedHref), tn(intToString(reference.pubmedId))) +*
      tn("]")
    };

  p(class("grac_text"),
    prefixNode
    +* tn(reference.authors)
    +* tn(". ")
    +* tn(reference.title)
    +* tn(". ")
    +* i(a0, tn(reference.journalName))
    +* tn(", ")
    +* volumeNode
    +* issueNode
    +* tn(": ")
    +* tn(reference.pages)
    +* tn(". ")
    +* pubMedNode)
}

# Render a reference list
fun displayReferences(refs) {
  MvuHTML.concat(map(fun((_, (i, ref))) {
    var prefixNode =
      a(id("ref" ^^ intToString(i)), MvuHTML.empty) +*
      textNode(intToString(i) ^^ ". ");
    renderReference(prefixNode, ref)}, refs))
}

fun mkReferenceData(refList) {
  mapi(fun(ref, i) { (ref.referenceId, (i + 1, ref)) },
    sortBy(fun(ref) { ref.authors }, refList))
}

fun renderReferencesBox(showRefs, refs, toggleMsg) {
  var a0 = MvuAttrs.empty;
  var inner = displayReferences(refs);
  var showHideLink =
    if(showRefs) {
      a(id("hide_overview") +@ onClick(toggleMsg),
        small(a0, textNode("Hide")))
    } else {
      a(id("show_overview") +@ onClick(toggleMsg),
        small(a0, textNode("Show")))
    };

  var innerSection =
    if(showRefs) {
      div(class("visibleSection"), inner)
    } else {
      MvuHTML.empty
    };

  div(class("grid_16 alpha"),
    h4(a0, textNode("References")) +*
    div(class("contentboxfullhelp"),
      div(class("imageleft"), textNode("?")) +*
      div(class("textright"),
        p(class("split_para"), showHideLink) +*
        innerSection)))
}

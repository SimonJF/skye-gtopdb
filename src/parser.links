open import MonadicParser;
open import Utility;

# A simple parser for the GtoPdb markup.
# Limitations right now:
#  1. Cannot handle '<' and '>' characters which do not refer to tags

typename Attribute = (String, String);

typename Markup = [|
    MarkupEmpty
  | MarkupAppend:(Markup, Markup)
  | MarkupText:String
  | MarkupReferenceTag:Int
  | MarkupLigandTag:Int
  | MarkupHTMLTag:(String, [Attribute], Markup)
|];

typename ParseResult = [| OK:Markup | Error:String |];

fun mkHtmlTag(tagName, attrs, contents) {
  MarkupHTMLTag(tagName, attrs, contents)
}

# Useful parser combinators for us

# streamChar: runs of characters that are not used to start or end tags.
var streamChar = sat(fun(c) { c <> '<' && c <> '>' });
var noQuoteChar = sat(fun(c) { c <> '\"' });

var textStream =
  many1(streamChar) >>=
  fun(str) { return(MarkupText(implode(str))) };

var noQuotes =
  many1(noQuoteChar) >>=
  fun(str) { return(implode(str)) };

fun maybeSpaces() {
  many(space())
}

mutual {
  fun attribute() {
    spaces() >>
    nonEmptyWord() >>= fun (attrName) {
    maybeSpaces() >>
    char('=') >>
    maybeSpaces() >>
    (char(''') ++! char('\"')) >>= fun(quote) {
    noQuotes >>= fun (val) {
    char(quote) >>
    return((implode(attrName), val))
    }}}
  }

  fun htmlTag() {
    nonEmptyWord() >>= fun (tagName) {
    many(attribute()) >>= fun(attrs) {
    char('>') >>
    markup() >>= fun (contents) {
    stringE("</") >>
    string(tagName) >>
    char('>') >>
    return(mkHtmlTag(implode(tagName), attrs, contents))
    }}}
  }

  fun brTag() {
    (stringE("br>") ++!
     stringE("Br>") ++!
     stringE("br/>") ++!
     stringE("br />")) >>
    return(mkHtmlTag("br", [], MarkupEmpty))
  }

  fun referenceTag() {
    stringE("Reference") >>
    spaces() >>
    stringE("id") >>
    char('=') >>
    nat() >>= fun(id) {
    stringE("/>") >>
    return(MarkupReferenceTag(id))
    }
  }

  fun ligandTag() {
    stringE("Ligand") >>
    spaces() >>
    stringE("id") >>
    char('=') >>
    nat() >>= fun(id) {
    stringE("/>") >>
    return(MarkupLigandTag(id))
    }
  }

  fun tag() {
    char('<') >>
    brTag() ++! referenceTag() ++! ligandTag() ++! htmlTag()
  }

  sig markup : () {}~> Parser(Markup)
  fun markup() {

    fun markupInner() {
      textStream ++!
      tag()
      # (char('>') >> return(MarkupText(">")))
      # (char('<') >> return(MarkupText("<")))
    }

    many(markupInner()) >>= fun(xs) {
      return(fold_right(fun(x, acc) { MarkupAppend(x, acc) }, MarkupEmpty, xs))
    }
  }
}

fun parse(str) {
  switch((markup())(explode(str))) {
    case [] -> Error("Nothing matched.")
    case [(markup, [])] -> OK(markup)
    case [(markup, xs)] -> Error("Unconsumed input: " ^^ implode(xs))
    case xs -> Error("Ambiguous parse: " ^^ (show(xs)))
  }
}

# Given some markup, either parses it, or dumps it raw and displays
# the error.
fun parseOrError(str) {
  switch (parse(str)) {
    case OK(markup) -> markup
    case Error(str) ->
      MarkupAppend(MarkupText("Error: " ^^ str),
      MarkupAppend(MarkupHTMLTag("br", [], MarkupEmpty), MarkupText(str)))
  }
}

fun markupEmpty(m) {
  (m == MarkupEmpty) || (m == MarkupText(""))
}

# Very quick and dirty
fun markupCmp(m1, m2) {
  fun getText(m) {
    switch(m) {
      case MarkupAppend(m1, m2) ->
        getText(m1) ^^ getText(m2)
      case MarkupText(t) -> t
      case MarkupHTMLTag(_, _, m) -> getText(m)
      case _ -> ""
    }
  }

  simpleCmp(getText(m1), getText(m2))
}

var testStr =
  "<a href=\"FamilyDisplayForward?familyId=78#show_object_507\">TRPV1</a>) and <a href=\"FamilyDisplayForward?familyId=86\">PPARs</a> <Reference id=13694/><Reference id=2031/>. There is evidence for an allosteric site on the CB<sub>1</sub> receptor <Reference id=13695/>. All of the compounds listed as antagonists behave as inverse agonists in some bioassay systems <Reference id=14916/>. For some cannabinoid receptor ligands, additional pharmacological targets that include GPR55 and GPR119 have been
  identified <Reference id=14916/>. Moreover, <a href= \"FamilyDisplayForward?familyId=114\">GPR18, GPR55 and GPR119</a>, although showing little structural similarity to CB<sub>1</sub> and CB<sub>2 </sub>receptors, respond to endogenous agents that are structurally similar to the endogenous cannabinoid ligands <Reference id=14916/>.";

#parse("<b>hello, world!</b>")
parse(testStr)

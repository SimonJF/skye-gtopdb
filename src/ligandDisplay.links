open Ligand;
open MvuHTML;
open MvuAttrs;
open Mvu;
open Reference;
open Parser;
open RenderMarkup;
open Utility;
open Template;

# Not implemented yet:
# Drug / prodrug relations (prodrug table)
# Peptide info (medical relevance / gene info)


typename Tab =
  [| Summary | BiologicalActivity | ClinicalData | References
   | Structure | SimilarLigands | Malaria | Immuno |];


typename Message = [| ChangeTab:Tab |];

typename ApprovalSource = String;
typename LigandApproval = [| Approved:ApprovalSource | NotApproved |];

typename INN = (innNumber: Int, inn: String);

typename Synonym = (synonymName: Markup, synonymRefs: [ReferenceID]);

typename LigandFamily = (familyName: String, familyId: Int);

typename LigandPhysicalProperties = (
  lpHydrogenBondAcceptors: Int,
  lpHydrogenBondDonors: Int,
  lpRotatableBonds: Int,
  lpTopologicalPolarSurfaceArea: Float,
  lpMolecularWeight: Float,
  lpXLogP: Float,
  lpLipinskiRules: Int
);

typename Comments = (
  generalComments: Markup,
  clinicalUseComments: Markup,
  mechanismOfActionComments: Markup,
  absorptionDistributionComments: Markup,
  metabolismComments: Markup,
  eliminationComments: Markup,
  popnPharmacokineticsComments: Markup,
  organFunctionImpairmentComments: Markup,
  bioactivityComments: Markup,
  immunoComments: Markup,
  malariaComments: Markup
);

typename BioactivityTables = (); # For now.

typename LigandStructure = (
  canonicalSmiles: String,
  isomericSmiles: String,
  inchiStandardID: String,
  inchiStandardKey: String
);

typename LigandURLs = (
  drugsURL: String,
  emaURL: String,
  emcURL: String
);

typename LigandInfo = (
  ligandID: Int,
  ligandType: String,
  ligandName: Markup,
  ligandFamilies: [LigandFamily],
  ligandPhysicalProperties: Maybe(LigandPhysicalProperties),
  ligandApproval: LigandApproval,
  ligandWithdrawn: Bool,
  ligandIUPACName: String,
  ligandINNs: [INN],
  ligandSynonyms: [Synonym],
  ligandComments: Comments,
  ligandURLs: LigandURLs,
  ligandDBLinks: (), # For now
#  ligandBioactivityTables: BioactivityTables,
  ligandReferences: [(ReferenceId, (ReferenceNumber, Reference))],
  # ligandStructure: LigandStructure,
  ligandLigandRefs: [(LigandId, LigandName)]
);

typename Model = Maybe((
  modelTab:Tab,
  modelLigand: LigandInfo
));


sig getInitialModel : () ~%~> Model
fun getInitialModel() {

  fun getLigandInfo(ligandId) {
    fun transformLigandInfo(rawInfo) {
      var rawLigand = rawInfo.ligand;
      fun transformPhysicalProperties(rawProps) {
        switch(rawProps) {
          case [] -> Nothing
          case rawProps :: _ ->
            Just(
            (lpHydrogenBondAcceptors = rawProps.hydrogen_bond_acceptors,
             lpHydrogenBondDonors = rawProps.hydrogen_bond_donors,
             lpRotatableBonds = rawProps.rotatable_bonds_count,
             lpTopologicalPolarSurfaceArea = rawProps.topological_polar_surface_area,
             lpMolecularWeight = rawProps.molecular_weight,
             lpXLogP = rawProps.xlogp,
             lpLipinskiRules = rawProps.lipinski_s_rule_of_five))
        }
      }

      var approval =
        if (rawInfo.ligand.approved) {
          Approved(rawLigand.approved_source)
        } else {
          NotApproved
        };

      fun transformFamilies(fs) {
        map(fun(f) { (familyId = f.family_id, familyName = f.name) }, fs)
      }

      fun transformSynonyms(ss) {
        fold_right(fun(x, acc) {
            if (x.l2s.display) {
              (synonymName = parseOrError(x.l2s.synonym), synonymRefs = x.refs) :: acc
            } else {
              acc
            }
        }, [], ss)
      }

      fun transformInns(inns) {
        map(fun(inn) { (innNumber = inn.inn_number, inn = inn.inn) }, inns)
      }

      fun transformComments(l) {
        var parsed =
         (generalComments = parseOrError(l.comments),
          clinicalUseComments = parseOrError(l.clinical_use),
          mechanismOfActionComments = parseOrError(l.mechanism_of_action),
          absorptionDistributionComments = parseOrError(l.absorption_distribution),
          metabolismComments = parseOrError(l.metabolism),
          eliminationComments = parseOrError(l.elimination),
          popnPharmacokineticsComments = parseOrError(l.popn_pharmacokinetics),
          organFunctionImpairmentComments = parseOrError(l.organ_function_impairment),
          bioactivityComments = parseOrError(l.bioactivity_comments),
          immunoComments = parseOrError(l.immuno_comments),
          malariaComments = parseOrError(l.gtmp_comments));

        var (refs, ligands) =
          RenderMarkup.collectAllIds([
          parsed.generalComments,
          parsed.clinicalUseComments, parsed.mechanismOfActionComments,
          parsed.absorptionDistributionComments, parsed.metabolismComments,
          parsed.eliminationComments, parsed.popnPharmacokineticsComments,
          parsed.organFunctionImpairmentComments, parsed.bioactivityComments,
          parsed.immunoComments, parsed.malariaComments]);
        (parsed, refs, ligands)
      }

      var (comments, commentRefs, commentLigands) =
        transformComments(rawLigand);

      var refs = mkReferenceData(queryReferences(commentRefs));
      var ligandRefs = queryLigands(commentLigands);
      var urls = (
        drugsURL = rawLigand.drugs_url,
        emcURL = rawLigand.emc_url,
        emaURL = rawLigand.ema_url
      );

      (ligandID = ligandId,
       ligandType = rawInfo.ligand.type,
       ligandName = parseOrError(rawInfo.ligand.name),
       ligandFamilies = transformFamilies(rawInfo.families),
       ligandPhysicalProperties =
         transformPhysicalProperties(rawInfo.physicalProperties),
       ligandApproval = approval,
       ligandWithdrawn = rawLigand.withdrawn_drug,
       ligandIUPACName = rawLigand.iupac_name,
       ligandINNs = transformInns(rawInfo.inns),
       ligandSynonyms = transformSynonyms(rawInfo.synonyms),
       ligandComments = comments,
       ligandURLs = urls,
       ligandDBLinks = (),
       ligandReferences = refs,
       ligandLigandRefs = ligandRefs)
    }

    var results =
      query {
        for (l <-- Tables.ligand)
        where (l.ligand_id == ligandId)
            for (struct <-- Tables.ligand_structure)
            where (struct.ligand_id == ligandId)
            [(
              ligand = l,
              physicalProperties =
                for (physchem <-- Tables.ligand_physchem)
                where (physchem.ligand_id == ligandId)
                [physchem],
              families =
                for (l2f <-- Tables.ligand2family)
                where (l2f.ligand_id == ligandId)
                  for (f <-- Tables.family)
                  where (f.family_id == l2f.family_id)
                  [f],
              inns =
                for (l2inn <-- Tables.ligand2inn)
                where (l2inn.ligand_id == ligandId)
                  for (i <-- Tables.inn)
                  where (i.inn_number == l2inn.inn_number)
                  [i],
              synonyms =
                for (l2s <-- Tables.ligand2synonym)
                  where (l2s.ligand_id == ligandId)
                  [(l2s = l2s,
                    refs =
                      for (sref <-- Tables.ligand2synonym_refs)
                        where (sref.ligand2synonym_id == l2s.ligand2synonym_id)
                        [sref.reference_id])]
            )]
      };

    switch (results) {
      case [] -> debug("No results"); Nothing
      case x :: _ -> Just(transformLigandInfo(x))
    }
  }

  switch(lookup("ligandId", environment())) {
    case Nothing -> debug("No ID"); Nothing
    case Just(id) ->
      debug("ID: " ^^ id);
      switch (getLigandInfo(stringToInt(id))) {
        case Nothing -> debug("Failed getting ligand info"); Nothing
        case Just(ligandInfo) -> Just((modelTab = Summary, modelLigand = ligandInfo))
      }
  }
}

sig updt : (Message, Model) ~%~> Model
fun updt(msg, model) {
  fun updt(model) {
    switch (msg) {
      case ChangeTab(filter) ->
        (model with modelTab = filter)
    }
  }
  switch (model) {
    case Just(model) -> Just(updt(model))
    case Nothing -> model
  }
}

sig view : (Model) ~%~> HTML(Message)
fun view(model) {
  fun viewModel(model) {
    var ligandInfo = model.modelLigand;
    var strId = intToString(ligandInfo.ligandID);
    var h0 = MvuHTML.empty;
    var a0 = MvuAttrs.empty;

    fun renderM(m) {
      renderMarkup(m, ligandInfo.ligandReferences,
          ligandInfo.ligandLigandRefs)
    }

    fun renderBox(name, colspan, content) {
      table_(class("receptor_data_tables") +@ style("width:100%"),
        tbody(a0,
          tr(a0,
            td(class("category") +@ colSpan(colspan), textNode(name))) +*
          content))
    }

    fun commentBox(caption, comments) {
      if (markupEmpty(comments)) {
        MvuHTML.empty
      } else {
        renderBox(caption, 1, tr(a0, td(class("info"), renderM(comments))))
      }
    }

    var basicInfoBox = {
      div(class("grid_16 alpha"),
        a(name("top"), h0) +*
        h4(a0, renderM(ligandInfo.ligandName)) +*
        div(class("contentboxfullhelp"),
          div(class("textright"),
            p(a0, b(a0, textNode("Ligand id: ")) +*
              textNode(strId)) +*
            p(a0, b(a0, textNode("Name: ")) +*
              renderM(ligandInfo.ligandName)))))
    };

    var structuralInfoBox = {
      var structureImgBox = {
        td(style("width:453px;min-width:453px;text-align:left;vertical-align:top;"),
          table_(class("ligand_header_table") +@ style("width:453px;margin:0px"),
            tr(a0,
              td(class("ligand_header_category"), textNode("2D Structure"))) +*
            tr(class("ligand_header_info"),
              td(style("vertical-align:middle;text-align:center;"),
                a(style("color:white;") +@ href("/chemicalStructureEditor?ligandId="
                    ^^ strId) +@
                  MvuAttrs.title("Click here for structure editor"),
                  img(src("https://www.guidetopharmacology.org/CHEMSTRUCT/iuphar/" ^^ strId ^^ ".gif") +@
                    height("250") +@ alt("Click here for structure editor"), h0))))))
      };

      var propertiesBox = {
        fun renderProperties(lpps) {
          var properties =
            [("Hydrogen bond acceptors",
                textNode(intToString(lpps.lpHydrogenBondAcceptors))),
             ("Hydrogen bond donors",
                textNode(intToString(lpps.lpHydrogenBondDonors))),
             ("Rotatable bonds", textNode(intToString(lpps.lpRotatableBonds))),
             ("Topological polar surface area",
                textNode(floatToString(lpps.lpTopologicalPolarSurfaceArea))),
             ("Molecular weight",
                textNode(floatToString(lpps.lpMolecularWeight))),
             ("XLogP", textNode(floatToString(lpps.lpXLogP))),
             ("No. Lipinski's rules broken",
                textNode(intToString(lpps.lpLipinskiRules)))];

          fun renderRow((name, html)) {
            tr(class("ligand_header_info"),
              td(a0, textNode(name)) +*
              td(style("text-align:center"), html))
          }
          var rows = MvuHTML.concatMap(renderRow, properties);
          table_(class("ligand_header_table") +@ style("width:453px;margin:0px;"),
            thead(a0,
              tr(a0,
                td(class("ligand_header_category") +@ colSpan(2) +@ style("text-align:left;"),
                  textNode("Calculated Physico-chemical Properties")))) +*
              rows) +*
          p(style("margin:5px;font-size:90%;"),
                textNode("Molecular properties generated using the ") +*
                a(href("https://cdk.github.io"), textNode("CDK")))
        }

        switch(ligandInfo.ligandPhysicalProperties) {
          case Just(lpps) -> renderProperties(lpps)
          case Nothing -> MvuHTML.empty
        }
      };

      div(class("grid_16 alpha"),
        h4(a0,
          textNode("Structure and Physico-chemical Properties")) +*
        div(class("contentboxfullhelp"),
          table_(class("fullwidth") +@ style("position:relative; margin-bottom: 10px"),
            tr(a0,
              structureImgBox +*
              td(style("min-width:10px;width:10px;"), h0) +*
              propertiesBox))))

    };

    var summaryPage = {
      var classificationTable = {
        fun renderFamily(f) {
          a(href("/familyDisplay?familyId=" ^^ intToString(f.familyId)),
              textNode(f.familyName))
        }
        var renderedFamilies =
          MvuHTML.concat(join([textNode(", ")],
            map(fun(f) { [renderFamily(f)] }, ligandInfo.ligandFamilies)));

        var compoundClassData = {
          var ligandHref =
            if (ligandInfo.ligandType == "Synthetic organic") {
              "SyntheticOrganic"
            } else if (ligandInfo.ligandType == "Natural product") {
              "NaturalProduct"
            } else if (ligandInfo.ligandType == "Peptide") {
              "EndogenousPeptide"
            } else {
              ligandInfo.ligandType
            };
          a(href("/ligandList?type=" ^^ ligandHref), textNode(ligandInfo.ligandType))
        };

        var approvalData =
          switch (ligandInfo.ligandApproval) {
            case NotApproved -> textNode("No")
            case Approved(source) ->
              var suffix =
                if (source == "") {
                  MvuHTML.empty
                } else {
                  textNode(" (" ^^ source ^^ ")")
                };
              textNode("Yes") +* suffix
          };

        var rows = [
          ("Compound class", compoundClassData, true),
          ("Ligand families / groups", renderedFamilies, not(listEmpty(ligandInfo.ligandFamilies))),
          ("Approved drug", approvalData, ligandInfo.ligandApproval <> NotApproved),
          ("Withdrawn drug", textNode("Yes"), ligandInfo.ligandWithdrawn),
          ("Drugs", MvuHTML.empty, false), # TODO
          ("Prodrugs", MvuHTML.empty, false) # TODO
        ];

        fun renderRow((columnName, content, show)) {
          if (show) {
            tr(a0,
              td(class("info") +@ align("left") +@
                style("min-width:250px;max-width:250px;width:250px;"),
                textNode(columnName)) +*
              td(class("info"), content))
          } else {
            MvuHTML.empty
          }
        }

        var renderedRows = MvuHTML.concatMap(renderRow, rows);
        renderBox("Classification", 2, renderedRows)
      };

      var iupacBox = {
        if (ligandInfo.ligandIUPACName == "") {
          MvuHTML.empty
        } else {
          renderBox("IUPAC Name", 1, tr(class("info"),
            td(a0, textNode(ligandInfo.ligandIUPACName))))
        }
      };

      var innsBox = {
        fun renderINN(inn) {
          tr(class("info"),
            td(a0, textNode(intToString(inn.innNumber))) +*
            td(a0, textNode(inn.inn)))
        }
        if (listEmpty(ligandInfo.ligandINNs)) {
          MvuHTML.empty
        } else {
          var innsRows = MvuHTML.concatMap(renderINN, ligandInfo.ligandINNs);
          var contents =
            tr(a0,
              td(class("heading"), textNode("INN Number")) +*
              td(class("heading"), textNode("INN"))) +*
            innsRows;
          renderBox("International Nonproprietary Names", 2, contents)
        }
      };

      var synonymsBox = {
        var contents = MvuHTML.concat(join([textNode(" | ")],
              map(fun(x) { [RenderMarkup.renderSimple(x.synonymName)] }, ligandInfo.ligandSynonyms)));
        if (listEmpty(ligandInfo.ligandSynonyms)) {
          MvuHTML.empty
        } else {
          renderBox("Synonyms", 1, tr(a0, td(class("info"), contents)))
        }
      };

      var commentsBox =
        commentBox("Comments", ligandInfo.ligandComments.generalComments);

      var dbLinksBox = {
        MvuHTML.empty
      };

      classificationTable +*
      iupacBox +*
      innsBox +*
      synonymsBox +*
      commentsBox +*
      dbLinksBox
    };

    var biologicalActivityPage = {
      MvuHTML.empty
    };

    var clinicalDataPage = {
      var comments = ligandInfo.ligandComments;
      var commentsTable = {
        var commentsRows =
          [("Absorption/Distribution", comments.absorptionDistributionComments),
           ("Metabolism", comments.metabolismComments),
           ("Elimination", comments.eliminationComments),
           ("Population Pharmacokinetics", comments.popnPharmacokineticsComments),
           ("Organ function impairment", comments.organFunctionImpairmentComments)];

        fun renderRow((colName, comments)) {
          if (markupEmpty(comments)) {
            MvuHTML.empty
          } else {
            tr(a0,
              td(class("category") +@ style("background:white;font-style:italic;"),
                textNode(colName))) +*
            tr(class("info"),
              td(a0, renderM(comments)))
          }
        }
        var renderedRows = MvuHTML.concatMap(renderRow, commentsRows);
        var showTable = any(fun((_, comment)) { not(markupEmpty(comment)) }, commentsRows);
        if (showTable) {
          table_(class("receptor_data_tables") +@ style("width:100%"),
            tr(a0,
              td(class("category"), textNode("Pharmacokinetics"))) +*
            renderedRows)
        } else {
          MvuHTML.empty
        }
      };

      var externalURLs = {
        var urls = ligandInfo.ligandURLs;
        var urlInfo =
          [("Electronic Medicines Compendium (eMC)", "Information about medicines licensed for use in the UK", urls.emcURL),
           ("Drugs.com", "Drug Information Online", urls.drugsURL),
           ("European Medicines Agency (EMA)", "Database of medicines used in Europe", urls.emaURL)];
        fun renderURLRow((name, altText, url)) {
          if (url == "") {
            MvuHTML.empty
          } else {
            a(href(url) +@ title(altText), textNode(name)) +* br(a0, h0)
          }
        }
        var renderedRows = MvuHTML.concatMap(renderURLRow, urlInfo);
        var showURLs = any(fun((_, _, url)) { url <> "" }, urlInfo);
        if (showURLs) {
          table_(class("receptor_data_tables") +@ style("width:100%"),
            tbody(a0,
              tr(a0,
                td(class("category"), textNode("External links"))) +*
              tr(class("info"),
                td(class("embedded_link"),
                  p(a0, textNode("For extended ADME data see the following:")) +*
                  renderedRows))))
        } else {
          MvuHTML.empty
        }
      };

      commentBox("Summary of Clinical Use", comments.clinicalUseComments) +*
      commentBox("Mechanism of Action and Pharmacodynamic Effects", comments.mechanismOfActionComments) +*
      commentsTable +*
      externalURLs
    };

    var referencesPage = {
      fun renderReference((refID, (refNum, ref))) {
         # tr(class("info"),
        # TODO: Go from here
         #             td(a0,
        MvuHTML.empty
      }

      var ligandRefs = ligandInfo.ligandReferences;
      var renderedReferences = MvuHTML.concatMap(renderReference, ligandRefs);

      if (listEmpty(ligandInfo.ligandReferences)) {
        textNode("There are no references to display")
      } else {
        table_(class("receptor_data_tables") +@ style("width:100%"),
          tr(a0,
            td(class("category"), textNode("References"))) +*
            renderedReferences)
      }
      #<table class="receptor_data_tables" style="width:100%;">
      #   <tr>
      #       <td class="category">References</td>
      #   </tr>
      #       <tr class="info">
      #           <td>
      #                <span class="referenceAuthors">1.&nbsp;Fan X, Zhou N, Zhang X, Mukhtar M, Lu Z, Fang J, DuBois GC, Pomerantz RJ.&nbsp;(2003)</span>
<br/>S#ructural and functional study of the apelin-13 peptide, an endogenous ligand of the HIV-1 coreceptor, APJ.
      #                   <br/><i>Biochemistry.</i>, <b>42</b>: 10163-10168.
      #                           [PMID:<a href="javascript:newWindow('https://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=AbstractPlus&list_uids=12939143', 800, 500)">12939143</a>]
      #           </td>
      #       </tr>

    };

    var structurePage = {
      MvuHTML.empty
    };

    var similarLigandsPage = {
      MvuHTML.empty
    };

    var immunoPage = {
      MvuHTML.empty
    };

    var malariaPage = {
      MvuHTML.empty
    };

    var tabBox = {
      var tabs = [
        ("Summary", Summary),
        ("Biological activity", BiologicalActivity),
        ("Clinical data", ClinicalData),
        ("References", References),
        ("Structure", Structure),
        ("Similar ligands", SimilarLigands),
        ("Immunopharmacology", Immuno),
        ("Malaria", Malaria)
      ];

      fun renderTab((name, filter)) {
        var attr =
          if (filter == model.modelTab) {
            class("active")
          } else {
            MvuAttrs.empty
          };
        li(attr,
          a(href("#") +@ onClick(fun() { ChangeTab(filter) }), textNode(name)))
      }

      var renderedTabs = MvuHTML.concatMap(renderTab, tabs);

      var content =
        switch(model.modelTab) {
          case Summary -> summaryPage
          case BiologicalActivity -> biologicalActivityPage
          case ClinicalData -> clinicalDataPage
          case References -> referencesPage
          case Structure -> structurePage
          case SimilarLigands -> similarLigandsPage
          case Immuno -> immunoPage
          case Malaria -> malariaPage
        };

      div(class("grid_16 alpha"),
        div(class("contentboxfullhelp"),
          div(id("cssmenu"),
            ul(a0, renderedTabs)) +*
          div(class("clear"), h0) +*
          div(class("data_tables_container") +@ style("padding-top:10px; padding-bottom: 10px;"),
            content)))
    };

    basicInfoBox +*
    structuralInfoBox +*
    tabBox

  }

  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Invalid Ligand ID")
  }
}

fun mainPage() {
  var initialModel = getInitialModel();
  Mvu.runSimple("vdom_placeholder", initialModel, view, updt);
  template("Ligand Display")
}


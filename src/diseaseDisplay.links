open Parser;
open RenderMarkup;
open Utility;
open DataTable;
open MvuHTML;
open MvuAttrs;
open Tables;
open Mvu;
open Template;
open Reference;

typename LigandID = Int;
typename TargetID = Int;
typename DiseaseID = Int;

typename Message = [|
    SortImmunoTargetInteractions: (TargetID, ColumnName, SortDirection)
  | SortLigands: (ColumnName, SortDirection)
  | ToggleLigandComments: LigandID
  | ToggleReferences
|];


typename Ligand = (
    ligandId: LigandID,
    ligandRawName: String,
    ligandName: Markup,
    ligandImmuno: Bool,
    ligandApproved: Bool,
    ligandShowComments: Bool,
    ligandImmunoComments: Markup,
    ligandClinicalComments: Markup,
    ligandBioactivityComments: Markup
  );

# It seems like this data is only applicable for immuno-relevant
# ligands.
typename ImmunoTargetInteraction = (
    itLigandId: LigandID,
    itLigandName: Markup,
    itLigandRawName: String,
    itLigandImmuno: Bool,
    itLigandApproved: Bool,
    itLigandPrimary: Bool,
    itLigandComments: Markup,
    itLigandRawComments: String
  );

# FIXME: Need Ligand interactions here
typename Target = (
    targetId: TargetID,
    targetName: Markup,
    targetRole: Markup,
    targetComments: Markup,
    targetDrugComments: Markup,
    targetSideEffects: Markup,
    targetTherapeuticUse: Markup,
    targetReferences: [ReferenceId],
    targetInteractions: SortableTable(ImmunoTargetInteraction, Message)
  );

typename DiseaseInfo =
  (diID: DiseaseID,
   diName: Markup,
   diSynonyms: [Markup],
   diDescription: Markup,
   diDatabaseLinks: (), # urgh
   diTargets: [Target],
   diLigands: SortableTable(Ligand, Message),
   diShowReferences: Bool,
   diReferences: [Reference.Reference]);

typename Model = Maybe(DiseaseInfo);

sig updt : (Message, Model) ~%~> Model
fun updt(msg, model) {

  fun sortImmunoTargetInteractions(targets, tid, cn, dir) {
    switch(targets) {
      case [] -> []
      case t :: ts ->
        if (t.targetId == tid) {
          var interactionTable =
            DataTable.updateSortStatus(t.targetInteractions, cn, dir);
          (t with targetInteractions = interactionTable) :: ts
        } else {
          t :: sortImmunoTargetInteractions(ts, tid, cn, dir)
        }
    }
  }

  fun updtModel(model) {
    switch(msg) {
      case SortImmunoTargetInteractions(targetId, colName, dir) ->
        (model with diTargets =
          sortImmunoTargetInteractions(model.diTargets, targetId, colName, dir))
      case SortLigands(colName, dir) ->
        (model with diLigands =
           DataTable.updateSortStatus(model.diLigands, colName, dir))
      case ToggleLigandComments(lid) ->
        var newLigands =
          map(fun(l) {
            if (l.ligandId == lid) {
              (l with ligandShowComments = not(l.ligandShowComments))
            } else {
              l
            }
          }, DataTable.getTableData(model.diLigands));
        var newLigandTable = DataTable.updateTableData(model.diLigands, newLigands);
        (model with diLigands = newLigandTable )
      case ToggleReferences ->
        (model with diShowReferences = not(model.diShowReferences))
    }
  }
  switch (model) {
    case Just(model) -> Just(updtModel(model))
    case Nothing -> Nothing
  }
}

sig getModel : (Int) ~%~> Model
fun getModel(diseaseId) {
  # First, get raw info from the DB
  var rawInfo =
    query {
      for (d <-- Tables.disease)
        where (d.disease_id == diseaseId)
          [(id = d.disease_id,
            name = d.name,
            synonyms =
              for (d2s <-- Tables.disease2synonym)
                where (d2s.disease_id == diseaseId)
                [d2s.synonym],
            description = d.description,
            dblinks = (), # FIXME
            targets =
              for (pp <-- Tables.pathophysiology)
                where (pp.disease_id == diseaseId)
                for (o <-- Tables.object)
                  where (o.object_id == pp.object_id)
                    [(id=o.object_id, name=o.name, comments=pp.comments,
                      role=pp.role, drugComments=pp.drugs, sideEffects=pp.side_effects,
                      therapeuticUse=pp.use,
                       references =
                         for (pp_ref <-- Tables.pathophysiology_refs)
                           where (pp_ref.pathophysiology_id == pp.pathophysiology_id)
                           [pp_ref.reference_id],
                      interactions =
                        for (i <-- Tables.interaction)
                          where (o.object_id == i.object_id)
                          for (id2l <-- Tables.immuno_disease2ligand)
                            where (id2l.ligand_id == i.ligand_id)
                            for (l <-- Tables.ligand)
                              where (l.ligand_id == i.ligand_id)
                                [(lId = l.ligand_id, lName = l.name,
                                  lImmuno = l.in_gtip, lApproved = l.approved,
                                  lPrimary = i.primary_target,
                                  lComments = id2l.comment)]
                     )],
            ligands =
              for (d2l <-- Tables.immuno_disease2ligand)
                where (d2l.disease_id == diseaseId)
                  for (l <-- Tables.ligand)
                    where (l.ligand_id == d2l.ligand_id)
                    [l]
          )]
    };

  # Next, run the parser to get ourselves the markup and reference information
  fun parseRaw(rawResult) {
    var name = parseOrError(rawResult.name);
    var synonyms = map(parseOrError, rawResult.synonyms);
    var description = parseOrError(rawResult.description);
    var (targets, targetRefs, immunoRefs) =
      fold_right(fun(x, (targets, refs, iRefs)) {
        var (immunoInteractions, immunoRefs) =
          fold_right(fun (x, (interactions, refs)) {
              var interaction = (
                  itLigandId = x.lId,
                  itLigandName = parseOrError(x.lName),
                  itLigandRawName = x.lName,
                  itLigandImmuno = x.lImmuno,
                  itLigandApproved = x.lApproved,
                  itLigandPrimary = x.lPrimary,
                  itLigandComments = parseOrError(x.lComments),
                  itLigandRawComments = x.lComments
              );
              var (newRefs, _) =
                RenderMarkup.collectIds(interaction.itLigandComments);
              (interaction :: interactions, newRefs ++ refs)
          }, ([], []), x.interactions);

        var interactionsTable =
          DataTable.makeTable(
              [("Ligand", true),
               ("", false), ("", false), ("", false), # Needed for icon display
               ("Comments", true)],
              immunoInteractions,
              fun (colName, x) {
                if (colName == "Ligand") { x.itLigandRawName }
                else if (colName == "Comments") { x.itLigandRawComments }
                else { "" }
              },
              fun (col, dir) { SortImmunoTargetInteractions(x.id, col, dir) });

        var res =
          (
           targetId = x.id,
           targetName = parseOrError(x.name),
           targetComments = parseOrError(x.comments),
           targetRole = parseOrError(x.role),
           targetDrugComments = parseOrError(x.drugComments),
           targetSideEffects = parseOrError(x.sideEffects),
           targetTherapeuticUse = parseOrError(x.therapeuticUse),
           targetReferences = x.references,
           targetInteractions = interactionsTable
          );
        var (refIds, _) = RenderMarkup.collectIds(res.targetComments);
        var refIds = refIds ++ x.references;
        (res :: targets, refIds ++ refs, immunoRefs ++ iRefs)
    }, ([], [], []), rawResult.targets);

    var (ligands, ligandRefs) = fold_right(fun(l, (ligands, refs)) {
        var res =
          (ligandId = l.ligand_id,
           ligandName = parseOrError(l.name),
           ligandRawName = l.name,
           ligandImmuno = l.in_gtip,
           ligandApproved = l.approved,
           ligandImmunoComments = parseOrError(l.immuno_comments),
           ligandClinicalComments = parseOrError(l.clinical_use),
           ligandBioactivityComments = parseOrError(l.bioactivity_comments),
           ligandShowComments = true);
        var (iCommentRefs, _) = RenderMarkup.collectIds(res.ligandImmunoComments);
        var (cCommentRefs, _) = RenderMarkup.collectIds(res.ligandClinicalComments);
        var (bCommentRefs, _) = RenderMarkup.collectIds(res.ligandBioactivityComments);
        var refs = iCommentRefs ++ cCommentRefs ++ bCommentRefs ++ refs;
        (res :: ligands, refs)
    }, ([], []), rawResult.ligands);

    var ligandsTable = DataTable.makeTable(
        [("Ligand", true), ("", false), ("", false), ("References", false),
         ("Clinical and Disease Comments", false)],
        ligands,
        fun (cn, x) {
          if (cn == "Ligand") {
            x.ligandRawName
          } else { "" }
        },
        fun (cn, dir) { SortLigands(cn, dir) }
    );

    var referenceIds = uniquify(targetRefs ++ ligandRefs ++ immunoRefs);
    (diID = rawResult.id,
     diName = name,
     diSynonyms = synonyms,
     diDescription = description,
     diDatabaseLinks = (),
     diTargets = targets,
     diLigands = ligandsTable,
     diShowReferences = false,
     diReferences = queryReferences(referenceIds))
  }

  switch (rawInfo) {
    case [] -> Nothing
    case rawResult :: _ -> Just(parseRaw(rawResult))
  }
}

sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("diseaseId", environment())) {
    case Just(diseaseId) ->
      if (isInt(diseaseId)) {
        getModel(stringToInt(diseaseId))
      } else {
        Nothing
      }
    case Nothing -> Nothing
  }
}

fun view(model) {
  var a0 = MvuAttrs.empty;
  fun viewModel(model) {
    fun colspan(x) { MvuAttrs.attr("colSpan", x) }
    fun rowspan(x) { MvuAttrs.attr("rowSpan", x) }
    fun src(x) { MvuAttrs.attr("src", x) }
    fun valign(x) { MvuAttrs.attr("valign", x) }
    var renderedName = RenderMarkup.renderSimple(model.diName);
    var diseaseInfoBox = {
      var targetCount = length(model.diTargets);
      var immunoTargetCount =
        length(filter(fun(t) {
              length(DataTable.getTableData(t.targetInteractions)) > 0 },
            model.diTargets));
      var immunoLigandCount =
        length(filter(fun(l) { l.ligandImmuno },
              DataTable.getTableData(model.diLigands)));
      var synonyms = MvuHTML.concat(join([textNode(" | ")],
            map(fun(x) { [RenderMarkup.renderSimple(x)] }, model.diSynonyms)));

      h4(a0, renderedName) +*
      div(class("contentboxfullhelp"),
        div(class("imageleft"), textNode("?")) +*
        div(class("textright"),
          table_(a0,
            tr(a0,
              td(a0, b(a0, textNode("Disease ID:"))) +*
              td(a0, textNode(intToString(model.diID)))) +*
            tr(a0,
              td(a0, b(a0, textNode("Name:"))) +*
              td(colspan("2") +@ width("280"), renderedName)) +*
            tr(a0,
              td(rowspan("3") +@ valign("top"), b(a0, textNode("Associated with:"))) +*
              td(width("180"), b(a0, textNode(intToString(targetCount))) +*
                textNode(" targets"))) +*
            tr(a0,
              td(width("180"), b(a0, textNode(intToString(immunoTargetCount))) +*
                textNode(" immuno-relevant targets")) +*
              td(rowspan("2") +@ valign("middle"),
                img(src("/images/immuno_ligand.png"), MvuHTML.empty))) +*
              td(width("180"), b(a0, textNode(intToString(immunoLigandCount))) +*
                textNode(" immuno-relevant ligands")))) +*
        div(class("data_tables_container"),
            a(name("diseaseSynonyms"), MvuHTML.empty) +*
            table_(class("receptor_data_tables fullwidth"),
              thead(a0,
                tr(name("hotspot") +@ class("hotspot"),
                  td(class("info category"), textNode("Synonyms")))) +*
              tbody(name("toggle"),
                tr(a0, td(class("info"), synonyms)))) +*
            a(name("diseaseLinks"), MvuHTML.empty) +*
            table_(class("receptor_data_tables fullwidth"),
              thead(a0,
                tr(name("hotspot") +@ class("hotspot"),
                  td(class("info category"), textNode("Database Links")))) +*
              tbody(name("toggle"),
                tr(a0, td(class("info"), textNode("Not implemented yet")))))))
    };

    fun makeTargetTable(target) {

      fun mkTextRow((name, markup)) {
        # FIXME: Ensure refernce map is propagated in model, so it can be used here
        var renderedMarkup = renderMarkup(markup, [], []);
        if (renderedMarkup == MvuHTML.empty) {
          MvuHTML.empty
        } else {
          tr(a0,
            td(class("info immdislig"), textNode(name ^^ ": ")) +*
            td(class("info"), renderedMarkup))
        }
      }

      var textRows =
        MvuHTML.concat(map(mkTextRow, [
          ("Role", target.targetRole),
          ("Comments", target.targetComments),
          ("Drug comments", target.targetDrugComments),
          ("Side effects", target.targetSideEffects),
          ("Therapeutic use", target.targetTherapeuticUse)
        ]));

      table_(class("receptor_data_tables_disease fullwidth"),
          thead(a0,
            tr(name("hotspot") +@ class("hotspot"),
              td(class("info category") +@ attr("colSpan", "2"),
                a(href("/objectDisplay?objectId=" ^^ (intToString(target.targetId))),
                  renderSimple(target.targetName))))) +*
          tbody(a0, textRows))
    }

    var targetsBox = {
      var targetTables = MvuHTML.concat(map(makeTargetTable, model.diTargets));
      div(class("grid_16 alpha"),
          h4(a0, textNode("Targets")) +*
          div(class("contentboxfullhelp"),
            div(class("disease_data_tables_container"),
              targetTables)))
    };


    div(class("grid_12"),
        div(class("grid_16 alpha"),
          a(name("top"), MvuHTML.empty) +*
          diseaseInfoBox +*
          targetsBox
          ))
  }

  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Disease not found.")
  }
}

fun mainPage() {
  Mvu.runSimple("vdom_placeholder", getInitialModel(), view, updt);
  template("Disease Information")
}

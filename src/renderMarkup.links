# Renders markup as MVU HTML, as well as providing a list of reference IDs.
open MvuAttrs;
open MvuHTML;
open Parser;
open Reference;

typename LigandId = Int;
typename ReferenceId = Int;
typename ReferenceNumber = Int;
typename Reference = Reference;

# Given Markup parsed from the DB, return a list of reference and ligand IDs.
#sig collectIds : (Parser.Markup) ~> ([ReferenceId], [LigandId])
fun collectIds(m) {
  fun go(m) {
    switch(m) {
      case MarkupEmpty -> ([], [])
      case MarkupAppend(m1, m2) ->
        var (m1Refs, m1Ligands) = go(m1);
        var (m2Refs, m2Ligands) = go(m2);
        (m1Refs ++ m2Refs, m1Ligands ++ m2Ligands)
      case MarkupText(_) -> ([], [])
      case MarkupReferenceTag(id) -> ([id], [])
      case MarkupLigandTag(id) -> ([], [id])
      case MarkupHTMLTag(_, _, m) -> go(m)
    }
  }

  go(m)
}

#sig renderMarkup :
#  (Parser.Markup, [(ReferenceId, (Int, Reference))],
#    [(LigandId, String)]) ~> HTML(a)
fun renderMarkup(m, refs, ligands) {
#  sig go : (Parser.Markup) ~> HTML(a)
  fun go(m) {
    switch(m) {
      case MarkupEmpty -> MvuHTML.empty
      case MarkupAppend(m1, m2) -> go(m1) +* go(m2)
      case MarkupText(txt) -> textNode(txt)
      case MarkupReferenceTag(id) ->
        var refId = switch(lookup(id, refs)) {
          case Just((refNum, _)) -> intToString(refNum + 1)
          case Nothing -> "?"
        };

        var strId = intToString(id);
        textNode("[") +*
        a(href("#ref" ^^ refId), textNode(refId)) +*
        textNode("]")
      case MarkupLigandTag(id) ->
        var ligandName = switch(lookup(id, ligands)) {
          case Just(ligandName) -> ligandName
          case Nothing -> "?"
        };
        a(href("/ligandDisplay?id=" ^^ intToString(id)),
          textNode(ligandName))
      case MarkupHTMLTag(tagName, attrs, children) ->
        var attrs = MvuAttrs.concat(map(fun((k, v)) { MvuAttrs.attr(k, v) }, attrs));
        MvuHTML.tag(tagName, attrs, go(children))
    }
  }
  go(m)
}
